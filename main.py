# file: main.py

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    force=True,
)
logger = logging.getLogger(__name__)

logger.info("--- –°–ö–†–ò–ü–¢ main.py –ó–ê–ü–£–©–ï–ù ---")

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from config import BOT_TOKEN, SUPER_ADMIN_ID, ADMIN_ID_1, ADMIN_ID_2, REDIS_HOST, REDIS_PORT
from aiogram.types import BotCommand, BotCommandScopeChat, ErrorEvent, BotCommandScopeDefault
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã ---
from handlers import (start, profile, support, earning, admin_panel, admin_moderation, gmail,
                      stats, promo, other, ban_system, referral, admin_roles, internship, posting)
from database import db_manager
from utils.ban_middleware import BanMiddleware
from utils.username_updater import UsernameUpdaterMiddleware
from logic.reward_logic import distribute_rewards
from logic.cleanup_logic import check_and_expire_links, process_expired_holds


async def sync_base_admins():
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ config.py —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –Ω–∞–ª–∏—á–∏–µ.
    """
    logger.info("Syncing base administrators from config to database...")
    if ADMIN_ID_1:
        admin1 = await db_manager.get_administrator(ADMIN_ID_1)
        if not admin1:
            await db_manager.add_administrator(
                user_id=ADMIN_ID_1,
                role='super_admin',
                is_tester=False,
                added_by=0, 
                is_removable=False 
            )
            logger.info(f"Added non-removable super_admin from config: {ADMIN_ID_1}")

    if ADMIN_ID_2 and ADMIN_ID_2 != 0:
        admin2 = await db_manager.get_administrator(ADMIN_ID_2)
        if not admin2:
            await db_manager.add_administrator(
                user_id=ADMIN_ID_2,
                role='admin',
                is_tester=False,
                added_by=0,
                is_removable=False
            )
            logger.info(f"Added non-removable admin from config: {ADMIN_ID_2}")
    logger.info("Base administrators sync complete.")


async def set_bot_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    user_commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="stars", description="‚ú® –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="promo", description="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"),
        BotCommand(command="unban_request", description="üôè –ü–æ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω")
    ]
    
    admin_commands = user_commands + [
        BotCommand(command="dnd", description="üåô/‚òÄÔ∏è –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"),
        BotCommand(command="pending_tasks", description="üì• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"),
    ]

    super_admin_commands = admin_commands + [
        BotCommand(command="panel", description="üõ†Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏—Ç–∞–º–∏"),
        BotCommand(command="posts", description="üìÆ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"),
        BotCommand(command="roles_manage", description="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"),
        BotCommand(command="internships", description="üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º–∏"),
        BotCommand(command="roles", description="üõ†Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π"),
        BotCommand(command="admin_refs", description="üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏"),
        BotCommand(command="stat_rewards", description="üèÜ –£–ø—Ä. –Ω–∞–≥—Ä–∞–¥–∞–º–∏ —Ç–æ–ø–∞"),
    ]

    tester_commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="skip", description="‚ö°Ô∏è [–¢–ï–°–¢] –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä"),
        BotCommand(command="expire", description="üí• [–¢–ï–°–¢] –ü—Ä–æ–≤–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä"),
        BotCommand(command="getstate", description="‚ÑπÔ∏è [–¢–ï–°–¢] –£–∑–Ω–∞—Ç—å —Å–≤–æ–π FSM state")
    ]

    try:
        await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
        logger.info("Default user commands have been set for all users.")
    except Exception as e:
        logger.error(f"Failed to set default commands: {e}")


    all_admins = await db_manager.get_all_administrators_by_role()

    for admin in all_admins:
        try:
            if admin.role == 'super_admin':
                commands_to_set = super_admin_commands.copy()
                if admin.is_tester:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–µ—Ä–∞
                    current_cmds = {cmd.command for cmd in commands_to_set}
                    for t_cmd in tester_commands:
                        if t_cmd.command not in current_cmds:
                            commands_to_set.append(t_cmd)
                await bot.set_my_commands(commands_to_set, scope=BotCommandScopeChat(chat_id=admin.user_id))
                logger.info(f"Super Admin commands set for admin ID: {admin.user_id}")
            else: # role == 'admin'
                commands_to_set = admin_commands.copy()
                if admin.is_tester:
                    current_cmds = {cmd.command for cmd in commands_to_set}
                    for t_cmd in tester_commands:
                        if t_cmd.command not in current_cmds:
                            commands_to_set.append(t_cmd)
                await bot.set_my_commands(commands_to_set, scope=BotCommandScopeChat(chat_id=admin.user_id))
                logger.info(f"Regular Admin commands set for admin ID: {admin.user_id}")

        except Exception as e:
            logger.error(f"Failed to set commands for admin {admin.user_id}: {e}")
    

async def handle_telegram_bad_request(event: ErrorEvent):
    if isinstance(event.exception, TelegramBadRequest) and ("query is too old" in event.exception.message or "query ID is invalid" in event.exception.message):
        logger.warning(f"Caught a 'query is too old' error. Ignoring. Update: {event.update}")
        return True
    if isinstance(event.exception, TelegramBadRequest) and "message is not modified" in event.exception.message:
        logger.warning("Caught 'message is not modified' error. Ignoring.")
        return True
    if isinstance(event.exception, TelegramBadRequest) and "BUTTON_DATA_INVALID" in event.exception.message:
        logger.error(f"Caught BUTTON_DATA_INVALID error. This might be due to long callback_data. Update: {event.update}")
        if event.update.callback_query:
            await event.update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", show_alert=True)
        return True

    logger.error(f"Unhandled exception in error handler: {event.exception.__class__.__name__}: {event.exception}")
    return False

async def main():
    logger.info("--- –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é main() ---")

    if not BOT_TOKEN:
        logger.critical("!!! BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã. !!!")
        return

    await db_manager.init_db()
    await sync_base_admins()

    storage = RedisStorage.from_url(f"redis://{REDIS_HOST}:{REDIS_PORT}/0")
    scheduler = AsyncIOScheduler(timezone="UTC")

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage, scheduler=scheduler)

    dp.update.outer_middleware(BanMiddleware())
    dp.update.outer_middleware(UsernameUpdaterMiddleware())
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã ---
    dp.include_router(start.router)
    dp.include_router(admin_panel.router)
    dp.include_router(admin_moderation.router)
    dp.include_router(admin_roles.router)
    dp.include_router(posting.router)
    dp.include_router(internship.router)
    dp.include_router(promo.router)
    dp.include_router(ban_system.router)
    dp.include_router(earning.router)
    dp.include_router(referral.router)
    dp.include_router(profile.router)
    dp.include_router(support.router)
    dp.include_router(gmail.router)
    dp.include_router(stats.router)
    dp.include_router(other.router)

    dp.errors.register(handle_telegram_bad_request)

    scheduler.add_job(distribute_rewards, 'interval', minutes=30, args=[bot])
    scheduler.add_job(check_and_expire_links, 'interval', hours=6, args=[bot, dp.storage])
    scheduler.add_job(process_expired_holds, 'interval', minutes=1, args=[bot, dp.storage, scheduler])


    try:
        scheduler.start()
        await bot.delete_webhook(drop_pending_updates=True)
        await set_bot_commands(bot)
        logger.info("--- –ó–ê–ü–£–°–ö –ü–û–õ–õ–ò–ù–ì–ê ---")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await dp.storage.close()
        await bot.session.close()
        scheduler.shutdown()
        logger.info("--- –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù ---")


if __name__ == "__main__":
    if not BOT_TOKEN:
        logger.critical("!!! BOT_TOKEN –Ω–µ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. !!!")
    else:
        try:
            asyncio.run(main())
        except (KeyboardInterrupt, SystemExit):
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")