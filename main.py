# file: main.py

import asyncio
import logging
import time
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.redis import RedisStorage
from config import REDIS_HOST, REDIS_PORT, Durations, TESTER_IDS, ADMIN_IDS
from aiogram.types import BotCommand, BotCommandScopeChat, ErrorEvent, Message, BotCommandScopeDefault
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN, ADMIN_ID_1
from handlers import start, profile, support, earning, admin, gmail, stats, promo, other, ban_system, referral
from database import db_manager
from utils.ban_middleware import BanMiddleware
from utils.username_updater import UsernameUpdaterMiddleware

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    force=True,
)
logger = logging.getLogger(__name__)


async def set_bot_commands(bot: Bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, —Ç–µ—Å—Ç–µ—Ä–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    user_commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="stars", description="‚ú® –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="promo", description="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
    ]
    
    admin_commands = user_commands + [
        BotCommand(command="admin_refs", description="üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏"),
        BotCommand(command="viewhold", description="‚è≥ –•–æ–ª–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="reviewhold", description="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ"),
        BotCommand(command="reset_cooldown", description="‚ùÑÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã"),
        BotCommand(command="fine", description="üí∏ –í—ã–ø–∏—Å–∞—Ç—å —à—Ç—Ä–∞—Ñ"),
        BotCommand(command="ban", description="üö´ –ó–∞–±–∞–Ω–∏—Ç—å"),
        BotCommand(command="unban", description="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å"),
        BotCommand(command="create_promo", description="‚ú® –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"),
        BotCommand(command="reward_top", description="üèÜ –ù–∞–≥—Ä–∞–¥–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    ]

    tester_commands = user_commands + [
        BotCommand(command="skip", description="‚ö°Ô∏è [–¢–ï–°–¢] –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä")
    ]
    
    await bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logger.info("Default user commands have been set for all users.")

    for admin_id in ADMIN_IDS:
        try:
            commands_to_set = admin_commands
            if admin_id in TESTER_IDS:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É skip, –µ—Å–ª–∏ –∞–¥–º–∏–Ω —Ç–∞–∫–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–µ—Ä–æ–º, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                commands_to_set = admin_commands + [cmd for cmd in tester_commands if cmd not in admin_commands]
            
            await bot.set_my_commands(commands_to_set, scope=BotCommandScopeChat(chat_id=admin_id))
            logger.info(f"Admin commands set for admin ID: {admin_id}")
        except Exception as e:
            logger.error(f"Failed to set commands for admin {admin_id}: {e}")
            
    for tester_id in TESTER_IDS:
        if tester_id not in ADMIN_IDS:
            try:
                await bot.set_my_commands(tester_commands, scope=BotCommandScopeChat(chat_id=tester_id))
                logger.info(f"Tester commands set for tester ID: {tester_id}")
            except Exception as e:
                logger.error(f"Failed to set commands for tester {tester_id}: {e}")


async def handle_telegram_bad_request(event: ErrorEvent):
    if isinstance(event.exception, TelegramBadRequest) and ("query is too old" in event.exception.message or "query ID is invalid" in event.exception.message):
        logger.warning(f"Caught a 'query is too old' error. Ignoring. Update: {event.update}")
        return True
    if isinstance(event.exception, TelegramBadRequest) and "message is not modified" in event.exception.message:
        logger.warning("Caught 'message is not modified' error. Ignoring.")
        return True
        
    logger.error(f"Unhandled exception in error handler: {event.exception.__class__.__name__}: {event.exception}")
    return False

async def main():
    logger.warning("--- STARTING BOT: CHECKING IDs ---")
    logger.warning(f"ADMIN_IDS list: {ADMIN_IDS}")
    logger.warning(f"TESTER_IDS list: {TESTER_IDS}")
    logger.warning("----------------------------------")

    if not BOT_TOKEN:
        logger.critical("Bot token is not found! Please check your .env file.")
        return

    await db_manager.init_db()
    
    storage = RedisStorage.from_url(f"redis://{REDIS_HOST}:{REDIS_PORT}/0")
    logger.info("Using RedisStorage for FSM.")
    
    scheduler = AsyncIOScheduler(timezone="UTC")
    
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage, scheduler=scheduler)

    dp.update.outer_middleware(BanMiddleware())
    dp.update.outer_middleware(UsernameUpdaterMiddleware())

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –§–ò–ù–ê–õ–¨–ù–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–û–£–¢–ï–†–û–í ---
    # 1. –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≤—è—Ç –ö–û–ú–ê–ù–î–´.
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ /skip, /start –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –ø–æ–π–º–∞–Ω—ã –¥–æ —Ç–æ–≥–æ,
    # –∫–∞–∫ —Å—Ä–∞–±–æ—Ç–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.
    dp.include_router(start.router)
    dp.include_router(admin.router)
    dp.include_router(promo.router)
    dp.include_router(ban_system.router)
    
    # 2. –†–æ—É—Ç–µ—Ä earning –∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /skip.
    dp.include_router(earning.router)
    
    # 3. –ó–∞—Ç–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (FSM) –∏ –∫–æ–ª–±—ç–∫–∞–º–∏.
    # –ü–æ—Ä—è–¥–æ–∫ –º–µ–∂–¥—É –Ω–∏–º–∏ —É–∂–µ –Ω–µ —Ç–∞–∫ –∫—Ä–∏—Ç–∏—á–µ–Ω.
    dp.include_router(referral.router)
    dp.include_router(profile.router)
    dp.include_router(support.router)
    dp.include_router(gmail.router)
    dp.include_router(stats.router)
    
    # 4. –†–æ—É—Ç–µ—Ä "other" –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –í–°–ï–ì–î–ê –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú.
    dp.include_router(other.router)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    
    dp.errors.register(handle_telegram_bad_request)

    try:
        scheduler.start()
        await bot.delete_webhook(drop_pending_updates=True)
        await set_bot_commands(bot)
        logger.info("Bot is running and ready to process updates...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await dp.storage.close()
        await bot.session.close()
        scheduler.shutdown()
        logger.info("Bot stopped.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user.")