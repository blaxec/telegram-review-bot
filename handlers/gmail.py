# file: handlers/gmail.py

import datetime
import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from database import db_manager
from config import FINAL_CHECK_ADMIN

router = Router()
logger = logging.getLogger(__name__)

# --- –•–≠–ù–î–õ–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø GMAIL ---

@router.callback_query(F.data == 'earning_create_gmail')
async def initiate_gmail_creation(callback: CallbackQuery, state: FSMContext):
    user = await db_manager.get_user(callback.from_user.id)
    if user and user.blocked_until and user.blocked_until > datetime.datetime.utcnow():
        await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", show_alert=True)
        return
    await state.set_state(UserState.GMAIL_ACCOUNT_INIT)
    await callback.message.edit_text(
        "–ó–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–¥–∞–µ—Ç—Å—è 5 –∑–≤–µ–∑–¥.",
        reply_markup=inline.get_gmail_init_keyboard()
    )

@router.callback_query(
    F.data == 'gmail_how_to_create',
    F.state.in_({UserState.GMAIL_ACCOUNT_INIT, UserState.GMAIL_AWAITING_VERIFICATION})
)
async def show_gmail_creation_instructions(callback: CallbackQuery, state: FSMContext):
    text = (
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—Å—ã–ª–∫–µ](https://myaccount.google.com/?tab=kk) –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Gmail, Google, Chrome –∏ –¥—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã.\n\n"
        "**–û–±—â–∏–µ —à–∞–≥–∏:**\n"
        "1. –ù–∞–π–¥–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–µ–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".\n"
        "3. –ï—Å–ª–∏ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, —Ç–∞–∫–∂–µ –Ω–∞–π–¥–∏—Ç–µ –æ–ø—Ü–∏—é \"–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\".\n\n"
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã!"
    )
    
    current_state = await state.get_state()
    reply_markup = None
    if current_state == UserState.GMAIL_ACCOUNT_INIT:
        reply_markup = inline.get_gmail_init_keyboard()
    elif current_state == UserState.GMAIL_AWAITING_VERIFICATION:
        reply_markup = inline.get_gmail_verification_keyboard()

    await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="Markdown", disable_web_page_preview=True)

@router.callback_query(F.data == 'gmail_request_data', UserState.GMAIL_ACCOUNT_INIT)
async def request_gmail_data_from_admin(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    await callback.message.edit_text("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞... –û–∂–∏–¥–∞–π—Ç–µ.")
    await state.set_state(UserState.GMAIL_AWAITING_DATA)
    admin_notification = (
        f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} (ID: `{user_id}`) "
        "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Gmail."
    )
    try:
        await bot.send_message(
            FINAL_CHECK_ADMIN,
            admin_notification,
            reply_markup=inline.get_admin_gmail_data_request_keyboard(user_id)
        )
    except Exception as e:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ Gmail –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")

@router.callback_query(F.data == 'gmail_send_for_verification', UserState.GMAIL_AWAITING_VERIFICATION)
async def send_gmail_for_verification(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    current_state = await state.get_state()
    logger.info(f"Handler 'send_gmail_for_verification' triggered for user {user_id}. Current state: {current_state}")

    await callback.answer()
    await callback.message.edit_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.")
    user_data = await state.get_data()
    gmail_details = user_data.get('gmail_details')
    
    if not gmail_details:
        logger.error(f"Critical error for user {user_id}: gmail_details not found in state data.")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=reply.get_main_menu_keyboard())
        await state.clear()
        await state.set_state(UserState.MAIN_MENU)
        return

    admin_notification = (
        f"üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞ üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: `{user_id}`)\n\n"
        f"**–î–∞–Ω–Ω—ã–µ:**\n"
        f"–ò–º—è: {gmail_details['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {gmail_details['surname']}\n"
        f"–ü–æ—á—Ç–∞: {gmail_details['email']}\n"
        f"–ü–∞—Ä–æ–ª—å: `{gmail_details['password']}`"
    )
    try:
        await bot.send_message(
            FINAL_CHECK_ADMIN,
            admin_notification,
            reply_markup=inline.get_admin_gmail_final_check_keyboard(user_id)
        )
    except Exception as e:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to send Gmail for verification to admin {FINAL_CHECK_ADMIN}: {e}")
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


# --- –•–≠–ù–î–õ–ï–†–´ –ê–î–ú–ò–ù–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø GMAIL ---

@router.callback_query(F.data.startswith('admin_gmail_reject_request:'), F.from_user.id == FINAL_CHECK_ADMIN)
async def admin_reject_gmail_data_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data.split(':')[1])
    original_text = callback.message.text
    
    logger.info(f"Admin {callback.from_user.id} is rejecting Gmail data request for user {user_id}. Setting state to REJECT_REASON_GMAIL_DATA_REQUEST.")
    await state.set_state(AdminState.REJECT_REASON_GMAIL_DATA_REQUEST)
    await state.update_data(target_user_id=user_id)

    await callback.message.edit_text(
        f"{original_text}\n\n‚ùå –ó–ê–ü–†–û–° –û–¢–ö–õ–û–ù–ï–ù (–∞–¥–º–∏–Ω @{callback.from_user.username}).\n\n"
        f"‚úçÔ∏è **–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**",
        reply_markup=None
    )


@router.callback_query(F.data.startswith('admin_gmail_send_data:'), F.from_user.id == FINAL_CHECK_ADMIN)
async def admin_send_gmail_data_request(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data.split(':')[1])
    await state.update_data(gmail_user_id=user_id)
    await state.set_state(AdminState.ENTER_GMAIL_DATA)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)",
        reply_markup=None
    )


@router.message(AdminState.ENTER_GMAIL_DATA, F.from_user.id == FINAL_CHECK_ADMIN)
async def process_admin_gmail_data(message: Message, state: FSMContext, bot: Bot):
    admin_data = await state.get_data()
    user_id = admin_data.get('gmail_user_id')
    data_lines = message.text.strip().split('\n')
    if len(data_lines) != 4:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏: –ò–º—è, –§–∞–º–∏–ª–∏—è, –ü–∞—Ä–æ–ª—å, –ü–æ—á—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    name, surname, password, email = data_lines
    full_email = f"{email}@gmail.com"
    user_message = (
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        '–ù–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç".\n\n'
        "<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>\n"
        f"–ò–º—è: <code>{name}</code>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{surname}</code>\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
        f"–ü–æ—á—Ç–∞: <code>{full_email}</code>"
    )
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    
    logger.info(f"Admin {message.from_user.id} is sending data to user {user_id}. Setting user state to GMAIL_AWAITING_VERIFICATION.")
    await user_state.set_state(UserState.GMAIL_AWAITING_VERIFICATION)
    await user_state.update_data(gmail_details={"name": name, "surname": surname, "password": password, "email": full_email})
    try:
        await bot.send_message(user_id, user_message, parse_mode="HTML", reply_markup=inline.get_gmail_verification_keyboard())
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        print(e)
    await state.clear()


@router.callback_query(F.data.startswith('admin_gmail_confirm_account:'), F.from_user.id == FINAL_CHECK_ADMIN)
async def admin_confirm_gmail_account(callback: CallbackQuery, bot: Bot):
    await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã.", show_alert=True)
    user_id = int(callback.data.split(':')[1])
    await db_manager.update_balance(user_id, 5.0)
    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. +5 –∑–≤–µ–∑–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å.", reply_markup=reply.get_main_menu_keyboard())
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ Gmail: {e}")
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ –ê–ö–ö–ê–£–ù–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù (–∞–¥–º–∏–Ω @{callback.from_user.username})", reply_markup=None)


@router.callback_query(F.data.startswith('admin_gmail_reject_account:'), F.from_user.id == FINAL_CHECK_ADMIN)
async def admin_reject_gmail_account(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data.split(':')[1])
    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminState.REJECT_REASON_GMAIL_ACCOUNT)
    await callback.message.edit_text(
        f"{callback.message.text}\n\n‚ùå –ê–ö–ö–ê–£–ù–¢ –û–¢–ö–õ–û–ù–ï–ù (–∞–¥–º–∏–Ω @{callback.from_user.username}).\n\n"
        f"‚úçÔ∏è **–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.**",
        reply_markup=None
    )