# file: handlers/gmail.py

import datetime
import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from database import db_manager
from config import FINAL_CHECK_ADMIN
from logic.user_notifications import format_timedelta
from logic.promo_logic import check_and_apply_promo_reward

router = Router()
logger = logging.getLogger(__name__)

async def delete_previous_messages(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == 'earning_create_gmail')
async def initiate_gmail_creation(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    user = await db_manager.get_user(callback.from_user.id)
    if not user:
        return

    if user.blocked_until and user.blocked_until > datetime.datetime.utcnow():
        await callback.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ.", show_alert=True)
        return

    cooldown = await db_manager.check_platform_cooldown(user.id, "gmail")
    if cooldown:
        if callback.message:
            await callback.message.edit_text(
                f"–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑: <i>{format_timedelta(cooldown)}</i>\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                reply_markup=inline.get_gmail_cooldown_keyboard()
            )
        return

    await state.set_state(UserState.GMAIL_ENTER_DEVICE_MODEL)
    if callback.message:
        await callback.message.edit_text(
            "–ó–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–¥–∞–µ—Ç—Å—è <i>5 –∑–≤–µ–∑–¥</i>.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <i>–º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</i> (–Ω–∞–ø—Ä–∏–º–µ—Ä, iPhone 13 Pro –∏–ª–∏ Samsung Galaxy S22), "
            "—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –≠—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É–≤–∏–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ–ª—å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_cancel_to_earning_keyboard()
        )
        await state.update_data(prompt_message_id=callback.message.message_id)


@router.callback_query(F.data == 'gmail_another_phone', F.state.in_('*'))
async def request_another_phone(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    await state.set_state(UserState.GMAIL_ENTER_ANOTHER_DEVICE_MODEL)
    if callback.message:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å <i>–≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</i>, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. "
            "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=inline.get_cancel_to_earning_keyboard()
        )
        await state.update_data(prompt_message_id=callback.message.message_id)

async def send_device_model_to_admin(message: Message, state: FSMContext, bot: Bot, is_another: bool):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω—É —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–Ω–æ–ø–æ–∫."""
    device_model = message.text
    user_id = message.from_user.id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
    await message.answer(
        f"–í–∞—à–∞ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{device_model}</i>.\n"
        "–ó–∞–ø–æ–º–Ω–∏—Ç–µ –µ–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –µ–µ —É—Ç–æ—á–Ω–∏—Ç—å.\n\n"
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
    await state.update_data(device_model=device_model)
    await state.set_state(UserState.GMAIL_AWAITING_DATA)

    context = "gmail_device_model"
    admin_notification = (
        f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} (ID: <code>{user_id}</code>) "
        f"–æ—Ç–ø—Ä–∞–≤–∏–ª –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Gmail:\n\n"
        f"<i>–ú–æ–¥–µ–ª—å: {device_model}</i>"
    )
    if is_another:
        admin_notification += "\n\n<i>–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.</i>"

    try:
        await bot.send_message(
            FINAL_CHECK_ADMIN,
            admin_notification,
            reply_markup=inline.get_admin_verification_keyboard(user_id, context)
        )
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")

@router.message(UserState.GMAIL_ENTER_DEVICE_MODEL)
async def process_device_model(message: Message, state: FSMContext, bot: Bot):
    await delete_previous_messages(message, state)
    if not message.text:
        prompt_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    logger.info(f"Caught device model from user {message.from_user.id} in state GMAIL_ENTER_DEVICE_MODEL.")
    await send_device_model_to_admin(message, state, bot, is_another=False)


@router.message(UserState.GMAIL_ENTER_ANOTHER_DEVICE_MODEL)
async def process_another_device_model(message: Message, state: FSMContext, bot: Bot):
    await delete_previous_messages(message, state)
    if not message.text:
        prompt_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    logger.info(f"Caught another device model from user {message.from_user.id} in state GMAIL_ENTER_ANOTHER_DEVICE_MODEL.")
    await send_device_model_to_admin(message, state, bot, is_another=True)


@router.callback_query(F.data == 'gmail_send_for_verification', UserState.GMAIL_AWAITING_VERIFICATION)
async def send_gmail_for_verification(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback.from_user.id
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
    
    if callback.message:
        await callback.message.edit_text("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.")
    user_data = await state.get_data()
    gmail_details = user_data.get('gmail_details')
    device_model = user_data.get('device_model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    if not gmail_details:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è user {user_id}: gmail_details –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ state data.")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=reply.get_main_menu_keyboard())
        await state.clear()
        await state.set_state(UserState.MAIN_MENU)
        return

    admin_notification = (
        f"üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞ üö®\n\n"
        f"<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</i> @{callback.from_user.username} (ID: <code>{user_id}</code>)\n"
        f"<i>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</i> <code>{device_model}</code>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n"
        f"–ò–º—è: {gmail_details['name']}\n"
        f"–§–∞–º–∏–ª–∏—è: {gmail_details['surname']}\n"
        f"–ü–æ—á—Ç–∞: {gmail_details['email']}\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{gmail_details['password']}</code>\n\n"
        f"<i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</i>\n"
        f"1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ.\n"
        f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π.\n"
        f"3. <i>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.</i>"
    )
    try:
        await bot.send_message(
            FINAL_CHECK_ADMIN,
            admin_notification,
            reply_markup=inline.get_admin_gmail_final_check_keyboard(user_id)
        )
    except Exception as e:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Failed to send Gmail for verification to admin {FINAL_CHECK_ADMIN}: {e}")
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


@router.callback_query(F.data == 'gmail_how_to_create', UserState.GMAIL_AWAITING_VERIFICATION)
async def show_gmail_instructions(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.GMAIL_INSTRUCTIONS)
    instructions_text = (
        "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞ Gmail:</b>\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Gmail –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <code>gmail.com</code>.\n"
        "2. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.\n"
        "3. –í–≤–µ–¥–∏—Ç–µ <i>–ò–º—è</i> –∏ <i>–§–∞–º–∏–ª–∏—é</i>, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –≤—ã–¥–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
        "4. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ <i>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i> (–∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã), –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –≤—ã–¥–∞–ª–∏.\n"
        "5. –í–≤–µ–¥–∏—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ <i>–ø–∞—Ä–æ–ª—å</i>, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –≤—ã–¥–∞–ª–∏.\n"
        "6. <i>–í–ê–ñ–ù–û:</i> –ï—Å–ª–∏ Google –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥. –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ª—å–∑—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
        "7. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –†–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'."
    )
    if callback.message:
        await callback.message.edit_text(
            instructions_text,
            reply_markup=inline.get_gmail_back_to_verification_keyboard()
        )


@router.callback_query(F.data == 'gmail_back_to_verification', UserState.GMAIL_INSTRUCTIONS)
async def back_to_gmail_verification(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    gmail_details = user_data.get('gmail_details', {})
    
    name = gmail_details.get('name', 'N/A')
    surname = gmail_details.get('surname', 'N/A')
    password = gmail_details.get('password', 'N/A')
    full_email = gmail_details.get('email', 'N/A')

    user_message = (
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        "<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>\n"
        f"–ò–º—è: <code>{name}</code>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{surname}</code>\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
        f"–ü–æ—á—Ç–∞: <code>{full_email}</code>"
    )

    await state.set_state(UserState.GMAIL_AWAITING_VERIFICATION)
    if callback.message:
        await callback.message.edit_text(
            user_message,
            reply_markup=inline.get_gmail_verification_keyboard()
        )

# --- –•–≠–ù–î–õ–ï–†–´ –ê–î–ú–ò–ù–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø GMAIL ---

@router.callback_query(F.data.startswith('admin_gmail_send_data:'))
async def admin_send_gmail_data_request(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    user_id = int(callback.data.split(':')[1])
    await state.update_data(gmail_user_id=user_id)
    await state.set_state(AdminState.ENTER_GMAIL_DATA)
    if callback.message:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)",
            reply_markup=None
        )


@router.message(AdminState.ENTER_GMAIL_DATA)
async def process_admin_gmail_data(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    admin_data = await state.get_data()
    user_id = admin_data.get('gmail_user_id')
    
    data_lines = message.text.strip().split('\n')
    if len(data_lines) != 4:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏: –ò–º—è, –§–∞–º–∏–ª–∏—è, –ü–∞—Ä–æ–ª—å, –ü–æ—á—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    name, surname, password, email = data_lines
    full_email = f"{email}@gmail.com"
    user_message = (
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
        "<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>\n"
        f"–ò–º—è: <code>{name}</code>\n"
        f"–§–∞–º–∏–ª–∏—è: <code>{surname}</code>\n"
        f"–ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
        f"–ü–æ—á—Ç–∞: <code>{full_email}</code>"
    )
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    
    user_current_data = await user_state.get_data()
    user_current_data['gmail_details'] = {"name": name, "surname": surname, "password": password, "email": full_email}

    logger.info(f"Admin {message.from_user.id} is sending data to user {user_id}. Setting user state to GMAIL_AWAITING_VERIFICATION.")
    
    await user_state.set_state(UserState.GMAIL_AWAITING_VERIFICATION)
    await user_state.set_data(user_current_data)
    
    try:
        await bot.send_message(user_id, user_message, parse_mode="HTML", reply_markup=inline.get_gmail_verification_keyboard())
        await message.answer(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        logger.error(e)
    await state.clear()


@router.callback_query(F.data.startswith('admin_gmail_confirm_account:'))
async def admin_confirm_gmail_account(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–≤–µ–∑–¥—ã.", show_alert=True)
    except TelegramBadRequest:
        pass
        
    user_id = int(callback.data.split(':')[1])
    await db_manager.update_balance(user_id, 5.0)
    await db_manager.set_platform_cooldown(user_id, "gmail", 24)
    
    await check_and_apply_promo_reward(user_id, "gmail_account", bot)
    
    try:
        await bot.send_message(user_id, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. +5 –∑–≤–µ–∑–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å.", reply_markup=reply.get_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ Gmail: {e}")
    if callback.message:
        await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ –ê–ö–ö–ê–£–ù–¢ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù (–∞–¥–º–∏–Ω @{callback.from_user.username})", reply_markup=None)


@router.callback_query(F.data.startswith('admin_gmail_reject_account:'))
async def admin_reject_gmail_account(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    user_id = int(callback.data.split(':')[1])
    await state.update_data(
        target_user_id=user_id,
        rejection_context="gmail_account"
    )
    await state.set_state(AdminState.PROVIDE_REJECTION_REASON)
    if callback.message:
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –ê–ö–ö–ê–£–ù–¢ –û–¢–ö–õ–û–ù–ï–ù (–∞–¥–º–∏–Ω @{callback.from_user.username}).\n\n"
            f"‚úçÔ∏è <i>–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>",
            reply_markup=None
        )