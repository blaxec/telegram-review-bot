# file: handlers/admin_moderation.py

import asyncio
import logging
from math import ceil
from typing import Union
import random

from aiogram import Bot, Dispatcher, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import Durations, Limits, SUPER_ADMIN_ID
from database import db_manager
from keyboards import inline, reply
from logic import (admin_logic, admin_roles, internship_logic)
from logic.ai_helper import generate_review_text
from logic.notification_logic import notify_subscribers
from logic.notification_manager import send_notification_to_admins
from logic.ocr_helper import analyze_screenshot
from references import reference_manager
from states.user_states import AdminState, UserState
from utils.access_filters import IsAdmin, IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)


async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

async def delete_previous_messages(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass


# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–ö–ê–ú–ò (–ù–û–í–´–ô FSM) ---

@router.message(Command("admin_refs"), IsSuperAdmin())
async def admin_refs_menu(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())

@router.callback_query(F.data.startswith("admin_refs:select_platform:"), IsSuperAdmin())
async def admin_select_ref_platform(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    platform = callback.data.split(':')[2]
    await state.update_data(current_platform=platform)

    platform_names = {
        "google_maps": "Google –ö–∞—Ä—Ç—ã",
        "yandex_with_text": "–Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)",
        "yandex_without_text": "–Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    }
    platform_name = platform_names.get(platform, platform)
    
    if callback.message:
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: **{platform_name}**",
            reply_markup=inline.get_admin_platform_refs_keyboard(platform)
        )

# --- –ù–∞—á–∞–ª–æ FSM –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ ---
@router.callback_query(F.data.startswith("admin_refs:add:"), IsSuperAdmin())
async def admin_add_ref_start(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(':')[2]
    link_type_data = callback.data.split(':')[3]
    
    await state.update_data(
        platform_for_links=platform,
        is_fast_track_for_links="fast" in link_type_data,
        requires_photo_for_links="photo" in link_type_data
    )
    
    await state.set_state(AdminState.waiting_for_reward_amount)
    prompt_msg = await callback.message.edit_text(
        "**–®–∞–≥ 1/4:** –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã –≤ –∑–≤–µ–∑–¥–∞—Ö –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ø–æ —ç—Ç–∏–º —Å—Å—ã–ª–∫–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –∏–ª–∏ 25.5).",
        reply_markup=inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{platform}")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()


@router.message(AdminState.waiting_for_reward_amount, IsSuperAdmin())
async def admin_add_link_reward(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    try:
        reward = float(message.text.replace(",", "."))
        if reward < 0: raise ValueError
    except ValueError:
        prompt_msg = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.update_data(reward_amount_for_links=reward)
    await state.set_state(AdminState.waiting_for_gender_requirement)
    prompt_msg = await message.answer(
        "**–®–∞–≥ 2/4:** –£–∫–∞–∂–∏—Ç–µ –≥–µ–Ω–¥–µ—Ä–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫:",
        reply_markup=inline.get_gender_requirement_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data.startswith("gender_"), AdminState.waiting_for_gender_requirement)
async def admin_add_link_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    await state.update_data(gender_requirement_for_links=gender)
    
    await state.set_state(AdminState.waiting_for_campaign_tag)
    prompt_msg = await callback.message.edit_text(
        "**–®–∞–≥ 3/4 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):** –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —ç—Ç–∏—Ö —Å—Å—ã–ª–æ–∫? (–ù–∞–ø—Ä–∏–º–µ—Ä, #–∫–∞—Ñ–µ_—Ä–æ–º–∞—à–∫–∞). –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.",
        reply_markup=inline.get_campaign_tag_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "skip_campaign_tag", AdminState.waiting_for_campaign_tag)
async def admin_skip_campaign_tag(callback: CallbackQuery, state: FSMContext):
    await state.update_data(campaign_tag_for_links=None)
    await state.set_state(AdminState.waiting_for_links)
    prompt_msg = await callback.message.edit_text(
        "**–®–∞–≥ 4/4:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL-—Å—Å—ã–ª–∫–∏. –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
        reply_markup=inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{(await state.get_data())['platform_for_links']}")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()

@router.message(AdminState.waiting_for_campaign_tag, IsSuperAdmin())
async def admin_add_link_campaign(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    await state.update_data(campaign_tag_for_links=message.text.strip())
    
    await state.set_state(AdminState.waiting_for_links)
    prompt_msg = await message.answer(
        "**–®–∞–≥ 4/4:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL-—Å—Å—ã–ª–∫–∏. –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
        reply_markup=inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{(await state.get_data())['platform_for_links']}")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.waiting_for_links, F.text, IsSuperAdmin())
async def admin_add_links_handler(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    await delete_previous_messages(message, state)

    platform = data.get("platform_for_links")
    reward = data.get("reward_amount_for_links")
    gender = data.get("gender_requirement_for_links")
    campaign = data.get("campaign_tag_for_links")
    is_fast = data.get("is_fast_track_for_links")
    requires_photo = data.get("requires_photo_for_links")

    try:
        result_text = await admin_logic.process_add_links_logic(
            links_text=message.text, 
            platform=platform,
            is_fast_track=is_fast,
            requires_photo=requires_photo,
            reward_amount=reward,
            gender_requirement=gender,
            campaign_tag=campaign
        )
        await message.answer(result_text, reply_markup=inline.get_back_to_platform_refs_keyboard(platform))
        
        await notify_subscribers(platform, gender, bot)

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (FSM) –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º.", reply_markup=inline.get_back_to_platform_refs_keyboard(platform))
    finally:
        await state.clear()


@router.callback_query(F.data == "admin_refs:back_to_selection", IsSuperAdmin())
async def admin_back_to_platform_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    if callback.message:
        await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())


@router.callback_query(F.data.startswith("admin_refs:stats:"), IsSuperAdmin())
async def admin_view_refs_stats(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é...", show_alert=False)
    platform = callback.data.split(':')[2]
    await state.clear()
    stats = await db_manager.db_get_link_stats(platform)
    
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ *{platform}*:\n\n"
            f"–í—Å–µ–≥–æ: {stats.get('total', 0)}\n"
            f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats.get('available', 0)}\n"
            f"üü° –í —Ä–∞–±–æ—Ç–µ: {stats.get('assigned', 0)}\n"
            f"üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.get('used', 0)}\n"
            f"‚ö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats.get('expired', 0)}")
            
    if callback.message:
        await callback.message.edit_text(text, reply_markup=inline.get_back_to_platform_refs_keyboard(platform))


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–†–û–°–ú–û–¢–†–ê –°–ü–ò–°–ö–ê –°–°–´–õ–û–ö –° –§–ò–õ–¨–¢–†–ê–ú–ò ---

async def show_links_page(callback: CallbackQuery, state: FSMContext, platform: str, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ state."""
    data = await state.get_data()
    filter_type = data.get("link_list_filter_type", "all")
    gender_filter = data.get("link_list_gender_filter")
    reward_filter = data.get("link_list_reward_filter")
    sort_by_tag = data.get("link_list_sort_by_tag", False)

    total_links, links_on_page = await db_manager.db_get_paginated_references(
        platform, page, Limits.LINKS_PER_PAGE, filter_type, gender_filter, reward_filter, sort_by_tag
    )
    total_pages = ceil(total_links / Limits.LINKS_PER_PAGE) if total_links > 0 else 1
    
    page_text = admin_logic.get_paginated_links_text(links_on_page, page, total_pages, platform, filter_type)
    keyboard = inline.get_link_list_control_keyboard(platform, page, total_pages, filter_type, reward_filter, gender_filter, sort_by_tag)
    
    if callback.message:
        await callback.message.edit_text(page_text, reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data.startswith("admin_refs:list"), IsSuperAdmin())
async def admin_view_refs_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    parts = callback.data.split(':')
    platform = parts[2]
    filter_type = parts[3] if len(parts) > 3 else "all"
    
    await state.set_state(AdminState.LINK_LIST_VIEW)
    # –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    await state.update_data(
        link_list_platform=platform,
        link_list_filter_type=filter_type,
        link_list_gender_filter=None,
        link_list_reward_filter=None,
        link_list_sort_by_tag=False
    )
    await show_links_page(callback, state, platform, 1)

@router.callback_query(F.data.startswith("links_page:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def link_list_paginator(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    _, platform, page_str = callback.data.split(":")
    await show_links_page(callback, state, platform, int(page_str))

@router.callback_query(F.data.startswith("admin_refs:filter_gender:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def filter_by_gender_start(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(":")[-1]
    await callback.message.edit_reply_markup(reply_markup=inline.get_gender_filter_keyboard(platform))
    await callback.answer()

@router.callback_query(F.data.startswith("admin_refs:set_gender:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def set_gender_filter(callback: CallbackQuery, state: FSMContext):
    _, _, gender, platform = callback.data.split(":")
    await state.update_data(link_list_gender_filter=gender)
    await show_links_page(callback, state, platform, 1)

@router.callback_query(F.data.startswith("admin_refs:filter_reward:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def filter_by_reward_start(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(":")[-1]
    await state.set_state(AdminState.waiting_for_reward_filter_amount)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.0):",
        reply_markup=inline.get_reward_filter_keyboard(platform)
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.waiting_for_reward_filter_amount, IsSuperAdmin())
async def set_reward_filter(message: Message, state: FSMContext):
    data = await state.get_data()
    prompt_id = data.get("prompt_message_id")

    try:
        reward = float(message.text.replace(",", "."))
    except ValueError:
        msg = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        await message.delete()
        await asyncio.sleep(3)
        await msg.delete()
        return

    platform = data.get("link_list_platform")
    await state.update_data(link_list_reward_filter=reward)
    await state.set_state(AdminState.LINK_LIST_VIEW)
    
    await message.delete()

    # –ò–º–∏—Ç–∏—Ä—É–µ–º callback, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if prompt_id:
        dummy_callback = CallbackQuery(id="dummy", from_user=message.from_user, chat_instance="", message=Message(message_id=prompt_id, chat=message.chat))
        await show_links_page(dummy_callback, state, platform, 1)


@router.callback_query(F.data.startswith("admin_refs:toggle_sort:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def toggle_tag_sort(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(":")[-1]
    data = await state.get_data()
    current_sort = data.get("link_list_sort_by_tag", False)
    await state.update_data(link_list_sort_by_tag=not current_sort)
    await show_links_page(callback, state, platform, 1)

@router.callback_query(F.data.startswith("admin_refs:reset_filters:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def reset_all_filters(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(":")[-1]
    await state.update_data(link_list_gender_filter=None, link_list_reward_filter=None)
    await show_links_page(callback, state, platform, 1)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (—É–¥–∞–ª–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç) ---

@router.callback_query(F.data.startswith("admin_refs:delete_start:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def admin_delete_ref_start(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(':')[2]
    
    links_count = await db_manager.db_get_links_count(platform)
    if links_count == 0:
        await callback.answer("–ë–∞–∑–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.", show_alert=True)
        return
        
    await callback.answer()
    await state.set_state(AdminState.DELETE_LINK_ID)
    await state.update_data(platform_for_deletion=platform)
    if callback.message:
        cancel_button = inline.get_cancel_inline_keyboard(f"admin_refs:list:{platform}:all")
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
            "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é.", 
            reply_markup=cancel_button
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.DELETE_LINK_ID, IsSuperAdmin())
async def admin_process_delete_ref_id(message: Message, state: FSMContext, bot: Bot):
    await delete_previous_messages(message, state)
    data = await state.get_data()
    platform = data.get("platform_for_deletion")

    if not message.text:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID.")
        asyncio.create_task(schedule_message_deletion(msg, 5))
        return

    link_ids_str = message.text.replace(',', ' ').split()
    deleted_ids, not_found_ids = [], []
    
    for link_id_str in link_ids_str:
        if not link_id_str.strip().isdigit():
            continue
        link_id = int(link_id_str.strip())
        success, assigned_user_id = await reference_manager.delete_reference(link_id)
        
        if success:
            deleted_ids.append(str(link_id))
            if assigned_user_id:
                try:
                    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id))
                    await user_state.clear()
                    await bot.send_message(assigned_user_id, "‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply.get_main_menu_keyboard())
                    await user_state.set_state(UserState.MAIN_MENU)
                except Exception as e: 
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {assigned_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        else:
            not_found_ids.append(str(link_id))

    summary_text = ""
    if deleted_ids:
        summary_text += f"‚úÖ –£–¥–∞–ª–µ–Ω—ã ID: <code>{', '.join(deleted_ids)}</code>\n"
    if not_found_ids:
        summary_text += f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID: <code>{', '.join(not_found_ids)}</code>"
    if not summary_text:
         summary_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    
    temp_message = await message.answer(summary_text)
    await state.clear()
    
    dummy_callback_query = CallbackQuery(
        id=str(message.message_id), from_user=message.from_user, chat_instance="dummy", 
        message=temp_message, 
        data=f"admin_refs:list:{platform}:all"
    )
    await admin_view_refs_list(callback=dummy_callback_query, state=state)

@router.callback_query(F.data.startswith("admin_refs:return_start:"), AdminState.LINK_LIST_VIEW, IsSuperAdmin())
async def admin_return_ref_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ –≤ 'available'."""
    platform = callback.data.split(':')[2]

    links_count = await db_manager.db_get_links_count(platform)
    if links_count == 0:
        await callback.answer("–ë–∞–∑–∞ —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—É—Å—Ç–∞. –ù–µ—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å.", show_alert=True)
        return

    await callback.answer()
    await state.set_state(AdminState.RETURN_LINK_ID)
    await state.update_data(platform_for_return=platform)
    if callback.message:
        cancel_button = inline.get_cancel_inline_keyboard(f"admin_refs:list:{platform}:all")
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID '–∑–∞–≤–∏—Å—à–µ–π' —Å—Å—ã–ª–∫–∏ (–≤ —Å—Ç–∞—Ç—É—Å–µ 'assigned'), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ:", 
            reply_markup=cancel_button
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.RETURN_LINK_ID, IsSuperAdmin())
async def admin_process_return_ref_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    await delete_previous_messages(message, state)
    data = await state.get_data()
    platform = data.get("platform_for_return")

    if not message.text or not message.text.isdigit():
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        asyncio.create_task(schedule_message_deletion(msg, 5))
        return
    
    link_id = int(message.text)
    success, assigned_user_id = await reference_manager.force_release_reference(link_id)
    
    result_text = ""
    if not success:
        result_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É —Å ID {link_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'assigned' –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    else:
        result_text = f"‚úÖ –°—Å—ã–ª–∫–∞ ID {link_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å 'available'."

    if assigned_user_id:
        try:
            user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id))
            await user_state.clear()
            await bot.send_message(assigned_user_id, "‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ—Ä–≤–∞–ª –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª. –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply.get_main_menu_keyboard())
            await user_state.set_state(UserState.MAIN_MENU)
        except Exception as e: 
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {assigned_user_id} –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Å—ã–ª–∫–∏: {e}")

    await state.clear()
    
    temp_message = await message.answer(result_text)
    dummy_callback_query = CallbackQuery(
        id=str(message.message_id), from_user=message.from_user, chat_instance="dummy", 
        message=temp_message,
        data=f"admin_refs:list:{platform}:all",
    )
    await admin_view_refs_list(callback=dummy_callback_query, state=state)

# --- –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ---
@router.callback_query(F.data.startswith("admin_ocr:"), IsAdmin())
async def admin_ocr_check(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    try:
        _, context, user_id_str = callback.data.split(":")
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    if not (callback.message and callback.message.photo):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", show_alert=True)
        return
    file_id = callback.message.photo[-1].file_id
    original_caption = callback.message.caption or ""

    await callback.answer("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò...", show_alert=False)

    try:
        await callback.message.edit_caption(
            caption=f"{original_caption}\n\nü§ñ **–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...**",
            reply_markup=None 
        )
    except TelegramBadRequest:
        pass

    task_map = {
        'yandex_profile_screenshot': 'yandex_profile_check',
        'google_last_reviews': 'google_reviews_check',
        'google_profile': 'google_profile_check'
    }
    task = task_map.get(context)

    if not task:
        try:
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è OCR.")
            await callback.message.edit_reply_markup(reply_markup=inline.get_admin_verification_keyboard(user_id, context))
        except TelegramBadRequest: pass
        return

    ocr_result = await analyze_screenshot(bot, file_id, task)
    
    ai_summary_text = ""
    if ocr_result.get('status') == 'success':
        summary = ocr_result.get('analysis_summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.')
        reasoning = ocr_result.get('reasoning', '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.')
        ai_summary_text = f"ü§ñ **–í–µ—Ä–¥–∏–∫—Ç –ò–ò:**\n- {summary}\n- **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {reasoning}"
    else: 
        reason = ocr_result.get('message') or ocr_result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        ai_summary_text = (f"‚ö†Ô∏è **AI –Ω–µ —É–≤–µ—Ä–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.**\n"
                         f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                         f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")

    new_caption = f"{original_caption}\n\n{ai_summary_text}"
    manual_verification_keyboard = inline.get_admin_verification_keyboard(user_id, context)
    
    try:
        await callback.message.edit_caption(
            caption=new_caption,
            reply_markup=manual_verification_keyboard
        )
    except TelegramBadRequest: pass


@router.callback_query(F.data.startswith('admin_verify:'), IsAdmin())
async def admin_verification_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    
    try:
        _, action, context, user_id_str = callback.data.split(':')
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        logger.error(f"Error parsing callback data: {callback.data}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return
        
    admin_state = state
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    original_text = ""
    if callback.message:
        original_text = callback.message.text or callback.message.caption or ""
    
    action_text = ""
    if action == "confirm":
        action_text = f"‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û** (@{callback.from_user.username})"
        if context == "google_profile":
            await user_state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
            prompt_msg = await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=inline.get_google_last_reviews_check_keyboard())
            await user_state.update_data(prompt_message_id=prompt_msg.message_id)
        elif context == "google_last_reviews":
            await user_state.set_state(UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
            await bot.send_message(user_id, "–û—Ç–∑—ã–≤—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_google_continue_writing_keyboard())
        elif "yandex_profile" in context:
            await user_state.set_state(UserState.YANDEX_REVIEW_READY_TO_TASK)
            await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å Yandex –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_yandex_continue_writing_keyboard())
        elif context == "gmail_device_model":
            responsible_admin = await admin_roles.get_gmail_data_admin()
            if callback.from_user.id != responsible_admin:
                admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
                await callback.message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {admin_name}")
                try:
                    user_info = await bot.get_chat(user_id)
                    await send_notification_to_admins(
                        bot=bot,
                        text=f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: {user_id}) –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Gmail. –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º.",
                        task_type="gmail_issue_data",
                        scheduler=Dispatcher.get_current().get("scheduler")
                    )
                except Exception: pass
            else:
                prompt_msg = await bot.send_message(callback.from_user.id, "‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)")
                await admin_state.set_state(AdminState.ENTER_GMAIL_DATA)
                await admin_state.update_data(gmail_user_id=user_id, prompt_message_id=prompt_msg.message_id)
    
    elif action == "warn":
        action_text = f"‚ö†Ô∏è **–í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø** (@{callback.from_user.username})"
        platform = "gmail" if "gmail" in context else context.split('_')[0]
        prompt_msg = await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id_str}.")
        await admin_state.set_state(AdminState.PROVIDE_WARN_REASON)
        await admin_state.update_data(
            target_user_id=user_id, 
            platform=platform, 
            context=context, 
            prompt_message_id=prompt_msg.message_id,
            original_verification_message_id=callback.message.message_id
        )

    elif action == "reject":
        action_text = f"‚ùå **–û–¢–ö–õ–û–ù–ï–ù** (@{callback.from_user.username})"
        context_map = {"google_profile": "google_profile", "google_last_reviews": "google_last_reviews", "yandex_profile": "yandex_profile", "yandex_profile_screenshot": "yandex_profile", "gmail_device_model": "gmail_device_model"}
        rejection_context = context_map.get(context)
        if rejection_context:
            prompt_msg = await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è {user_id_str}.")
            await admin_state.set_state(AdminState.PROVIDE_REJECTION_REASON)
            await admin_state.update_data(
                target_user_id=user_id, 
                rejection_context=rejection_context, 
                prompt_message_id=prompt_msg.message_id,
                original_verification_message_id=callback.message.message_id
            )
        else:
            await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
    
    if callback.message:
        try:
            if callback.message.photo: await callback.message.edit_caption(caption=f"{original_text}\n\n{action_text}", reply_markup=None)
            else: await callback.message.edit_text(f"{original_text}\n\n{action_text}", reply_markup=None)
        except TelegramBadRequest: pass

# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ö–°–¢–û–ú –û–¢–ó–´–í–ê ---

@router.callback_query(F.data.startswith('admin_provide_text:'), IsAdmin())
async def admin_start_providing_text(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    
    try:
        _, platform, user_id_str, link_id_str, photo_required = callback.data.split(':')
        
        if platform == 'google':
            responsible_admin = await admin_roles.get_google_issue_admin()
        elif platform == 'yandex_with_text':
            responsible_admin = await admin_roles.get_yandex_text_issue_admin()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞.")
            return

        if callback.from_user.id != responsible_admin:
            admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
            await callback.message.answer(f"–≠—Ç—É –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}")
            return

        state_map = {'google': AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, 'yandex_with_text': AdminState.PROVIDE_YANDEX_REVIEW_TEXT}
        if platform not in state_map: await callback.message.answer("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."); return
        
        edit_text = f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è ID: {user_id_str}"
        if photo_required == 'true':
            edit_text += "\n\n‚ùóÔ∏è**–í–ù–ò–ú–ê–ù–ò–ï:** –ö —ç—Ç–æ–º—É –æ—Ç–∑—ã–≤—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ, —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞."

        new_content = f"{(callback.message.caption or callback.message.text)}\n\n{edit_text}"
        
        prompt_msg = None
        if callback.message:
            cancel_kb = inline.get_cancel_inline_keyboard(f"admin_back_to_text_choice:{platform}:{user_id_str}:{link_id_str}:{photo_required}")
            if callback.message.photo: 
                await callback.message.edit_caption(caption=new_content, reply_markup=cancel_kb)
            else: 
                await callback.message.edit_text(new_content, reply_markup=cancel_kb)
        
        await state.set_state(state_map[platform])
        await state.update_data(
            target_user_id=int(user_id_str), 
            target_link_id=int(link_id_str), 
            platform=platform,
            photo_required=(photo_required == 'true'),
            original_message_id=callback.message.message_id
        )
    except Exception as e: logger.warning(f"Error in admin_start_providing_text: {e}")

@router.callback_query(F.data.startswith('admin_ai_generate_start:'), IsAdmin())
async def admin_ai_generate_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest: pass
    
    try:
        _, platform, user_id_str, link_id_str, photo_required = callback.data.split(':')
        
        if platform == 'google': responsible_admin = await admin_roles.get_google_issue_admin()
        elif platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_issue_admin()
        else: return
        
        if callback.from_user.id != responsible_admin:
            admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
            await callback.answer(f"–≠—Ç—É –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
            return

        await state.update_data(
            target_user_id=int(user_id_str), 
            target_link_id=int(link_id_str), 
            platform=platform,
            photo_required=(photo_required == 'true'),
            original_message_id=callback.message.message_id
        )
        
        await callback.message.edit_reply_markup(reply_markup=inline.get_manual_text_scenario_keyboard())

    except Exception as e: 
        logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

@router.callback_query(F.data == "input_scenario_manually", IsAdmin())
async def input_scenario_manually(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    edit_text = "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π/–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:"
    if data.get('photo_required'):
        edit_text += "\n\n‚ùóÔ∏è**–í–ù–ò–ú–ê–ù–ò–ï:** –ö —ç—Ç–æ–º—É –æ—Ç–∑—ã–≤—É —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ, —Å—Ü–µ–Ω–∞—Ä–∏–π."

    await callback.message.edit_text(edit_text, reply_markup=inline.get_cancel_inline_keyboard("cancel_action"))
    await state.set_state(AdminState.AI_AWAITING_SCENARIO)

@router.callback_query(F.data == "use_scenario_template", IsAdmin())
async def use_scenario_template(callback: CallbackQuery, state: FSMContext):
    categories = await db_manager.get_all_scenario_categories()
    if not categories:
        await callback.answer("–ë–∞–Ω–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω—ã —á–µ—Ä–µ–∑ /scenarios.", show_alert=True)
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞:",
        reply_markup=inline.get_scenario_category_selection_keyboard(categories)
    )

@router.callback_query(F.data.startswith("use_scenario_cat:"), IsAdmin())
async def select_scenario_from_template(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":", 1)[1]
    scenarios = await db_manager.get_ai_scenarios_by_category(category)
    if not scenarios:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.", show_alert=True)
        return

    random_scenario = random.choice(scenarios)
    await state.update_data(ai_scenario=random_scenario.text)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n"
        f"*{random_scenario.text}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?",
        reply_markup=inline.get_ai_template_use_keyboard()
    )

@router.callback_query(F.data.startswith("ai_template:"), IsAdmin())
async def handle_template_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    data = await state.get_data()
    scenario = data.get('ai_scenario')
    if not scenario:
        await callback.answer("–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    if action == "confirm_use":
        dummy_message = callback.message
        dummy_message.text = scenario
        await admin_process_ai_scenario(dummy_message, state, callback.bot)
    elif action == "edit_text":
        await state.set_state(AdminState.waiting_for_edited_scenario_text)
        await callback.message.edit_text(
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ:",
            reply_markup=inline.get_cancel_inline_keyboard("cancel_action")
        )

@router.message(AdminState.waiting_for_edited_scenario_text, IsAdmin())
async def process_edited_scenario(message: Message, state: FSMContext, bot: Bot):
    await admin_process_ai_scenario(message, state, bot)


@router.callback_query(F.data.startswith("admin_back_to_text_choice:"))
async def back_to_text_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    _, platform, user_id_str, link_id_str, photo_required = callback.data.split(':')
    link = await db_manager.db_get_link_by_id(int(link_id_str))
    
    if callback.message:
        await callback.message.edit_reply_markup(reply_markup=inline.get_admin_provide_text_keyboard(platform, int(user_id_str), int(link_id_str), link.requires_photo))
    await callback.answer()


@router.message(AdminState.AI_AWAITING_SCENARIO, IsAdmin())
async def admin_process_ai_scenario(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    
    attached_photo_id = None
    if data.get('photo_required'):
        if not message.reply_to_message or not message.reply_to_message.photo:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ - —Å—Ü–µ–Ω–∞—Ä–∏–π.")
            return
        attached_photo_id = message.reply_to_message.photo[-1].file_id
        scenario = message.text
    else:
        scenario = message.text

    if not scenario:
        await message.answer("–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
        
    original_message_id = data.get("original_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass

    status_msg = await message.answer("ü§ñ –ü–æ–ª—É—á–∏–ª —Å—Ü–µ–Ω–∞—Ä–∏–π. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    link_id = data.get('target_link_id')
    link = await db_manager.db_get_link_by_id(link_id)
    company_info = link.url if link else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    
    generated_text = await generate_review_text(
        company_info=company_info,
        scenario=scenario
    )

    await status_msg.delete()

    if "–æ—à–∏–±–∫–∞" in generated_text.lower() or "ai-—Å–µ—Ä–≤–∏—Å" in generated_text.lower() or "ai-–º–æ–¥–µ–ª—å" in generated_text.lower():
        await message.answer(
            f"‚ùå {generated_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.", 
            reply_markup=inline.get_ai_error_keyboard()
        )
        await state.update_data(ai_scenario=scenario, attached_photo_id=attached_photo_id)
        await state.set_state(AdminState.AI_AWAITING_MODERATION) 
        return

    moderation_text = (
        "üìÑ **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:**\n\n"
        f"*{generated_text}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(moderation_text, reply_markup=inline.get_ai_moderation_keyboard())
    
    await state.set_state(AdminState.AI_AWAITING_MODERATION)
    await state.update_data(ai_scenario=scenario, ai_generated_text=generated_text, attached_photo_id=attached_photo_id)


@router.callback_query(F.data.startswith('ai_moderation:'), AdminState.AI_AWAITING_MODERATION, IsAdmin())
async def admin_process_ai_moderation(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    await callback.answer()
    action = callback.data.split(':')[1]
    data = await state.get_data()
    
    if action == 'send':
        review_text = data.get('ai_generated_text')
        
        dp_dummy = Dispatcher(storage=state.storage)
        success, response_text = await admin_logic.send_review_text_to_user_logic(
            bot=bot, dp=dp_dummy, scheduler=scheduler,
            user_id=data['target_user_id'], link_id=data['target_link_id'],
            platform=data['platform'], review_text=review_text,
            attached_photo_id=data.get('attached_photo_id')
        )
        await callback.message.edit_text(f"–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–°—Ç–∞—Ç—É—Å: {response_text}", reply_markup=None)
        await state.clear()

    elif action == 'regenerate':
        scenario = data.get('ai_scenario')
        
        if not scenario:
            await callback.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
            await state.clear()
            return

        link_id = data.get('target_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        company_info = link.url if link else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"

        status_msg = await callback.message.answer("ü§ñ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        generated_text = await generate_review_text(
            company_info=company_info,
            scenario=scenario,
        )
        await status_msg.delete()

        if "–æ—à–∏–±–∫–∞" in generated_text.lower() or "ai-—Å–µ—Ä–≤–∏—Å" in generated_text.lower() or "ai-–º–æ–¥–µ–ª—å" in generated_text.lower():
            await callback.message.edit_text(
                f"‚ùå {generated_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.", 
                reply_markup=inline.get_ai_error_keyboard()
            )
            return

        new_moderation_text = (
            "üìÑ **–ù–æ–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:**\n\n"
            f"*{generated_text}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(new_moderation_text, reply_markup=inline.get_ai_moderation_keyboard())
        await state.update_data(ai_generated_text=generated_text)
    
    elif action == 'manual':
        platform = data['platform']
        state_map = {'google': AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, 'yandex_with_text': AdminState.PROVIDE_YANDEX_REVIEW_TEXT}
        
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –≤—Ä—É—á–Ω—É—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—ã—à–µ.",
            reply_markup=inline.get_cancel_inline_keyboard()
        )
        await state.set_state(state_map[platform])
        await state.update_data(prompt_message_id=prompt_msg.message_id)

# --- –ë–õ–û–ö –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í ---

@router.callback_query(F.data.startswith("admin_final_approve:"), IsAdmin())
async def admin_final_approve(callback: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    review_id = int(callback.data.split(':')[1])
    
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    platform = review.platform
    responsible_admin = SUPER_ADMIN_ID

    if platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
    elif platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
    elif platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()
        
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await admin_logic.approve_review_to_hold_logic(review_id, bot, scheduler)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        await callback.message.edit_caption(caption=f"{(callback.message.caption or '')}\n\n‚úÖ –í **–•–û–õ–î–ï** (@{callback.from_user.username})", reply_markup=None)

@router.callback_query(F.data.startswith('admin_final_reject:'), IsAdmin())
async def admin_final_reject_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    review_id = int(callback.data.split(':')[1])
    
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    platform = review.platform
    responsible_admin = SUPER_ADMIN_ID

    if platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
    elif platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
    elif platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()
        
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    await state.set_state(AdminState.PROVIDE_FINAL_REJECTION_REASON)
    await state.update_data(review_id_to_reject=review_id)
    
    prompt_msg = await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: {review_id}",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã...")

@router.message(AdminState.PROVIDE_FINAL_REJECTION_REASON, IsAdmin())
async def admin_final_reject_process_reason(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    if not message.text:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    await delete_previous_messages(message, state)
    data = await state.get_data()
    review_id = data.get('review_id_to_reject')
    reason = message.text

    success, message_text = await admin_logic.reject_initial_review_logic(review_id, bot, scheduler, reason=reason)
    
    admin_info_msg = await message.answer(message_text)
    asyncio.create_task(schedule_message_deletion(admin_info_msg, Durations.DELETE_ADMIN_REPLY_DELAY))

    try:
        review = await db_manager.get_review_by_id(review_id)
        if review and review.admin_message_id:
            responsible_admin = SUPER_ADMIN_ID
            if review.platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
            elif review.platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
            elif review.platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()

            original_message = await bot.edit_message_caption(
                chat_id=responsible_admin,
                message_id=review.admin_message_id,
                caption=f"{(review.review_text or '')}\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù** (@{message.from_user.username})\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=None
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")

    await state.clear()


@router.callback_query(F.data.startswith('final_verify_approve:'), IsAdmin())
async def final_verify_approve_handler(callback: CallbackQuery, bot: Bot):
    """–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ —Ö–æ–ª–¥–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
    review_id = int(callback.data.split(':')[1])
    admin_username = callback.from_user.username or "Admin"
    
    review = await db_manager.get_review_by_id(review_id)
    if review and review.user and review.user.is_busy_intern:
        success, message_text = await admin_logic.handle_mentor_verdict(
            review_id=review_id, 
            is_approved_by_mentor=True, 
            reason="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–ª–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º –º–µ–Ω—Ç–æ—Ä–∞",
            bot=bot,
            admin_username=admin_username
        )
        await callback.answer(message_text, show_alert=True)
        if success and callback.message:
            new_caption = (callback.message.caption or "") + f"\n\n{message_text}"
            try:
                await bot.edit_message_caption(chat_id=callback.message.chat.id, message_id=callback.message.message_id, caption=new_caption, reply_markup=None)
            except TelegramBadRequest: pass
        return

    responsible_admin = await admin_roles.get_other_hold_admin()
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await admin_logic.approve_final_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        new_caption = (callback.message.caption or "") + f"\n\n‚úÖ **–û–î–û–ë–†–ï–ù –ò –í–´–ü–õ–ê–ß–ï–ù** (@{callback.from_user.username})"
        try:
            if callback.message.media_group_id:
                await bot.edit_message_caption(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    caption=new_caption,
                    reply_markup=None
                )
            else: 
                await callback.message.edit_caption(caption=new_caption, reply_markup=None)
        except TelegramBadRequest:
            pass

@router.callback_query(F.data.startswith('final_verify_reject:'), IsAdmin())
async def final_verify_reject_handler(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ —Ö–æ–ª–¥–∞."""
    review_id = int(callback.data.split(':')[1])
    review = await db_manager.get_review_by_id(review_id)
    
    if review and review.user and review.user.is_busy_intern:
        await state.set_state(AdminState.MENTOR_REJECT_REASON)
        await state.update_data(review_id_for_intern_rejection=review_id)
        prompt_msg = await callback.message.answer(
            f"‚ùóÔ∏è–≠—Ç–æ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–∂–µ—Ä–∞ @{review.user.username}.\n"
            f"‚úçÔ∏è **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.** –≠—Ç–∞ –ø—Ä–∏—á–∏–Ω–∞ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ —Å—Ç–∞–∂–µ—Ä–∞, –∏ –µ–º—É –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω —à—Ç—Ä–∞—Ñ."
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å—Ç–∞–∂–µ—Ä–∞...")
        return

    responsible_admin = await admin_roles.get_other_hold_admin()
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await admin_logic.reject_final_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        new_caption = (callback.message.caption or "") + f"\n\n‚ùå **–û–¢–ö–õ–û–ù–ï–ù** (@{callback.from_user.username})"
        try:
            if callback.message.media_group_id:
                await bot.edit_message_caption(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    caption=new_caption,
                    reply_markup=None
                )
            else:
                await callback.message.edit_caption(caption=new_caption, reply_markup=None)
        except TelegramBadRequest:
            pass
            

# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–ì–†–ê–î–ê–ú–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---

async def show_reward_settings_menu(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥."""
    await state.set_state(AdminState.REWARD_SETTINGS_MENU)
    
    settings = await db_manager.get_reward_settings()
    timer_hours_str = await db_manager.get_system_setting("reward_timer_hours")
    timer_hours = int(timer_hours_str) if timer_hours_str and timer_hours_str.isdigit() else 24
    
    text = "**‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –¥–ª—è —Ç–æ–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
    if not settings:
        text += "–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
    else:
        for setting in settings:
            text += f" ‚Ä¢ {setting.place}-–µ –º–µ—Å—Ç–æ: {setting.reward_amount} ‚≠ê\n"
    
    text += f"\n**–ü–µ—Ä–∏–æ–¥ –≤—ã–¥–∞—á–∏:** —Ä–∞–∑ –≤ {timer_hours} —á–∞—Å–æ–≤."
    
    markup = inline.get_reward_settings_menu_keyboard(timer_hours)

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=markup)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=markup)


@router.message(Command("stat_rewards"), IsSuperAdmin())
async def stat_rewards_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_places", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_places_count(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_PLACES_COUNT)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3). –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Ç–µ–∫—É—â–∏–µ —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥.",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_PLACES_COUNT, F.text, IsSuperAdmin())
async def process_places_count(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text.isdigit() or not (0 < int(message.text) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    
    count = int(message.text)
    new_settings = [{"place": i, "reward_amount": 0.0} for i in range(1, count + 1)]
    await db_manager.update_reward_settings(new_settings)
    
    await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {count}. –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥.")
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_amounts", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_reward_amount(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_AMOUNT_FOR_PLACE)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥. –ö–∞–∂–¥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ú–ï–°–¢–û –°–£–ú–ú–ê</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>1 50.5</code>\n<code>2 30</code>\n<code>3 15.0</code>",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_AMOUNT_FOR_PLACE, F.text, IsSuperAdmin())
async def process_reward_amount(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    
    lines = message.text.strip().split('\n')
    updates = {}
    errors = []

    for i, line in enumerate(lines, 1):
        try:
            place_str, amount_str = line.split()
            place = int(place_str)
            amount = float(amount_str.replace(',', '.'))
            if place <= 0 or amount < 0: raise ValueError
            updates[place] = amount
        except (ValueError, TypeError):
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ú–ï–°–¢–û –°–£–ú–ú–ê`.")

    if errors:
        await message.answer("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n" + "\n".join(errors))
        return

    settings = await db_manager.get_reward_settings()
    settings_dict = {s.place: s for s in settings}
    
    for place, amount in updates.items():
        if place not in settings_dict:
            await message.answer(f"‚ùå –ü—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ ‚Ññ{place} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç.")
            return
        settings_dict[place].reward_amount = amount

    new_settings_list = [{"place": p, "reward_amount": s.reward_amount} for p, s in settings_dict.items()]
    await db_manager.update_reward_settings(new_settings_list)

    await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_timer", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_timer_duration(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_TIMER)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24).",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_TIMER, F.text, IsSuperAdmin())
async def process_timer_duration(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    hours = message.text
    await db_manager.set_system_setting("reward_timer_hours", hours)
    await db_manager.set_system_setting("next_reward_timestamp", "0")
    
    await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.")
    await show_reward_settings_menu(message, state)

# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô –°–¢–ê–ñ–ò–†–û–í–û–ö ---

@router.message(Command("internships"), IsSuperAdmin())
async def internships_main_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º–∏."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    
    stats = await db_manager.get_internship_stats_counts()
    await message.answer(
        "**–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º–∏**",
        reply_markup=await inline.get_admin_internships_main_menu(stats)
    )

@router.callback_query(F.data == "admin_internships:back_to_main", IsSuperAdmin())
async def back_to_internships_main_menu(callback: CallbackQuery, state: FSMContext):
    stats = await db_manager.get_internship_stats_counts()
    await callback.message.edit_text(
        "**–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞–º–∏**",
        reply_markup=await inline.get_admin_internships_main_menu(stats)
    )


@router.callback_query(F.data.startswith("admin_internships:view:"), IsSuperAdmin())
async def view_internship_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–∫–∏ –∞–Ω–∫–µ—Ç, –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–ª–∏ —Å—Ç–∞–∂–µ—Ä–æ–≤."""
    await callback.answer()
    _, _, list_type, page_str = callback.data.split(":")
    page = int(page_str)
    
    if list_type == "applications":
        apps, total = await db_manager.get_paginated_applications("pending", page)
        total_pages = ceil(total / 5) if total > 0 else 1
        text = internship_logic.format_applications_page(apps, page, total_pages)
        keyboard = inline.get_pagination_keyboard("admin_internships:view:applications", page, total_pages, back_callback="admin_internships:back_to_main")
        await callback.message.edit_text(text, reply_markup=keyboard)

    elif list_type == "candidates":
        apps, total = await db_manager.get_paginated_applications("approved", page)
        total_pages = ceil(total / 5) if total > 0 else 1
        text = internship_logic.format_candidates_page(apps, page, total_pages)
        keyboard = inline.get_pagination_keyboard("admin_internships:view:candidates", page, total_pages, back_callback="admin_internships:back_to_main")
        await callback.message.edit_text(text, reply_markup=keyboard)

    elif list_type == "interns":
        interns, total = await db_manager.get_paginated_interns(page)
        total_pages = ceil(total / 5) if total > 0 else 1
        text = internship_logic.format_interns_page(interns, page, total_pages)
        keyboard = inline.get_pagination_keyboard("admin_internships:view:interns", page, total_pages, back_callback="admin_internships:back_to_main")
        await callback.message.edit_text(text, reply_markup=keyboard)

@router.message(F.text.startswith("/view_app_"), IsSuperAdmin())
async def view_single_application(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–π –∞–Ω–∫–µ—Ç–µ."""
    try:
        app_id = int(message.text.split("_")[2])
    except (IndexError, ValueError):
        return

    app = await db_manager.get_application_by_id(app_id)
    if not app:
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
        
    text = internship_logic.format_single_application(app)
    await message.answer(text, reply_markup=inline.get_admin_application_review_keyboard(app))

@router.message(F.text.startswith("/view_intern_"), IsSuperAdmin())
async def view_single_intern(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–º—É —Å—Ç–∞–∂–µ—Ä—É."""
    try:
        intern_id = int(message.text.split("_")[2])
    except (IndexError, ValueError):
        return

    intern = await db_manager.get_user(intern_id)
    if not intern or not intern.is_intern:
        await message.answer("–°—Ç–∞–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    text = internship_logic.format_single_intern(intern)
    await message.answer(text, reply_markup=inline.get_admin_intern_view_keyboard(intern))

@router.message(F.text.startswith("/assign_task_"), IsSuperAdmin())
async def assign_task_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—É."""
    try:
        candidate_id = int(message.text.split("_")[2])
    except (IndexError, ValueError):
        return

    candidate_app = await db_manager.get_internship_application(candidate_id)
    if not candidate_app or candidate_app.status != 'approved':
        await message.answer("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ–≥–æ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return

    await state.set_state(AdminState.INTERNSHIP_CANDIDATE_TASK_GOAL)
    await state.update_data(
        task_candidate_id=candidate_id,
        task_candidate_username=candidate_app.username
    )
    prompt_msg = await message.answer(
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è @{candidate_app.username}.\n"
        f"–ñ–µ–ª–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {candidate_app.platforms}\n\n"
        "**–®–∞–≥ 1/3:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=inline.get_admin_intern_task_setup_keyboard(candidate_id)
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.callback_query(F.data.startswith("admin_internships:action:"), IsSuperAdmin())
async def process_application_action(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã."""
    await callback.answer()
    _, _, action, app_id_str = callback.data.split(":")
    app_id = int(app_id_str)
    
    app = await db_manager.get_application_by_id(app_id)
    if not app or app.status != 'pending':
        await callback.message.edit_text("–≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.", reply_markup=None)
        return

    if action == "approve":
        await db_manager.update_application_status(app_id, "approved")
        await callback.message.edit_text(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ @{app.username} –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=None)
        try:
            await bot.send_message(app.user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {app.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
    
    elif action == "reject":
        await db_manager.update_application_status(app_id, "rejected")
        await callback.message.edit_text(f"‚ùå –ê–Ω–∫–µ—Ç–∞ @{app.username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=None)
        try:
            await bot.send_message(app.user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {app.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---

@router.message(AdminState.PROVIDE_WARN_REASON, IsAdmin())
async def process_warning_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    admin_data = await state.get_data()
    user_id, platform, context = admin_data.get("target_user_id"), admin_data.get("platform"), admin_data.get("context")
    if not all([user_id, platform, context]):
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await admin_logic.process_warning_reason_logic(bot, user_id, platform, message.text, user_state, context)
    await message.answer(response)
    
    original_message_id = admin_data.get("original_verification_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass
    
    await state.clear()

@router.message(AdminState.PROVIDE_REJECTION_REASON, IsAdmin())
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    admin_data = await state.get_data()
    user_id, context = admin_data.get("target_user_id"), admin_data.get("rejection_context")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await admin_logic.process_rejection_reason_logic(bot, user_id, message.text, context, user_state)
    await message.answer(response)

    original_message_id = admin_data.get("original_verification_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass

    await state.clear()

@router.message(AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, IsAdmin())
@router.message(AdminState.PROVIDE_YANDEX_REVIEW_TEXT, IsAdmin())
async def admin_process_review_text(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    data = await state.get_data()
    
    attached_photo_id = None
    if data.get('photo_required'):
        if not message.reply_to_message or not message.reply_to_message.photo:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ - —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
            return
        attached_photo_id = message.reply_to_message.photo[-1].file_id
        review_text = message.text
    else:
        if not message.text:
            await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        review_text = message.text

    original_message_id = data.get("original_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass
            
    dp_dummy = Dispatcher(storage=state.storage)
    success, response_text = await admin_logic.send_review_text_to_user_logic(
        bot=bot, dp=dp_dummy, scheduler=scheduler,
        user_id=data['target_user_id'], link_id=data['target_link_id'],
        platform=data['platform'], review_text=review_text,
        attached_photo_id=attached_photo_id
    )
    await message.answer(response_text)
    if success: await state.clear()

@router.message(AdminState.MENTOR_REJECT_REASON, IsAdmin())
async def process_mentor_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    """–ú–µ–Ω—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–∂–µ—Ä–∞."""
    await delete_previous_messages(message, state)
    if not message.text:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return

    data = await state.get_data()
    review_id = data.get('review_id_for_intern_rejection')
    reason = message.text
    admin_username = message.from_user.username or "Admin"

    if not review_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –æ—Ç–∑—ã–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")
        await state.clear()
        return

    success, message_text = await admin_logic.handle_mentor_verdict(
        review_id=review_id,
        is_approved_by_mentor=False, # –≠—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        reason=reason,
        bot=bot,
        admin_username=admin_username
    )
    
    await message.answer(message_text)
    await state.clear()