# file: handlers/stats.py
import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState
from database import db_manager

router = Router()
logger = logging.getLogger(__name__)

# –ò–ó–ú–ï–ù–ï–ù–û: –°–ª–æ–≤–∞—Ä—å —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ message_id, –Ω–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
active_stats_messages = {}
# {chat_id: {"message_id": int, "last_text": str}}

scheduler_job_id = "live_stats_update"

def format_stats_text(top_users: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    if not top_users:
        return "üìä **–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n–ü–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç."

    stats_text = "üìä **–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É** üèÜ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)\n\n"
    place_emojis = {
        1: "ü•á", 2: "ü•à", 3: "ü•â",
        4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£",
        7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"
    }

    for i, (display_name, balance, review_count) in enumerate(top_users, 1):
        user_display = display_name if display_name else "–°–∫—Ä—ã—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        stats_text += (
            f"{place_emojis.get(i, 'üîπ')} **{user_display}**\n"
            f"   - –ë–∞–ª–∞–Ω—Å: **{balance:.2f}** ‚≠ê\n"
            f"   - –û—Ç–∑—ã–≤–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: **{review_count}**\n\n"
        )
    return stats_text

async def update_stats_messages(bot: Bot):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    if not active_stats_messages:
        return

    logger.info(f"Running stats update for {len(active_stats_messages)} users.")
    
    top_users = await db_manager.get_top_10_users()
    new_text = format_stats_text(top_users)
    
    current_viewers = list(active_stats_messages.items())
    
    for chat_id, data in current_viewers:
        message_id = data["message_id"]
        last_text = data["last_text"]

        # –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if new_text == last_text:
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text
            )
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            active_stats_messages[chat_id]["last_text"] = new_text
        except TelegramBadRequest as e:
            if "message to edit not found" in str(e):
                logger.warning(f"Message {message_id} in chat {chat_id} not found. Removing from live updates.")
                active_stats_messages.pop(chat_id, None)
            else:
                logger.error(f"Failed to edit stats message for chat {chat_id}: {e}")
                # –ù–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
        except Exception as e:
            logger.error(f"Unexpected error updating stats for chat {chat_id}: {e}")
            active_stats_messages.pop(chat_id, None)


@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', UserState.MAIN_MENU)
async def stats_handler(message: Message, bot: Bot, scheduler: AsyncIOScheduler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –∂–∏–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    top_users = await db_manager.get_top_10_users()
    initial_text = format_stats_text(top_users)
    
    sent_message = await message.answer(initial_text)

    # –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ ID, –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    active_stats_messages[message.chat.id] = {
        "message_id": sent_message.message_id,
        "last_text": initial_text
    }
    
    if not scheduler.get_job(scheduler_job_id):
        try:
            scheduler.add_job(
                update_stats_messages,
                'interval',
                minutes=1,
                id=scheduler_job_id,
                args=[bot]
            )
            logger.info("Live stats update job scheduled.")
        except Exception as e:
            logger.error(f"Could not schedule live stats job: {e}")