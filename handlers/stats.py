# file: handlers/stats.py
import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState
from database import db_manager
from keyboards import inline

router = Router()
logger = logging.getLogger(__name__)

async def format_stats_text(top_users: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    reward_settings = await db_manager.get_reward_settings()
    rewards_map = {setting.place: setting.reward_amount for setting in reward_settings if setting.reward_amount > 0}

    if not top_users:
        return "üìä <i>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n–ü–æ–∫–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç."

    stats_text = "üìä <i>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É</i> üèÜ\n\n"
    place_emojis = {
        1: "ü•á", 2: "ü•à", 3: "ü•â",
        4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£", 6: "6Ô∏è‚É£",
        7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü"
    }

    for i, (user_id, display_name, balance, review_count) in enumerate(top_users, 1):
        user_display = display_name if display_name else "–°–∫—Ä—ã—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        reward_info = ""
        if i in rewards_map and rewards_map[i] > 0:
            reward_info = f" (üéÅ –ü—Ä–∏–∑: {rewards_map[i]} ‚≠ê)"
        
        stats_text += (
            f"{place_emojis.get(i, 'üîπ')} <i>{user_display}</i>{reward_info}\n"
            f"   - –ë–∞–ª–∞–Ω—Å: <i>{balance:.2f}</i> ‚≠ê\n"
            f"   - –û—Ç–∑—ã–≤–æ–≤ –æ–¥–æ–±—Ä–µ–Ω–æ: <i>{review_count}</i>\n\n"
        )
    return stats_text

async def show_stats_menu(message_or_callback: Message | CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫."""
    user_id = message_or_callback.from_user.id
    
    try:
        await db_manager.ensure_user_exists(user_id, message_or_callback.from_user.username)
        top_users = await db_manager.get_top_10_users()
        user = await db_manager.get_user(user_id)
        
        if not user:
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer(error_text)
            else:
                await message_or_callback.answer(error_text, show_alert=True)
            return

        is_anonymous = user.is_anonymous_in_stats
        stats_text = await format_stats_text(top_users)
        stats_text += f"\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Ç–æ–ø–µ: <i>{'üôà –ê–Ω–æ–Ω–∏–º–Ω—ã–π' if is_anonymous else 'üêµ –ü—É–±–ª–∏—á–Ω—ã–π'}</i>"
        keyboard = inline.get_stats_keyboard(is_anonymous=is_anonymous)

        if isinstance(message_or_callback, Message):
            try:
                await message_or_callback.delete()
            except TelegramBadRequest:
                pass
            await message_or_callback.answer(stats_text, reply_markup=keyboard)
        else:
            if message_or_callback.message:
                try:
                    await message_or_callback.message.edit_text(stats_text, reply_markup=keyboard)
                except TelegramBadRequest as e:
                    if "message is not modified" not in str(e):
                        logger.warning(f"Error editing stats message: {e}")
                    await message_or_callback.answer()
    
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user {user_id}: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(error_text)
        else:
            await message_or_callback.answer(error_text, show_alert=True)

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ---
@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', UserState.MAIN_MENU)
async def stats_handler_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'."""
    await show_stats_menu(message)


@router.callback_query(F.data == 'profile_toggle_anonymity')
async def toggle_anonymity_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏."""
    await callback.answer()
    new_status = await db_manager.toggle_anonymity(callback.from_user.id)
    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await show_stats_menu(callback)