# file: telegram-review-bot-main/handlers/admin.py


import datetime
import logging
import asyncio
from math import ceil

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    import sys
    import os
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from config import SUPER_ADMIN_ID, ADMIN_IDS, Durations, Limits
from database import db_manager
from references import reference_manager
from logic.admin_logic import (
    process_add_links_logic,
    process_rejection_reason_logic,
    process_warning_reason_logic,
    send_review_text_to_user_logic,
    approve_review_to_hold_logic,
    reject_initial_review_logic,
    get_user_hold_info_logic,
    approve_withdrawal_logic,
    reject_withdrawal_logic,
    apply_fine_to_user,
    approve_final_review_logic,
    reject_final_review_logic,
    format_banned_user_page,
    format_promo_code_page,
    get_paginated_links_text, # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
    get_unban_requests_page, # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
    process_unban_request_logic # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
)
from logic.ai_helper import generate_review_text
from logic.ocr_helper import analyze_screenshot
from logic.cleanup_logic import check_and_expire_links
from logic import admin_roles
from logic.notification_manager import send_notification_to_admins # –ò–ó–ú–ï–ù–ï–ù–ò–ï
from utils.access_filters import IsAdmin, IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)

async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

async def delete_previous_messages(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("addstars"), IsSuperAdmin())
async def admin_add_stars(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    await db_manager.update_balance(message.from_user.id, 999.0, op_type="TOP_REWARD", description="–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /addstars")
    msg = await message.answer(f"‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 999.0 ‚≠ê.")
    asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))

# --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø DND –∏ PENDING_TASKS ---

@router.message(Command("dnd"), IsAdmin())
async def toggle_dnd_mode(message: Message, state: FSMContext):
    try: await message.delete()
    except TelegramBadRequest: pass
    
    new_dnd_status = await db_manager.toggle_dnd_status(message.from_user.id)
    
    if new_dnd_status:
        response_text = "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    else:
        response_text = "‚òÄÔ∏è –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –í—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    
    msg = await message.answer(response_text)
    asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
    await state.clear()

@router.message(Command("pending_tasks"), IsAdmin())
async def show_pending_tasks(message: Message, state: FSMContext):
    try: await message.delete()
    except TelegramBadRequest: pass
    
    tasks_count = await db_manager.get_pending_tasks_count()
    
    text = (
        "üì• <b>–ó–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n\n"
        f"‚û°Ô∏è <b>–û—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:</b> {tasks_count['reviews']} —à—Ç.\n"
        f"‚û°Ô∏è <b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> {tasks_count['tickets']} —à—Ç.\n\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.</i>"
    )
    
    msg = await message.answer(text)
    asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_INFO_MESSAGE_DELAY))
    await state.clear()

# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–ö–ê–ú–ò ---

@router.message(Command("admin_refs"), IsSuperAdmin())
async def admin_refs_menu(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())

@router.callback_query(F.data.startswith("admin_refs:select_platform:"), IsSuperAdmin())
async def admin_select_ref_platform(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    platform = callback.data.split(':')[2]
    await state.update_data(current_platform=platform)

    platform_names = {
        "google_maps": "Google –ö–∞—Ä—Ç—ã",
        "yandex_with_text": "–Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)",
        "yandex_without_text": "–Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    }
    platform_name = platform_names.get(platform, platform)
    
    if callback.message:
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{platform_name}</b>",
            reply_markup=inline.get_admin_platform_refs_keyboard(platform)
        )


@router.callback_query(F.data == "admin_refs:back_to_selection", IsSuperAdmin())
async def admin_back_to_platform_selection(callback: CallbackQuery):
    await callback.answer()
    if callback.message:
        await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())


@router.callback_query(F.data.startswith("admin_refs:add:"), IsSuperAdmin())
async def admin_add_ref_start(callback: CallbackQuery, state: FSMContext):
    try:
        _, _, link_type, photo_req, platform = callback.data.split(':')
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return
        
    is_fast = (link_type == 'fast')
    requires_photo = (photo_req == 'photo')

    type_text = []
    if is_fast: type_text.append("–±—ã—Å—Ç—Ä—ã–µ üöÄ")
    if requires_photo: type_text.append("—Å —Ñ–æ—Ç–æ üì∏")
    if not type_text: type_text.append("–æ–±—ã—á–Ω—ã–µ")
    
    final_type_text = " –∏ ".join(type_text)

    await state.set_state(AdminState.ADD_LINKS)
    await state.update_data(
        platform_for_links=platform,
        is_fast_track_for_links=is_fast,
        requires_photo_for_links=requires_photo
    )
    
    if callback.message:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ callback_data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        cancel_button = inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{platform}")
        prompt_msg = await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: <i>{platform}</i>.\n"
            f"–¢–∏–ø –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫: <b>{final_type_text}</b>.\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            reply_markup=cancel_button
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()

@router.message(AdminState.ADD_LINKS, F.text, IsSuperAdmin())
async def admin_add_links_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ø—É—Ç–æ–º –∏ –ø—Ä–æ–º–ø—Ç
    await delete_previous_messages(message, state)

    platform = data.get("platform_for_links")
    is_fast = data.get("is_fast_track_for_links")
    requires_photo = data.get("requires_photo_for_links")
    
    try:
        result_text = await process_add_links_logic(message.text, platform, is_fast_track=is_fast, requires_photo=requires_photo)
        await message.answer(result_text, reply_markup=inline.get_back_to_platform_refs_keyboard(platform))
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (FSM) –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º.", reply_markup=inline.get_back_to_platform_refs_keyboard(platform))
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("admin_refs:stats:"), IsSuperAdmin())
async def admin_view_refs_stats(callback: CallbackQuery):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é...", show_alert=False)
    platform = callback.data.split(':')[2]
    stats = await db_manager.db_get_link_stats(platform)
    
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ <i>{platform}</i>:\n\n"
            f"–í—Å–µ–≥–æ: {stats.get('total', 0)}\n"
            f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats.get('available', 0)}\n"
            f"üü° –í —Ä–∞–±–æ—Ç–µ: {stats.get('assigned', 0)}\n"
            f"üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.get('used', 0)}\n"
            f"‚ö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {stats.get('expired', 0)}")
            
    if callback.message:
        await callback.message.edit_text(text, reply_markup=inline.get_back_to_platform_refs_keyboard(platform))


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–†–û–°–ú–û–¢–†–ê –°–ü–ò–°–ö–ê –°–°–´–õ–û–ö ---

@router.callback_query(F.data.startswith("admin_refs:list"), IsSuperAdmin())
async def admin_view_refs_list(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    await callback.answer()
    
    parts = callback.data.split(':')
    platform = parts[2]
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "all"
    filter_type = parts[3] if len(parts) > 3 else "all"
    
    await state.update_data(link_list_filter=filter_type)
    
    await show_links_page(callback, state, platform, filter_type, page=1)

async def show_links_page(callback: CallbackQuery, state: FSMContext, platform: str, filter_type: str, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫."""
    total_links, links_on_page = await db_manager.db_get_paginated_references(platform, page, Limits.LINKS_PER_PAGE, filter_type)
    total_pages = ceil(total_links / Limits.LINKS_PER_PAGE) if total_links > 0 else 1
    
    page_text = get_paginated_links_text(links_on_page, page, total_pages, platform, filter_type)
    keyboard = inline.get_link_list_control_keyboard(platform, page, total_pages, filter_type)
    
    if callback.message:
        await callback.message.edit_text(page_text, reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data.startswith("links_page:"), IsSuperAdmin())
async def link_list_paginator(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ —Å–º–µ–Ω—É —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    await callback.answer()
    
    _, platform, page_str = callback.data.split(":")
    page = int(page_str)
    
    data = await state.get_data()
    filter_type = data.get("link_list_filter", "all")
    
    await show_links_page(callback, state, platform, filter_type, page)

@router.callback_query(F.data.startswith("admin_refs:delete_start:"), IsSuperAdmin())
async def admin_delete_ref_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    platform = callback.data.split(':')[2]
    await state.set_state(AdminState.DELETE_LINK_ID)
    await state.update_data(platform_for_deletion=platform)
    if callback.message:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ callback_data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        cancel_button = inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{platform}")
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
            "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é.", 
            reply_markup=cancel_button
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.DELETE_LINK_ID, IsSuperAdmin())
async def admin_process_delete_ref_id(message: Message, state: FSMContext, bot: Bot):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –∏ –ø—Ä–æ–º–ø—Ç
    await delete_previous_messages(message, state)
    data = await state.get_data()
    platform = data.get("platform_for_deletion")

    if not message.text:
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID.")
        asyncio.create_task(schedule_message_deletion(msg, 5))
        return

    link_ids_str = message.text.replace(',', ' ').split()
    deleted_ids, not_found_ids = [], []
    
    for link_id_str in link_ids_str:
        if not link_id_str.strip().isdigit():
            continue
        link_id = int(link_id_str.strip())
        success, assigned_user_id = await reference_manager.delete_reference(link_id)
        
        if success:
            deleted_ids.append(str(link_id))
            if assigned_user_id:
                try:
                    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id))
                    await user_state.clear()
                    await bot.send_message(assigned_user_id, "‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply.get_main_menu_keyboard())
                    await user_state.set_state(UserState.MAIN_MENU)
                except Exception as e: 
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {assigned_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        else:
            not_found_ids.append(str(link_id))

    summary_text = ""
    if deleted_ids:
        summary_text += f"‚úÖ –£–¥–∞–ª–µ–Ω—ã ID: <code>{', '.join(deleted_ids)}</code>\n"
    if not_found_ids:
        summary_text += f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID: <code>{', '.join(not_found_ids)}</code>"
    if not summary_text:
         summary_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –∂–µ "–Ω–∞–∂–∏–º–∞–µ–º" –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
    temp_message = await message.answer(summary_text)
    await state.clear()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    dummy_callback_query = CallbackQuery(
        id=str(message.message_id), from_user=message.from_user, chat_instance="dummy", 
        message=temp_message, 
        data=f"admin_refs:list:{platform}:all"
    )
    await admin_view_refs_list(callback=dummy_callback_query, state=state)

@router.callback_query(F.data.startswith("admin_refs:return_start:"), IsSuperAdmin())
async def admin_return_ref_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ –≤ 'available'."""
    await callback.answer()
    platform = callback.data.split(':')[2]
    await state.set_state(AdminState.RETURN_LINK_ID)
    await state.update_data(platform_for_return=platform)
    if callback.message:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ callback_data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        cancel_button = inline.get_cancel_inline_keyboard(f"admin_refs:select_platform:{platform}")
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID '–∑–∞–≤–∏—Å—à–µ–π' —Å—Å—ã–ª–∫–∏ (–≤ —Å—Ç–∞—Ç—É—Å–µ 'assigned'), –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ:", 
            reply_markup=cancel_button
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.RETURN_LINK_ID, IsSuperAdmin())
async def admin_process_return_ref_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    await delete_previous_messages(message, state)
    data = await state.get_data()
    platform = data.get("platform_for_return")

    if not message.text or not message.text.isdigit():
        msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")
        asyncio.create_task(schedule_message_deletion(msg, 5))
        return
    
    link_id = int(message.text)
    success, assigned_user_id = await reference_manager.force_release_reference(link_id)
    
    result_text = ""
    if not success:
        result_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É —Å ID {link_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'assigned' –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    else:
        result_text = f"‚úÖ –°—Å—ã–ª–∫–∞ ID {link_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å 'available'."

    if assigned_user_id:
        try:
            user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id))
            await user_state.clear()
            await bot.send_message(assigned_user_id, "‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–µ—Ä–≤–∞–ª –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª. –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply.get_main_menu_keyboard())
            await user_state.set_state(UserState.MAIN_MENU)
        except Exception as e: 
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {assigned_user_id} –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Å—ã–ª–∫–∏: {e}")

    await state.clear()
    
    temp_message = await message.answer(result_text)
    dummy_callback_query = CallbackQuery(
        id=str(message.message_id), from_user=message.from_user, chat_instance="dummy", 
        message=temp_message,
        data=f"admin_refs:list:{platform}:all"
    )
    await admin_view_refs_list(callback=dummy_callback_query, state=state)

# --- –ë–õ–û–ö –ü–†–û–í–ï–†–ö–ò –ò –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò ---
@router.callback_query(F.data.startswith("admin_ocr:"), IsAdmin())
async def admin_ocr_check(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è AI-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    try:
        _, context, user_id_str = callback.data.split(":")
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    if not (callback.message and callback.message.photo):
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", show_alert=True)
        return
    file_id = callback.message.photo[-1].file_id
    original_caption = callback.message.caption or ""

    await callback.answer("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò...", show_alert=False)

    try:
        await callback.message.edit_caption(
            caption=f"{original_caption}\n\nü§ñ <b>–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...</b>",
            reply_markup=None 
        )
    except TelegramBadRequest:
        pass

    task_map = {
        'yandex_profile_screenshot': 'yandex_profile_check',
        'google_last_reviews': 'google_reviews_check',
        'google_profile': 'google_profile_check'
    }
    task = task_map.get(context)

    if not task:
        try:
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è OCR.")
            await callback.message.edit_reply_markup(reply_markup=inline.get_admin_verification_keyboard(user_id, context))
        except TelegramBadRequest: pass
        return

    ocr_result = await analyze_screenshot(bot, file_id, task)
    
    ai_summary_text = ""
    if ocr_result.get('status') == 'success':
        summary = ocr_result.get('analysis_summary', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.')
        reasoning = ocr_result.get('reasoning', '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.')
        ai_summary_text = f"ü§ñ <b>–í–µ—Ä–¥–∏–∫—Ç –ò–ò:</b>\n- {summary}\n- <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b> {reasoning}"
    else: 
        reason = ocr_result.get('message') or ocr_result.get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        ai_summary_text = (f"‚ö†Ô∏è <b>AI –Ω–µ —É–≤–µ—Ä–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n"
                         f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                         f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")

    new_caption = f"{original_caption}\n\n{ai_summary_text}"
    manual_verification_keyboard = inline.get_admin_verification_keyboard(user_id, context)
    
    try:
        await callback.message.edit_caption(
            caption=new_caption,
            reply_markup=manual_verification_keyboard
        )
    except TelegramBadRequest: pass


@router.callback_query(F.data.startswith('admin_verify:'), IsAdmin())
async def admin_verification_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    
    try:
        _, action, context, user_id_str = callback.data.split(':')
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        logger.error(f"Error parsing callback data: {callback.data}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
        return
        
    admin_state = state
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    original_text = ""
    if callback.message:
        original_text = callback.message.text or callback.message.caption or ""
    
    action_text = ""
    if action == "confirm":
        action_text = f"‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û</b> (@{callback.from_user.username})"
        if context == "google_profile":
            await user_state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
            prompt_msg = await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=inline.get_google_last_reviews_check_keyboard())
            await user_state.update_data(prompt_message_id=prompt_msg.message_id)
        elif context == "google_last_reviews":
            await user_state.set_state(UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
            await bot.send_message(user_id, "–û—Ç–∑—ã–≤—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_google_continue_writing_keyboard())
        elif "yandex_profile" in context:
            await user_state.set_state(UserState.YANDEX_REVIEW_READY_TO_TASK)
            await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å Yandex –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_yandex_continue_writing_keyboard())
        elif context == "gmail_device_model":
            responsible_admin = await admin_roles.get_gmail_data_admin()
            if callback.from_user.id != responsible_admin:
                admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
                await callback.message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {admin_name}")
                try:
                    user_info = await bot.get_chat(user_id)
                    await send_notification_to_admins(
                        bot,
                        text=f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: {user_id}) –æ–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Gmail. –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º.",
                        task_type="gmail_issue_data"
                    )
                except Exception: pass
            else:
                prompt_msg = await bot.send_message(callback.from_user.id, "‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)")
                await admin_state.set_state(AdminState.ENTER_GMAIL_DATA)
                await admin_state.update_data(gmail_user_id=user_id, prompt_message_id=prompt_msg.message_id)
    
    elif action == "warn":
        action_text = f"‚ö†Ô∏è <b>–í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø</b> (@{callback.from_user.username})"
        platform = "gmail" if "gmail" in context else context.split('_')[0]
        prompt_msg = await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id_str}.")
        await admin_state.set_state(AdminState.PROVIDE_WARN_REASON)
        await admin_state.update_data(
            target_user_id=user_id, 
            platform=platform, 
            context=context, 
            prompt_message_id=prompt_msg.message_id,
            original_verification_message_id=callback.message.message_id
        )

    elif action == "reject":
        action_text = f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù</b> (@{callback.from_user.username})"
        context_map = {"google_profile": "google_profile", "google_last_reviews": "google_last_reviews", "yandex_profile": "yandex_profile", "yandex_profile_screenshot": "yandex_profile", "gmail_device_model": "gmail_device_model"}
        rejection_context = context_map.get(context)
        if rejection_context:
            prompt_msg = await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è {user_id_str}.")
            await admin_state.set_state(AdminState.PROVIDE_REJECTION_REASON)
            await admin_state.update_data(
                target_user_id=user_id, 
                rejection_context=rejection_context, 
                prompt_message_id=prompt_msg.message_id,
                original_verification_message_id=callback.message.message_id
            )
        else:
            await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
    
    if callback.message:
        try:
            if callback.message.photo: await callback.message.edit_caption(caption=f"{original_text}\n\n{action_text}", reply_markup=None)
            else: await callback.message.edit_text(f"{original_text}\n\n{action_text}", reply_markup=None)
        except TelegramBadRequest: pass

# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–ö–°–¢–û–ú –û–¢–ó–´–í–ê ---

@router.callback_query(F.data.startswith('admin_provide_text:'), IsAdmin())
async def admin_start_providing_text(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer()
    
    try:
        _, platform, user_id_str, link_id_str = callback.data.split(':')
        
        if platform == 'google':
            responsible_admin = await admin_roles.get_google_issue_admin()
        elif platform == 'yandex_with_text':
            responsible_admin = await admin_roles.get_yandex_text_issue_admin()
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞.")
            return

        if callback.from_user.id != responsible_admin:
            admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
            await callback.message.answer(f"–≠—Ç—É –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}")
            return

        state_map = {'google': AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, 'yandex_with_text': AdminState.PROVIDE_YANDEX_REVIEW_TEXT}
        if platform not in state_map: await callback.message.answer("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."); return
        
        edit_text = f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è ID: {user_id_str}"
        new_content = f"{(callback.message.caption or callback.message.text)}\n\n{edit_text}"
        
        prompt_msg = None
        if callback.message:
            if callback.message.photo: 
                await callback.message.edit_caption(caption=new_content, reply_markup=None)
            else: 
                prompt_msg = await callback.message.edit_text(new_content, reply_markup=None)

        await state.set_state(state_map[platform])
        await state.update_data(
            target_user_id=int(user_id_str), 
            target_link_id=int(link_id_str), 
            platform=platform,
            prompt_message_id=prompt_msg.message_id if prompt_msg else None
        )
    except Exception as e: logger.warning(f"Error in admin_start_providing_text: {e}")

@router.callback_query(F.data.startswith('admin_ai_generate_start:'), IsAdmin())
async def admin_ai_generate_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await callback.answer("–û–∂–∏–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    except TelegramBadRequest:
        pass
    
    try:
        _, platform, user_id_str, link_id_str = callback.data.split(':')
        
        if platform == 'google':
            responsible_admin = await admin_roles.get_google_issue_admin()
        elif platform == 'yandex_with_text':
            responsible_admin = await admin_roles.get_yandex_text_issue_admin()
        else:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.", show_alert=True)
            return
        
        if callback.from_user.id != responsible_admin:
            admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
            await callback.answer(f"–≠—Ç—É –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
            return

        edit_text = "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π/–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:"
        new_content = f"{(callback.message.caption or callback.message.text)}\n\n{edit_text}"
        
        prompt_msg = None
        if callback.message:
            if callback.message.photo: 
                await callback.message.edit_caption(caption=new_content, reply_markup=None)
            else: 
                prompt_msg = await callback.message.edit_text(new_content, reply_markup=None)

        await state.set_state(AdminState.AI_AWAITING_SCENARIO)
        await state.update_data(
            target_user_id=int(user_id_str), 
            target_link_id=int(link_id_str), 
            platform=platform,
            prompt_message_id=prompt_msg.message_id if prompt_msg else None,
            original_message_id=callback.message.message_id 
        )
    except Exception as e: 
        logger.exception(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        if callback.message:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", show_alert=True)

@router.message(AdminState.AI_AWAITING_SCENARIO, IsAdmin())
async def admin_process_ai_scenario(message: Message, state: FSMContext, bot: Bot):
    if not message.text:
        await message.answer("–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
        
    await delete_previous_messages(message, state)
    data = await state.get_data()
    
    original_message_id = data.get("original_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass

    status_msg = await message.answer("ü§ñ –ü–æ–ª—É—á–∏–ª —Å—Ü–µ–Ω–∞—Ä–∏–π. –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    scenario = message.text
    
    link_id = data.get('target_link_id')
    link = await db_manager.db_get_link_by_id(link_id)
    company_info = link.url if link else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    
    generated_text = await generate_review_text(
        company_info=company_info,
        scenario=scenario
    )

    await status_msg.delete()

    if "–æ—à–∏–±–∫–∞" in generated_text.lower() or "ai-—Å–µ—Ä–≤–∏—Å" in generated_text.lower() or "ai-–º–æ–¥–µ–ª—å" in generated_text.lower():
        await message.answer(
            f"‚ùå {generated_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.", 
            reply_markup=inline.get_ai_error_keyboard()
        )
        await state.update_data(ai_scenario=scenario)
        await state.set_state(AdminState.AI_AWAITING_MODERATION) 
        return

    moderation_text = (
        "üìÑ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n\n"
        f"<i>{generated_text}</i>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(moderation_text, reply_markup=inline.get_ai_moderation_keyboard())
    
    await state.set_state(AdminState.AI_AWAITING_MODERATION)
    await state.update_data(ai_scenario=scenario, ai_generated_text=generated_text)


@router.callback_query(F.data.startswith('ai_moderation:'), AdminState.AI_AWAITING_MODERATION, IsAdmin())
async def admin_process_ai_moderation(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    await callback.answer()
    action = callback.data.split(':')[1]
    data = await state.get_data()
    
    if action == 'send':
        review_text = data.get('ai_generated_text')
        
        dp_dummy = Dispatcher(storage=state.storage)
        success, response_text = await send_review_text_to_user_logic(
            bot=bot, dp=dp_dummy, scheduler=scheduler,
            user_id=data['target_user_id'], link_id=data['target_link_id'],
            platform=data['platform'], review_text=review_text
        )
        await callback.message.edit_text(f"–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–°—Ç–∞—Ç—É—Å: {response_text}", reply_markup=None)
        await state.clear()

    elif action == 'regenerate':
        scenario = data.get('ai_scenario')
        
        if not scenario:
            await callback.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
            await state.clear()
            return

        link_id = data.get('target_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        company_info = link.url if link else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"

        status_msg = await callback.message.answer("ü§ñ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
        generated_text = await generate_review_text(
            company_info=company_info,
            scenario=scenario,
        )
        await status_msg.delete()

        if "–æ—à–∏–±–∫–∞" in generated_text.lower() or "ai-—Å–µ—Ä–≤–∏—Å" in generated_text.lower() or "ai-–º–æ–¥–µ–ª—å" in generated_text.lower():
            await callback.message.edit_text(
                f"‚ùå {generated_text}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.", 
                reply_markup=inline.get_ai_error_keyboard()
            )
            return

        new_moderation_text = (
            "üìÑ <b>–ù–æ–≤—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n\n"
            f"<i>{generated_text}</i>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await callback.message.edit_text(new_moderation_text, reply_markup=inline.get_ai_moderation_keyboard())
        await state.update_data(ai_generated_text=generated_text)
    
    elif action == 'manual':
        platform = data['platform']
        state_map = {'google': AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, 'yandex_with_text': AdminState.PROVIDE_YANDEX_REVIEW_TEXT}
        
        prompt_msg = await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –≤—Ä—É—á–Ω—É—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤—ã—à–µ.",
            reply_markup=inline.get_cancel_inline_keyboard()
        )
        await state.set_state(state_map[platform])
        await state.update_data(prompt_message_id=prompt_msg.message_id)

# --- –ë–õ–û–ö –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í ---

@router.callback_query(F.data.startswith("admin_final_approve:"), IsAdmin())
async def admin_final_approve(callback: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    review_id = int(callback.data.split(':')[1])
    
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    platform = review.platform
    responsible_admin = SUPER_ADMIN_ID

    if platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
    elif platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
    elif platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()
        
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await approve_review_to_hold_logic(review_id, bot, scheduler)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        await callback.message.edit_caption(caption=f"{(callback.message.caption or '')}\n\n‚úÖ –í <b>–•–û–õ–î–ï</b> (@{callback.from_user.username})", reply_markup=None)

@router.callback_query(F.data.startswith('admin_final_reject:'), IsAdmin())
async def admin_final_reject_start(callback: CallbackQuery, state: FSMContext, bot: Bot):
    review_id = int(callback.data.split(':')[1])
    
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    platform = review.platform
    responsible_admin = SUPER_ADMIN_ID

    if platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
    elif platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
    elif platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()
        
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    await state.set_state(AdminState.PROVIDE_FINAL_REJECTION_REASON)
    await state.update_data(review_id_to_reject=review_id)
    
    prompt_msg = await callback.message.answer(
        f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ ID: {review_id}",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã...")

@router.message(AdminState.PROVIDE_FINAL_REJECTION_REASON, IsAdmin())
async def admin_final_reject_process_reason(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    if not message.text:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
        return

    await delete_previous_messages(message, state)
    data = await state.get_data()
    review_id = data.get('review_id_to_reject')
    reason = message.text

    success, message_text = await reject_initial_review_logic(review_id, bot, scheduler, reason=reason)
    
    admin_info_msg = await message.answer(message_text)
    asyncio.create_task(schedule_message_deletion(admin_info_msg, Durations.DELETE_ADMIN_REPLY_DELAY))

    try:
        review = await db_manager.get_review_by_id(review_id)
        if review and review.admin_message_id:
            responsible_admin = SUPER_ADMIN_ID
            if review.platform == 'google': responsible_admin = await admin_roles.get_google_final_admin()
            elif review.platform == 'yandex_with_text': responsible_admin = await admin_roles.get_yandex_text_final_admin()
            elif review.platform == 'yandex_without_text': responsible_admin = await admin_roles.get_yandex_no_text_final_admin()

            original_message = await bot.edit_message_caption(
                chat_id=responsible_admin,
                message_id=review.admin_message_id,
                caption=f"{(review.review_text or '')}\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù</b> (@{message.from_user.username})\n–ü—Ä–∏—á–∏–Ω–∞: {reason}",
                reply_markup=None
            )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")

    await state.clear()


@router.callback_query(F.data.startswith('final_verify_approve:'), IsAdmin())
async def final_verify_approve_handler(callback: CallbackQuery, bot: Bot):
    """–ê–¥–º–∏–Ω –æ–¥–æ–±—Ä—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ —Ö–æ–ª–¥–∞ –∏ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É."""
    review_id = int(callback.data.split(':')[1])
    
    responsible_admin = await admin_roles.get_other_hold_admin()
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await approve_final_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        new_caption = (callback.message.caption or "") + f"\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù –ò –í–´–ü–õ–ê–ß–ï–ù</b> (@{callback.from_user.username})"
        try:
            if callback.message.media_group_id:
                await bot.edit_message_caption(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    caption=new_caption,
                    reply_markup=None
                )
            else: 
                await callback.message.edit_caption(caption=new_caption, reply_markup=None)
        except TelegramBadRequest:
            pass

@router.callback_query(F.data.startswith('final_verify_reject:'), IsAdmin())
async def final_verify_reject_handler(callback: CallbackQuery, bot: Bot):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ —Ö–æ–ª–¥–∞."""
    review_id = int(callback.data.split(':')[1])
    
    responsible_admin = await admin_roles.get_other_hold_admin()
    if callback.from_user.id != responsible_admin:
        admin_name = await admin_roles.get_admin_username(bot, responsible_admin)
        await callback.answer(f"–≠—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç {admin_name}", show_alert=True)
        return

    success, message_text = await reject_final_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        new_caption = (callback.message.caption or "") + f"\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù</b> (@{callback.from_user.username})"
        try:
            if callback.message.media_group_id:
                await bot.edit_message_caption(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    caption=new_caption,
                    reply_markup=None
                )
            else:
                await callback.message.edit_caption(caption=new_caption, reply_markup=None)
        except TelegramBadRequest:
            pass
            
# --- –ë–õ–û–ö –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ---

@router.callback_query(F.data.startswith("admin_withdraw_approve:"), IsAdmin())
async def admin_approve_withdrawal(callback: CallbackQuery, bot: Bot):
    request_id = int(callback.data.split(":")[1])
    success, message_text, _ = await approve_withdrawal_logic(request_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        try:
            new_text = (callback.message.text or "") + f"\n\n<i>[ ‚úÖ <b>–í–´–ü–õ–ê–ß–ï–ù–û</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username} ]</i>"
            await callback.message.edit_text(new_text, reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit withdrawal message in channel: {e}")

@router.callback_query(F.data.startswith("admin_withdraw_reject:"), IsAdmin())
async def admin_reject_withdrawal(callback: CallbackQuery, bot: Bot):
    request_id = int(callback.data.split(":")[1])
    success, message_text, _ = await reject_withdrawal_logic(request_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success and callback.message:
        try:
            new_text = (callback.message.text or "") + f"\n\n<i>[ ‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username} ]</i>"
            await callback.message.edit_text(new_text, reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit withdrawal message in channel: {e}")

# --- –ü–†–û–ß–ò–ï –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ---

@router.message(Command("reset_cooldown"), IsAdmin())
async def reset_cooldown_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/reset_cooldown ID_–∏–ª–∏_@username</code>"); return
    user_id = await db_manager.find_user_by_identifier(args[1])
    if not user_id:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{args[1]}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    if await db_manager.reset_user_cooldowns(user_id):
        user = await db_manager.get_user(user_id)
        username = f"@{user.username}" if user.username else f"ID: {user_id}"
        await message.answer(f"‚úÖ –ö—É–ª–¥–∞—É–Ω—ã –¥–ª—è <i>{username}</i> —Å–±—Ä–æ—à–µ–Ω—ã.")
    else: await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è <code>{args[1]}</code>.")

@router.message(Command("viewhold"), IsAdmin())
async def viewhold_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /viewhold ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username")
        return
    identifier = args[1]
    response_text = await get_user_hold_info_logic(identifier)
    await message.answer(response_text)

@router.message(Command("fine"), IsAdmin())
async def fine_user_start(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    prompt_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.FINE_USER_ID)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(Command("create_promo"), IsSuperAdmin())
async def create_promo_start(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.clear()
    prompt_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>NEWYEAR2025</code>). –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.",
                         reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.PROMO_CODE_NAME)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(Command("ban"), IsSuperAdmin())
async def ban_user_start(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await state.clear()
    
    args = message.text.split()
    if len(args) < 2:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/ban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username</code>")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
    
    identifier = args[1]
    user_id_to_ban = await db_manager.find_user_by_identifier(identifier)

    if not user_id_to_ban:
        msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
        
    user_to_ban = await db_manager.get_user(user_id_to_ban)
    if user_to_ban.is_banned:
        msg = await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_ban.username} (<code>{user_id_to_ban}</code>) —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return

    await state.set_state(AdminState.BAN_REASON)
    await state.update_data(user_id_to_ban=user_id_to_ban)
    
    prompt_msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_to_ban.username} (<code>{user_id_to_ban}</code>).", reply_markup=inline.get_cancel_inline_keyboard())
    await state.update_data(prompt_message_id=prompt_msg.message_id)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –°–ü–ò–°–ö–ò –ó–ê–ë–ê–ù–ï–ù–ù–´–• –ò –ü–†–û–ú–û–ö–û–î–û–í (—Ç–æ–ª—å–∫–æ –¥–ª—è –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∞) ---

@router.message(Command("banlist"), IsSuperAdmin())
async def show_ban_list(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(AdminState.BAN_LIST_VIEW)
    await show_banned_users_page(message, state, 1)

async def show_banned_users_page(message_or_callback: Message | CallbackQuery, state: FSMContext, page: int):
    users = await db_manager.get_banned_users(page=page)
    total_users_count = await db_manager.get_banned_users_count()
    users_per_page = 6
    total_pages = ceil(total_users_count / users_per_page) if total_users_count > 0 else 1

    text = await format_banned_user_page(users, page, total_pages)
    
    keyboard = inline.get_pagination_keyboard("banlist", page, total_pages)
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("banlist:page:"), AdminState.BAN_LIST_VIEW, IsSuperAdmin())
async def banlist_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_banned_users_page(callback, state, page)


@router.message(Command("promolist"), IsSuperAdmin())
async def show_promo_list(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(AdminState.PROMO_LIST_VIEW)
    await show_promo_codes_page(message, state, 1)

async def show_promo_codes_page(message_or_callback: Message | CallbackQuery, state: FSMContext, page: int):
    promos = await db_manager.get_all_promo_codes(page=page)
    total_promos_count = await db_manager.get_promo_codes_count()
    promos_per_page = 6
    total_pages = ceil(total_promos_count / promos_per_page) if total_promos_count > 0 else 1

    text = await format_promo_code_page(promos, page, total_pages)
    
    keyboard = inline.get_promo_list_keyboard(page, total_pages)
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("promolist:page:"), AdminState.PROMO_LIST_VIEW, IsSuperAdmin())
async def promolist_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_promo_codes_page(callback, state, page)

@router.callback_query(F.data == "promolist:delete_start", AdminState.PROMO_LIST_VIEW, IsSuperAdmin())
async def promo_delete_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.PROMO_DELETE_CONFIRM)
    prompt_msg = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.PROMO_DELETE_CONFIRM, IsSuperAdmin())
async def process_delete_promo_id(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    
    identifier = message.text.strip()
    promo_to_delete = None
    
    if identifier.isdigit():
        promo_id = int(identifier)
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ ID, –∞ –Ω–µ –ø–æ –∫–æ–¥—É
        promo_to_delete = await db_manager.get_promo_by_id(promo_id) 
    else:
        promo_to_delete = await db_manager.get_promo_by_code(identifier)

    if not promo_to_delete:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(AdminState.PROMO_LIST_VIEW)
        await show_promo_codes_page(message, state, 1)
        return

    success = await db_manager.delete_promo_code(promo_to_delete.id)
    if success:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{promo_to_delete.code}` –∏ –≤—Å–µ –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ `{promo_to_delete.code}`.")
        
    await state.set_state(AdminState.PROMO_LIST_VIEW)
    await show_promo_codes_page(message, state, 1)

# --- –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ú–ù–ò–°–¢–ò–Ø–ú–ò ---

@router.message(Command("amnesty"), IsSuperAdmin())
async def show_amnesty_list(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(AdminState.AMNESTY_LIST_VIEW)
    await show_amnesty_page(message, state, 1)

async def show_amnesty_page(message_or_callback: Message | CallbackQuery, state: FSMContext, page: int):
    requests = await db_manager.get_pending_unban_requests(page=page)
    total_requests_count = await db_manager.get_pending_unban_requests_count()
    requests_per_page = 5 # –ú–µ–Ω—å—à–µ, —Ç.–∫. —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–µ
    total_pages = ceil(total_requests_count / requests_per_page) if total_requests_count > 0 else 1

    text = await get_unban_requests_page(requests, page, total_pages)
    
    keyboard = inline.get_amnesty_keyboard(requests, page, total_pages)
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=keyboard)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("amnesty:page:"), AdminState.AMNESTY_LIST_VIEW, IsSuperAdmin())
async def amnesty_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_amnesty_page(callback, state, page)

@router.callback_query(F.data.startswith("amnesty:action:"), AdminState.AMNESTY_LIST_VIEW, IsSuperAdmin())
async def amnesty_action_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    _, action, request_id_str = callback.data.split(":")
    request_id = int(request_id_str)
    admin_id = callback.from_user.id

    success, message_text = await process_unban_request_logic(bot, request_id, action, admin_id)
    
    await callback.answer(message_text, show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await show_amnesty_page(callback, state, 1)


# --- –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ì–†–ê–î–ê–ú–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---

async def show_reward_settings_menu(message_or_callback: Message | CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–≥—Ä–∞–¥."""
    await state.set_state(AdminState.REWARD_SETTINGS_MENU)
    
    settings = await db_manager.get_reward_settings()
    timer_hours_str = await db_manager.get_system_setting("reward_timer_hours")
    timer_hours = int(timer_hours_str) if timer_hours_str and timer_hours_str.isdigit() else 24
    
    text = "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –¥–ª—è —Ç–æ–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
    if not settings:
        text += "–ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
    else:
        for setting in settings:
            text += f" ‚Ä¢ {setting.place}-–µ –º–µ—Å—Ç–æ: {setting.reward_amount} ‚≠ê\n"
    
    text += f"\n<b>–ü–µ—Ä–∏–æ–¥ –≤—ã–¥–∞—á–∏:</b> —Ä–∞–∑ –≤ {timer_hours} —á–∞—Å–æ–≤."
    
    markup = inline.get_reward_settings_menu_keyboard(timer_hours)

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=markup)
    else:
        await message_or_callback.message.edit_text(text, reply_markup=markup)


@router.message(Command("stat_rewards"), IsSuperAdmin())
async def stat_rewards_handler(message: Message, state: FSMContext):
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_places", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_places_count(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_PLACES_COUNT)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3). –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–±—Ä–æ—Å–∏—Ç —Ç–µ–∫—É—â–∏–µ —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥.",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_PLACES_COUNT, F.text, IsSuperAdmin())
async def process_places_count(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text.isdigit() or not (0 < int(message.text) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    
    count = int(message.text)
    new_settings = [{"place": i, "reward_amount": 0.0} for i in range(1, count + 1)]
    await db_manager.update_reward_settings(new_settings)
    
    await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {count}. –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥.")
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_amounts", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_reward_amount(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_AMOUNT_FOR_PLACE)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥. –ö–∞–∂–¥–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–ú–ï–°–¢–û –°–£–ú–ú–ê</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>1 50.5</code>\n<code>2 30</code>\n<code>3 15.0</code>",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_AMOUNT_FOR_PLACE, F.text, IsSuperAdmin())
async def process_reward_amount(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    
    lines = message.text.strip().split('\n')
    updates = {}
    errors = []

    for i, line in enumerate(lines, 1):
        try:
            place_str, amount_str = line.split()
            place = int(place_str)
            amount = float(amount_str.replace(',', '.'))
            if place <= 0 or amount < 0: raise ValueError
            updates[place] = amount
        except (ValueError, TypeError):
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ú–ï–°–¢–û –°–£–ú–ú–ê`.")

    if errors:
        await message.answer("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n\n" + "\n".join(errors))
        return

    settings = await db_manager.get_reward_settings()
    settings_dict = {s.place: s for s in settings}
    
    for place, amount in updates.items():
        if place not in settings_dict:
            await message.answer(f"‚ùå –ü—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ ‚Ññ{place} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç.")
            return
        settings_dict[place].reward_amount = amount

    new_settings_list = [{"place": p, "reward_amount": s.reward_amount} for p, s in settings_dict.items()]
    await db_manager.update_reward_settings(new_settings_list)

    await message.answer(f"‚úÖ –ù–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await show_reward_settings_menu(message, state)


@router.callback_query(F.data == "reward_setting:set_timer", AdminState.REWARD_SETTINGS_MENU, IsSuperAdmin())
async def ask_timer_duration(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.REWARD_SET_TIMER)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24).",
        reply_markup=inline.get_cancel_inline_keyboard("go_main_menu")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.REWARD_SET_TIMER, F.text, IsSuperAdmin())
async def process_timer_duration(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    hours = message.text
    await db_manager.set_system_setting("reward_timer_hours", hours)
    await db_manager.set_system_setting("next_reward_timestamp", "0")
    
    await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.")
    await show_reward_settings_menu(message, state)
    

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---

@router.message(AdminState.PROVIDE_WARN_REASON, IsAdmin())
async def process_warning_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    admin_data = await state.get_data()
    user_id, platform, context = admin_data.get("target_user_id"), admin_data.get("platform"), admin_data.get("context")
    if not all([user_id, platform, context]):
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await process_warning_reason_logic(bot, user_id, platform, message.text, user_state, context)
    await message.answer(response)
    
    original_message_id = admin_data.get("original_verification_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass
    
    await state.clear()

@router.message(AdminState.PROVIDE_REJECTION_REASON, IsAdmin())
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    admin_data = await state.get_data()
    user_id, context = admin_data.get("target_user_id"), admin_data.get("rejection_context")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await process_rejection_reason_logic(bot, user_id, message.text, context, user_state)
    await message.answer(response)

    original_message_id = admin_data.get("original_verification_message_id")
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass

    await state.clear()

@router.message(AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, IsAdmin())
@router.message(AdminState.PROVIDE_YANDEX_REVIEW_TEXT, IsAdmin())
async def admin_process_review_text(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    if not message.text: return
    await delete_previous_messages(message, state)
    data = await state.get_data()
    dp_dummy = Dispatcher(storage=state.storage)
    success, response_text = await send_review_text_to_user_logic(
        bot=bot, dp=dp_dummy, scheduler=scheduler,
        user_id=data['target_user_id'], link_id=data['target_link_id'],
        platform=data['platform'], review_text=message.text
    )
    await message.answer(response_text)
    if success: await state.clear()

@router.message(AdminState.FINE_USER_ID, IsAdmin())
async def fine_user_get_id(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    user_id = await db_manager.find_user_by_identifier(message.text)
    if not user_id:
        prompt_msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{message.text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(target_user_id=user_id)
    prompt_msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).", reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.FINE_AMOUNT)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.FINE_AMOUNT, IsAdmin())
async def fine_user_get_amount(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except (ValueError, TypeError):
        prompt_msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(fine_amount=amount)
    prompt_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.FINE_REASON)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.FINE_REASON, IsAdmin())
async def fine_user_get_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    data = await state.get_data()
    result_text = await apply_fine_to_user(data.get("target_user_id"), message.from_user.id, data.get("fine_amount"), message.text, bot)
    await message.answer(result_text)
    await state.clear()

@router.message(AdminState.PROMO_CODE_NAME, IsSuperAdmin())
async def promo_name_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    promo_name = message.text.strip().upper()
    existing_promo = await db_manager.get_promo_by_code(promo_name)
    if existing_promo:
        prompt_msg = await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_name=promo_name)
    prompt_msg = await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.", reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.PROMO_USES)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.PROMO_USES, IsSuperAdmin())
async def promo_uses_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    if not message.text.isdigit():
        prompt_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    uses = int(message.text)
    if uses <= 0:
        prompt_msg = await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_uses=uses)
    prompt_msg = await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>25</code>).", reply_markup=inline.get_cancel_inline_keyboard())
    await state.set_state(AdminState.PROMO_REWARD)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.PROMO_REWARD, IsSuperAdmin())
async def promo_reward_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    try:
        reward = float(message.text.replace(',', '.'))
        if reward <= 0: raise ValueError
    except (ValueError, TypeError):
        prompt_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>10.5</code>).", reply_markup=inline.get_cancel_inline_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_reward=reward)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.", reply_markup=inline.get_promo_condition_keyboard())
    await state.set_state(AdminState.PROMO_CONDITION)

@router.callback_query(F.data.startswith("promo_cond:"), AdminState.PROMO_CONDITION, IsSuperAdmin())
async def promo_condition_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    condition = callback.data.split(":")[1]
    data = await state.get_data()
    new_promo = await db_manager.create_promo_code(
        code=data['promo_name'], total_uses=data['promo_uses'],
        reward=data['promo_reward'], condition=condition
    )
    if new_promo and callback.message:
        await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{new_promo.code}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    elif callback.message:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
    await state.clear()

@router.message(AdminState.BAN_REASON, IsSuperAdmin())
async def ban_user_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–º.")
        return
        
    await delete_previous_messages(message, state)
    data = await state.get_data()
    user_id_to_ban = data.get("user_id_to_ban")
    ban_reason = message.text

    success = await db_manager.ban_user(user_id_to_ban, ban_reason)
    if not success:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
       