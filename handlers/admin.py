# file: handlers/admin.py

from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from config import ADMIN_ID_1, ADMIN_IDS, FINAL_CHECK_ADMIN
from database import db_manager
from references import reference_manager
from handlers.earning import send_confirmation_button, handle_task_timeout, notify_cooldown_expired
import datetime

router = Router()
logger = logging.getLogger(__name__)

ADMINS = set(ADMIN_IDS)
TEXT_ADMIN = ADMIN_ID_1

router.message.filter(F.from_user.id.in_(ADMINS))
router.callback_query.filter(F.from_user.id.in_(ADMINS))


@router.message(Command("addstars"))
async def admin_add_stars(message: Message):
    admin_id = message.from_user.id
    await db_manager.update_balance(admin_id, 999.0)
    await message.answer("‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 999 ‚≠ê.")


# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–ö–ê–ú–ò (–¢–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID_1) ---
@router.message(Command("admin_refs"), F.from_user.id == ADMIN_ID_1)
async def admin_refs_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())


@router.callback_query(F.data == "back_to_refs_menu", F.from_user.id == ADMIN_ID_1)
async def back_to_refs_menu(callback: CallbackQuery):
    try:
        await callback.message.edit_text("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())
    except TelegramBadRequest as e:
        logger.warning(f"Error editing message on back_to_refs_menu: {e}")


@router.callback_query(F.data.startswith("admin_refs:add:"), F.from_user.id == ADMIN_ID_1)
async def admin_add_ref_start(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
    platform = callback.data.split(':')[2]

    current_state = None
    if platform == "google_maps":
        current_state = AdminState.ADD_GOOGLE_REFERENCE
    elif platform == "yandex_maps":
        current_state = AdminState.ADD_YANDEX_REFERENCE

    if current_state:
        await state.set_state(current_state)
        await state.update_data(platform=platform)
        await callback.message.edit_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è **{platform}**, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.",
            reply_markup=inline.get_back_to_admin_refs_keyboard()
        )


@router.message(AdminState.ADD_GOOGLE_REFERENCE, F.from_user.id == ADMIN_ID_1)
@router.message(AdminState.ADD_YANDEX_REFERENCE, F.from_user.id == ADMIN_ID_1)
async def admin_add_ref_process(message: Message, state: FSMContext):
    links = message.text.split('\n')
    added_count = 0
    skipped_count = 0
    data = await state.get_data()
    platform = data.get("platform")

    for link in links:
        link = link.strip()
        if not link or not link.startswith("http"):
            continue
        
        success = await reference_manager.add_reference(link, platform)
        if success:
            added_count += 1
        else:
            skipped_count += 1

    await message.answer(
        f"–ì–æ—Ç–æ–≤–æ!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n"
        f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–æ—à–∏–±–∫–∏): {skipped_count}"
    )
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())
    await state.clear()


@router.callback_query(F.data.startswith("admin_refs:stats:"), F.from_user.id == ADMIN_ID_1)
async def admin_view_refs_stats(callback: CallbackQuery):
    try:
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", show_alert=False)
    except TelegramBadRequest:
        pass
    platform = callback.data.split(':')[2]

    all_links = await reference_manager.get_all_references(platform)

    total = len(all_links)
    available = len([link for link in all_links if link.status == 'available'])
    assigned = len([link for link in all_links if link.status == 'assigned'])
    used = len([link for link in all_links if link.status == 'used'])

    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º –¥–ª—è **{platform}**:\n\n"
        f"–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total}\n"
        f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available}\n"
        f"üü° –í —Ä–∞–±–æ—Ç–µ: {assigned}\n"
        f"üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}"
    )
    await callback.message.edit_text(stats_text, reply_markup=inline.get_back_to_admin_refs_keyboard())


@router.callback_query(F.data.startswith("admin_refs:list:"), F.from_user.id == ADMIN_ID_1)
async def admin_view_refs_list(callback: CallbackQuery):
    try:
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...")
    except TelegramBadRequest:
        pass
    platform = callback.data.split(':')[2]

    all_links = await reference_manager.get_all_references(platform)

    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è **{platform}**:", reply_markup=inline.get_back_to_admin_refs_keyboard())

    if not all_links:
        await callback.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")
        return

    for link in all_links:
        status_icon = {"available": "üü¢", "assigned": "üü°", "used": "üî¥", "expired": "‚ö´"}.get(link.status, "‚ùì")
        user_info = f"-> ID: {link.assigned_to_user_id}" if link.assigned_to_user_id else ""
        link_text = (
            f"{status_icon} **ID: {link.id}** | –°—Ç–∞—Ç—É—Å: `{link.status}` {user_info}\n"
            f"üîó `{link.url}`"
        )
        await callback.message.answer(
            link_text,
            reply_markup=inline.get_delete_ref_keyboard(link.id),
            disable_web_page_preview=True
        )


@router.callback_query(F.data.startswith("admin_refs:delete:"), F.from_user.id == ADMIN_ID_1)
async def admin_delete_ref(callback: CallbackQuery, bot: Bot, dp: Dispatcher):
    link_id = int(callback.data.split(':')[2])

    success, assigned_user_id = await reference_manager.delete_reference(link_id)

    if not success:
        try:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        except TelegramBadRequest:
            pass
        return

    await callback.message.delete()
    try:
        await callback.answer(f"–°—Å—ã–ª–∫–∞ —Å ID {link_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    except TelegramBadRequest:
        pass

    if assigned_user_id:
        try:
            user_state = FSMContext(
                storage=dp.storage,
                key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id)
            )
            await user_state.clear()
            await bot.send_message(
                assigned_user_id,
                "‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –°—Å—ã–ª–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–í–∞—à –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=reply.get_main_menu_keyboard()
            )
            await user_state.set_state(UserState.MAIN_MENU)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {assigned_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


# --- –ë–õ–û–ö: –ú–û–î–ï–†–ê–¶–ò–Ø –ò –î–†–£–ì–ò–ï –ö–û–ú–ê–ù–î–´ (–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–æ–∏–º –∞–¥–º–∏–Ω–∞–º) ---

@router.message(Command("viewhold"))
async def admin_view_user_hold(message: Message, bot: Bot):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /viewhold ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username")
        return

    identifier = args[1]
    user_id = await db_manager.find_user_by_identifier(identifier)

    if not user_id:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{identifier}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    user = await db_manager.get_user(user_id)
    reviews_in_hold = await db_manager.get_user_hold_reviews(user_id)

    if not reviews_in_hold:
        await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: `{user_id}`) –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ.")
        return

    total_hold_amount = sum(review.amount for review in reviews_in_hold)

    response_text = f"‚è≥ –û—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: `{user_id}`)\n"
    response_text += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: **{total_hold_amount}** ‚≠ê\n\n"

    for review in reviews_in_hold:
        hold_until_str = review.hold_until.strftime('%d.%m.%Y %H:%M') if review.hold_until else 'N/A'
        response_text += (
            f"üîπ **{review.amount} ‚≠ê** (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {review.platform})\n"
            f"   - –°—Ä–æ–∫ —Ö–æ–ª–¥–∞: –¥–æ {hold_until_str} UTC\n"
            f"   - ID –æ—Ç–∑—ã–≤–∞: `{review.id}`\n\n"
        )

    await message.answer(response_text)


@router.callback_query(F.data.startswith('admin_verify:'))
async def admin_verification_handler(callback: CallbackQuery, state: FSMContext, bot: Bot, dp: Dispatcher):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    _, action, context, user_id_str = callback.data.split(':')
    user_id = int(user_id_str)
    admin_id = callback.from_user.id
    admin_username = callback.from_user.username
    admin_state = state
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))

    original_text = callback.message.text if callback.message.text else callback.message.caption

    if action == "confirm":
        action_text = f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û (–∞–¥–º–∏–Ω @{admin_username})"
        if context == "google_profile":
            await user_state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
            await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=inline.get_google_last_reviews_check_keyboard())
        elif context == "google_last_reviews":
            await user_state.set_state(UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
            await bot.send_message(user_id, "–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_google_continue_writing_keyboard())
        elif context == "yandex_profile" or context == "yandex_profile_screenshot":
            await user_state.set_state(UserState.YANDEX_REVIEW_READY_TO_TASK)
            await bot.send_message(user_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å Yandex –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_yandex_continue_writing_keyboard())
        elif context == "gmail_device_model":
            await state.set_state(AdminState.ENTER_GMAIL_DATA)
            await state.update_data(gmail_user_id=user_id)
            await callback.message.answer(
                "‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)"
            )

        try:
            if callback.message.photo:
                await callback.message.edit_caption(caption=f"{original_text}\n\n{action_text}", reply_markup=None)
            else:
                await callback.message.edit_text(f"{original_text}\n\n{action_text}", reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")


    elif action == "warn":
        action_text = f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –í–´–î–ê–ù–û (–∞–¥–º–∏–Ω @{admin_username})"
        new_text = f"{original_text}\n\n{action_text}"

        try:
            if callback.message.photo:
                await callback.message.edit_caption(caption=new_text, reply_markup=None)
            else:
                await callback.message.edit_text(new_text, reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")
        
        platform = context.split('_')[0]
        warnings_count = await db_manager.add_user_warning(user_id, platform=platform)
        user_message_text = "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ –Ω–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n"

        if warnings_count >= 3:
            user_message_text += f"\n‚ùóÔ∏è **–≠—Ç–æ –≤–∞—à–µ 3-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform.capitalize()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞.**"
            await user_state.clear()
        else:
            state_to_return_map = {
                "google_profile": UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT,
                "google_last_reviews": UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK,
                "yandex_profile": UserState.YANDEX_REVIEW_INIT,
                "yandex_profile_screenshot": UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT
            }
            state_to_return = state_to_return_map.get(context)
            if state_to_return:
                await user_state.set_state(state_to_return)
                user_message_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

        try:
            await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
            await bot.send_message(admin_id, f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except Exception as e:
            await bot.send_message(admin_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")

    elif action == "reject":
        action_text = "‚ùå –û–¢–ö–õ–û–ù–ï–ù"
        new_text = f"{original_text}\n\n{action_text} (–∞–¥–º–∏–Ω @{admin_username})"

        try:
            if callback.message.photo:
                await callback.message.edit_caption(caption=new_text, reply_markup=None)
            else:
                await callback.message.edit_text(new_text, reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

        await bot.send_message(admin_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≤—ã–±—Ä–∞–ª–∏ '{action_text}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}.")

        reason_state_map = {
            "google_profile": AdminState.REJECT_REASON_GOOGLE_PROFILE,
            "google_last_reviews": AdminState.REJECT_REASON_GOOGLE_LAST_REVIEWS,
            "yandex_profile": AdminState.REJECT_REASON_YANDEX_PROFILE,
            "yandex_profile_screenshot": AdminState.REJECT_REASON_YANDEX_PROFILE,
            "gmail_device_model": AdminState.REJECT_REASON_GMAIL_DATA_REQUEST,
        }
        if context in reason_state_map:
            reason_state = reason_state_map[context]
            await admin_state.set_state(reason_state)
            await admin_state.update_data(target_user_id=user_id)
        else:
            await bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è.")


@router.callback_query(F.data.startswith('admin_provide_text:'), F.from_user.id == TEXT_ADMIN)
async def admin_start_providing_text(callback: CallbackQuery, state: FSMContext):
    try:
        is_photo = bool(callback.message.photo)
        message_text = callback.message.caption if is_photo else callback.message.text

        _, platform, user_id_str, link_id_str = callback.data.split(':')
        user_id = int(user_id_str)
        link_id = int(link_id_str)
        
        current_state = AdminState.PROVIDE_GOOGLE_REVIEW_TEXT
        if platform == 'yandex':
            current_state = AdminState.PROVIDE_YANDEX_REVIEW_TEXT
        
        await state.set_state(current_state)
        await state.update_data(
            target_user_id=user_id,
            target_link_id=link_id,
            platform=platform
        )
        
        if is_photo:
            await callback.message.edit_caption(
                caption=f"{message_text}\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}", reply_markup=None)
    except (TelegramBadRequest, Exception) as e:
        logger.warning(f"Error editing message on admin_start_providing_text: {e}")


@router.message(F.text, F.state.in_({AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, AdminState.PROVIDE_YANDEX_REVIEW_TEXT}), F.from_user.id == TEXT_ADMIN)
async def admin_process_review_text(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, dp: Dispatcher):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    link_id = data.get("target_link_id")
    platform = data.get("platform")
    review_text_from_admin = message.text

    if not all([user_id, link_id, platform]):
        await message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞). –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
        await state.clear()
        return

    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    user_info = await bot.get_chat(user_id)
    link = await db_manager.db_get_link_by_id(link_id)

    if not link:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É —Å ID {link_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await user_state.clear()
        await state.clear()
        return

    if platform == "google":
        task_state = UserState.GOOGLE_REVIEW_TASK_ACTIVE
        task_message = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            "1. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π *–í –¢–û–ß–ù–û–°–¢–ò* —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º.\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ 5 –∑–≤–µ–∑–¥, –ø–µ—Ä–µ–ø–∏—Å–∞–≤ —Ç–µ–∫—Å—Ç.\n\n"
            "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏. –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º. –ö–û–ü–ò–†–û–í–ê–¢–¨ –ò –í–°–¢–ê–í–õ–Ø–¢–¨ –¢–ï–ö–°–¢ –ù–ï–õ–¨–ó–Ø\n\n"
            "<b>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞:</b>\n"
            f"{review_text_from_admin}\n\n"
            f"üîó <b>[–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–î–ê–ù–ò–Æ]({link.url})</b> \n\n"
            "‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>15 –º–∏–Ω—É—Ç</b>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>7 –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=7)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=15)

    elif platform == "yandex":
        task_state = UserState.YANDEX_REVIEW_TASK_ACTIVE
        task_message = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            "1. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ <b>5 –∑–≤–µ–∑–¥</b>, –∫–æ—Ç–æ—Ä—ã–π *–í –¢–û–ß–ù–û–°–¢–ò* —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º.\n\n"
            "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏. –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º. –ö–û–ü–ò–†–û–í–ê–¢–¨ –ò –í–°–¢–ê–í–õ–Ø–¢–¨ –¢–ï–ö–°–¢ –ù–ï–õ–¨–ó–Ø\n\n"
            "<b>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞:</b>\n"
            f"{review_text_from_admin}\n\n"
            f"üîó <b>[–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–î–ê–ù–ò–Æ]({link.url})</b> \n\n"
            "‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>25 –º–∏–Ω—É—Ç</b>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>10 –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=10)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=25)
    else:
        await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}")
        await state.clear()
        return

    try:
        await bot.send_message(user_id, task_message, parse_mode='HTML', disable_web_page_preview=True)
        await message.answer(f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_info.username} (ID: {user_id}).")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")
        await reference_manager.release_reference_from_user(user_id, 'available')
        await user_state.clear()
        await state.clear()
        return

    await user_state.set_state(task_state)
    await user_state.update_data(username=user_info.username, review_text=review_text_from_admin)

    scheduler.add_job(send_confirmation_button, 'date', run_date=run_date_confirm, args=[bot, user_id, platform])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=run_date_timeout, args=[bot, dp, user_id, platform, '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'])
    await user_state.update_data(timeout_job_id=timeout_job.id)

    await state.clear()


@router.message(
    F.text,
    F.state.in_({
        AdminState.REJECT_REASON_GOOGLE_PROFILE,
        AdminState.REJECT_REASON_GOOGLE_LAST_REVIEWS,
        AdminState.REJECT_REASON_YANDEX_PROFILE,
        AdminState.REJECT_REASON_GOOGLE_REVIEW,
        AdminState.REJECT_REASON_YANDEX_REVIEW,
        AdminState.REJECT_REASON_GMAIL_ACCOUNT,
        AdminState.REJECT_REASON_GMAIL_DATA_REQUEST
    })
)
async def process_admin_reason(message: Message, state: FSMContext, bot: Bot):
    reason = message.text
    admin_id = message.from_user.id
    current_state = await state.get_state()
    logger.info(f"Admin {admin_id} is providing a rejection reason. State: {current_state}, Reason: {reason}")
    
    admin_data = await state.get_data()
    user_id = admin_data.get("target_user_id")

    if not user_id:
        await message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ.")
        await state.clear()
        return

    user_fsm_context = FSMContext(storage=state.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    
    if current_state == AdminState.REJECT_REASON_GMAIL_DATA_REQUEST:
        user_message_text = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n–ü—Ä–∏—á–∏–Ω–∞: ¬´{reason}¬ª"
        await user_fsm_context.set_state(UserState.GMAIL_ACCOUNT_INIT)
    else:
        user_message_text = f"‚ùå –í–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ü—Ä–∏—á–∏–Ω–∞: ¬´{reason}¬ª"
        await user_fsm_context.set_state(UserState.MAIN_MENU)
        
    try:
        await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")

    await state.clear()


@router.callback_query(F.data.startswith('admin_final_approve:'))
async def admin_final_approve(callback: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        review_id = int(callback.data.split(':')[1])
        review = await db_manager.get_review_by_id(review_id)
        if not review or review.status != 'pending':
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            return

        amount_map = {'google': 15.0, 'yandex': 50.0}
        amount = amount_map.get(review.platform, 0.0)

        hold_minutes_map = {'google': 5, 'yandex': 24 * 60}
        hold_duration_minutes = hold_minutes_map.get(review.platform, 24 * 60)
        cooldown_hours = 72

        success = await db_manager.move_review_to_hold(review_id, amount, hold_minutes=hold_duration_minutes)
        
        if success:
            hold_hours = hold_duration_minutes / 60
            await callback.answer(f"–û–¥–æ–±—Ä–µ–Ω–æ. –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥ –Ω–∞ {hold_hours:.2f} —á.", show_alert=True)
            
            await db_manager.set_platform_cooldown(review.user_id, review.platform, cooldown_hours)
            
            cooldown_end_time = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=cooldown_hours)
            scheduler.add_job(notify_cooldown_expired, 'date', run_date=cooldown_end_time,
                              args=[bot, review.user_id, review.platform],
                              id=f"cooldown_notify_{review.user_id}_{review.platform}")
            
            await reference_manager.release_reference_from_user(review.user_id, 'used')
            
            try:
                await bot.send_message(review.user_id, f"‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ ({review.platform}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø–µ—Ä–≤–∏—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥. +{amount} ‚≠ê –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ö–æ–ª–¥.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤ —Ö–æ–ª–¥: {e}")
            
            await callback.message.edit_caption(caption=f"{callback.message.caption}\n\n‚úÖ –û–¢–ó–´–í –û–¢–ü–†–ê–í–õ–ï–ù –í –•–û–õ–î (–∞–¥–º–∏–Ω–æ–º @{callback.from_user.username})", reply_markup=None)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤.", show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ admin_final_approve: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)


@router.callback_query(F.data.startswith('admin_final_reject:'))
async def admin_final_reject_request(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

    try:
        review_id = int(callback.data.split(':')[1])
        review = await db_manager.get_review_by_id(review_id)
        if not review:
            await callback.message.edit_caption(caption=f"{callback.message.caption}\n\n–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
            return

        rejected_review = await db_manager.admin_reject_review(review_id)
        if rejected_review:
            cooldown_hours = 72
            await db_manager.set_platform_cooldown(rejected_review.user_id, rejected_review.platform, cooldown_hours)

            cooldown_end_time = datetime.datetime.utcnow() + datetime.timedelta(hours=cooldown_hours)
            scheduler.add_job(notify_cooldown_expired, 'date', run_date=cooldown_end_time,
                              args=[bot, rejected_review.user_id, rejected_review.platform],
                              id=f"cooldown_notify_{rejected_review.user_id}_{rejected_review.platform}")
                              
            await reference_manager.release_reference_from_user(rejected_review.user_id, 'available')
            try:
                user_message = f"‚ùå –í–∞—à –æ—Ç–∑—ã–≤ (–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {rejected_review.platform}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π."
                await callback.bot.send_message(rejected_review.user_id, user_message, reply_markup=inline.get_back_to_main_menu_keyboard())
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

            await callback.message.edit_caption(caption=f"{callback.message.caption}\n\n‚ùå –û–¢–ó–´–í –û–¢–ö–õ–û–ù–ï–ù (–∞–¥–º–∏–Ω–æ–º @{callback.from_user.username}). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –∫—É–ª–¥–∞—É–Ω.", reply_markup=None)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.", show_alert=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ admin_final_reject_request: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)


@router.message(Command("reviewhold"))
async def admin_review_hold(message: Message, bot: Bot):
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ...")
    hold_reviews = await db_manager.get_all_hold_reviews()

    if not hold_reviews:
        await message.answer("–í —Ö–æ–ª–¥–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ: {len(hold_reviews)}")
    for review in hold_reviews:
        link_url = review.link.url if review.link else "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
        
        info_text = (
            f"–û—Ç–∑—ã–≤ ID: `{review.id}`\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: `{review.user_id}`\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: `{review.platform}`\n"
            f"–°—É–º–º–∞: `{review.amount}` ‚≠ê\n"
            f"–°—Å—ã–ª–∫–∞: `{link_url} `\n\n"
            f"–¢–µ–∫—Å—Ç: ¬´_{review.review_text}_¬ª"
        )
        
        try:
            if review.admin_message_id:
                await bot.copy_message(
                    chat_id=message.chat.id,
                    from_chat_id=FINAL_CHECK_ADMIN,
                    message_id=review.admin_message_id,
                    caption=info_text,
                    reply_markup=inline.get_admin_hold_review_keyboard(review.id)
                )
            else:
                await message.answer(info_text, reply_markup=inline.get_admin_hold_review_keyboard(review.id))
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∑—ã–≤ {review.id}. –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –û—à–∏–±–∫–∞: {e}\n\n{info_text}",
                                 reply_markup=inline.get_admin_hold_review_keyboard(review.id))


@router.callback_query(F.data.startswith('admin_hold_approve:'))
async def admin_hold_approve_handler(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        review_id = int(callback.data.split(':')[1])
        
        approved_review = await db_manager.admin_approve_review(review_id)
        if not approved_review:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        if approved_review.platform == 'google':
            user = await db_manager.get_user(approved_review.user_id)
            if user and user.referrer_id:
                amount = 0.45
                await db_manager.add_referral_earning(user_id=approved_review.user_id, amount=amount)
                try:
                    await bot.send_message(
                        user.referrer_id,
                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{user.username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {user.referrer_id}: {e}")
        
        await callback.answer("‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!", show_alert=True)
        new_caption = (callback.message.caption or "") + f"\n\n‚úÖ –û–î–û–ë–†–ï–ù @{callback.from_user.username}"
        await callback.message.edit_caption(caption=new_caption, reply_markup=None)
        try:
            await bot.send_message(approved_review.user_id, f"‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ (ID: {review_id}) –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! +{approved_review.amount} ‚≠ê –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {approved_review.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_hold_approve_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(F.data.startswith('admin_hold_reject:'))
async def admin_hold_reject_handler(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        review_id = int(callback.data.split(':')[1])

        review_before_rejection = await db_manager.get_review_by_id(review_id)
        if not review_before_rejection or review_before_rejection.status != 'on_hold':
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        rejected_review = await db_manager.admin_reject_review(review_id)
        if rejected_review:
            await callback.answer("‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!", show_alert=True)
            new_caption = (callback.message.caption or "") + f"\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù @{callback.from_user.username}"
            await callback.message.edit_caption(caption=new_caption, reply_markup=None)
            try:
                user_message = f"‚ùå –í–∞—à –æ—Ç–∑—ã–≤ (ID: {review_id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ó–≤–µ–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã –∏–∑ —Ö–æ–ª–¥–∞."
                await bot.send_message(rejected_review.user_id, user_message, reply_markup=inline.get_back_to_main_menu_keyboard())
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_hold_reject_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(F.data.startswith("admin_withdraw_approve:"))
async def admin_approve_withdrawal(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        request_id = int(callback.data.split(":")[1])
        
        request = await db_manager.approve_withdrawal_request(request_id)
        
        if request is None:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        await callback.answer("‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", show_alert=True)
        
        new_text = callback.message.text + f"\n\n**[ ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username} ]**"
        await callback.message.edit_text(new_text, parse_mode="Markdown", reply_markup=None)
        
        try:
            await bot.send_message(
                request.user_id,
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount} ‚≠ê –±—ã–ª **–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            logger.error(f"Failed to notify user {request.user_id} about withdrawal approval: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_approve_withdrawal: {e}")


@router.callback_query(F.data.startswith("admin_withdraw_reject:"))
async def admin_reject_withdrawal(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        request_id = int(callback.data.split(":")[1])
        
        request = await db_manager.reject_withdrawal_request(request_id)
        
        if request is None:
            await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=None)
            return

        await callback.answer("‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
        
        new_text = callback.message.text + f"\n\n**[ ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{callback.from_user.username} ]**"
        await callback.message.edit_text(new_text, parse_mode="Markdown", reply_markup=None)
        
        try:
            await bot.send_message(
                request.user_id,
                f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount} ‚≠ê –±—ã–ª **–æ—Ç–∫–ª–æ–Ω–µ–Ω** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å."
            )
        except Exception as e:
            logger.error(f"Failed to notify user {request.user_id} about withdrawal rejection: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_reject_withdrawal: {e}")


@router.message(Command("reset_cooldown"), F.from_user.id == ADMIN_ID_1)
async def reset_cooldown_handler(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è **–û—à–∏–±–∫–∞!**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: `/reset_cooldown ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username`")
        return
    
    identifier = args[1]
    user_id = await db_manager.find_user_by_identifier(identifier)

    if not user_id:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{identifier}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    success = await db_manager.reset_user_cooldowns(user_id)
    
    if success:
        user = await db_manager.get_user(user_id)
        username = f"@{user.username}" if user.username else f"ID: {user_id}"
        await message.answer(
            f"‚úÖ –í—Å–µ –∫—É–ª–¥–∞—É–Ω—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{username}** –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.",
            reply_markup=inline.get_back_to_main_menu_keyboard()
        )
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{identifier}`.")