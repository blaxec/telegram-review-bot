# file: handlers/admin.py

import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState, AdminState
from keyboards import inline
from config import ADMIN_IDS
from database import db_manager
from references import reference_manager
from logic.admin_logic import process_add_links_logic

router = Router()
logger = logging.getLogger(__name__)

ADMINS = set(ADMIN_IDS)

# --- –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–°–´–õ–ö–ê–ú–ò (–° –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ú FSM) ---

@router.message(Command("admin_refs"), F.from_user.id.in_(ADMINS))
async def admin_refs_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())

@router.callback_query(F.data.startswith("admin_refs:add:"), F.from_user.id.in_(ADMINS))
async def admin_add_ref_start(callback: CallbackQuery, state: FSMContext):
    platform = callback.data.split(':')[2]
    state_map = {"google_maps": AdminState.ADD_GOOGLE_REFERENCE, "yandex_maps": AdminState.ADD_YANDEX_REFERENCE}
    current_state = state_map.get(platform)
    if current_state:
        await state.set_state(current_state) # <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(platform=platform)
        await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è **{platform}**, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.", reply_markup=inline.get_back_to_admin_refs_keyboard())
    await callback.answer()

@router.message(
    F.from_user.id.in_(ADMINS),
    F.state.in_({AdminState.ADD_GOOGLE_REFERENCE, AdminState.ADD_YANDEX_REFERENCE}), # <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
    F.text.as_("text")
)
async def admin_add_ref_process(message: Message, state: FSMContext, text: str):
    data = await state.get_data()
    platform = data.get("platform")
    if not platform:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
        
    result_text = await process_add_links_logic(text, platform)
    
    await message.answer(result_text)
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())


# --- –†–ê–ó–ú–û–†–ê–ñ–ò–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –ü–†–û–°–ú–û–¢–†–ê –°–ü–ò–°–ö–ê ---

@router.callback_query(F.data.startswith("admin_refs:list:"), F.from_user.id.in_(ADMINS))
async def admin_view_refs_list(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...")
    platform = callback.data.split(':')[2]
    all_links = await reference_manager.get_all_references(platform)
    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è **{platform}**:", reply_markup=inline.get_back_to_admin_refs_keyboard())
    if not all_links:
        await callback.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")
        return
    message_ids = []
    for link in all_links:
        icons = {"available": "üü¢", "assigned": "üü°", "used": "üî¥", "expired": "‚ö´"}
        user_info = f"-> ID: {link.assigned_to_user_id}" if link.assigned_to_user_id else ""
        text = f"{icons.get(link.status, '‚ùì')} **ID:{link.id}** | `{link.status}` {user_info}\nüîó `{link.url}`"
        msg = await callback.message.answer(text, reply_markup=inline.get_delete_ref_keyboard(link.id), disable_web_page_preview=True)
        message_ids.append(msg.message_id)
    await state.update_data(link_message_ids=message_ids)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã ---
@router.callback_query(F.data.startswith("admin_refs:stats:"), F.from_user.id.in_(ADMINS))
async def admin_view_refs_stats(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.", show_alert=True)

@router.callback_query(F.data.startswith("admin_refs:delete:"), F.from_user.id.in_(ADMINS))
async def admin_delete_ref(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.", show_alert=True)