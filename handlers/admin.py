# file: handlers/admin.py

import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from config import ADMIN_ID_1, ADMIN_IDS, FINAL_CHECK_ADMIN
from database import db_manager
from references import reference_manager
from logic.admin_logic import *

router = Router()
logger = logging.getLogger(__name__)

ADMINS = set(ADMIN_IDS)
TEXT_ADMIN = ADMIN_ID_1

# --- –í–ê–ñ–ù–û: –ú—ã —É–±—Ä–∞–ª–∏ –æ–±—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å —Ä–æ—É—Ç–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö –≤ –∫–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ ---

@router.message(Command("addstars"), F.from_user.id.in_(ADMINS))
async def admin_add_stars(message: Message):
    await db_manager.update_balance(message.from_user.id, 999.0)
    await message.answer("‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 999 ‚≠ê.")


# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–°–´–õ–ö–ê–ú–ò ---

@router.message(Command("admin_refs"), F.from_user.id.in_(ADMINS))
async def admin_refs_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())

@router.callback_query(F.data == "back_to_refs_menu", F.from_user.id.in_(ADMINS))
async def back_to_refs_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_ids_to_delete = data.get("link_message_ids", [])
    message_ids_to_delete.append(callback.message.message_id)
    for msg_id in set(message_ids_to_delete):
        try: await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        except TelegramBadRequest: pass
    await state.clear()
    await bot.send_message(callback.from_user.id, "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())
    try: await callback.answer()
    except: pass

@router.callback_query(F.data.startswith("admin_refs:add:"), F.from_user.id.in_(ADMINS))
async def admin_add_ref_start(callback: CallbackQuery, state: FSMContext):
    try: await callback.answer()
    except TelegramBadRequest: pass
    platform = callback.data.split(':')[2]
    state_map = {"google_maps": AdminState.ADD_GOOGLE_REFERENCE, "yandex_maps": AdminState.ADD_YANDEX_REFERENCE}
    current_state = state_map.get(platform)
    if current_state:
        await state.set_state(current_state)
        await state.update_data(platform=platform)
        await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è **{platform}**, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.", reply_markup=inline.get_back_to_admin_refs_keyboard())

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@router.message(
    F.from_user.id.in_(ADMINS),
    F.state.in_({AdminState.ADD_GOOGLE_REFERENCE, AdminState.ADD_YANDEX_REFERENCE}),
    F.text.as_("text")
)
async def admin_add_ref_process(message: Message, state: FSMContext, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —Å –æ—Ç–ª–æ–≤–æ–º –æ—à–∏–±–æ–∫."""
    try:
        data = await state.get_data()
        platform = data.get("platform")
        
        if not platform:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        result_text = await process_add_links_logic(text, platform)
        
        await message.answer(result_text)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ —Å—Å—ã–ª–æ–∫
        await state.clear()
        await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏:", reply_markup=inline.get_admin_refs_keyboard())
    
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ admin_add_ref_process –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ–≥–∞–º.")
        await state.clear()


@router.callback_query(F.data.startswith("admin_refs:stats:"), F.from_user.id.in_(ADMINS))
async def admin_view_refs_stats(callback: CallbackQuery):
    try: await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é...", show_alert=False)
    except: pass
    platform = callback.data.split(':')[2]
    all_links = await reference_manager.get_all_references(platform)
    stats = {status: len([link for link in all_links if link.status == status]) for status in ['available', 'assigned', 'used']}
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ **{platform}**:\n\n"
            f"–í—Å–µ–≥–æ: {len(all_links)}\n"
            f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: {stats['available']}\nüü° –í —Ä–∞–±–æ—Ç–µ: {stats['assigned']}\nüî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used']}")
    await callback.message.edit_text(text, reply_markup=inline.get_back_to_admin_refs_keyboard())

@router.callback_query(F.data.startswith("admin_refs:list:"), F.from_user.id.in_(ADMINS))
async def admin_view_refs_list(callback: CallbackQuery, state: FSMContext):
    try: await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫...")
    except: pass
    platform = callback.data.split(':')[2]
    all_links = await reference_manager.get_all_references(platform)
    await callback.message.edit_text(f"–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è **{platform}**:", reply_markup=inline.get_back_to_admin_refs_keyboard())
    if not all_links:
        await callback.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")
        return
    message_ids = []
    for link in all_links:
        icons = {"available": "üü¢", "assigned": "üü°", "used": "üî¥", "expired": "‚ö´"}
        user_info = f"-> ID: {link.assigned_to_user_id}" if link.assigned_to_user_id else ""
        text = f"{icons.get(link.status, '‚ùì')} **ID:{link.id}** | `{link.status}` {user_info}\nüîó `{link.url}`"
        msg = await callback.message.answer(text, reply_markup=inline.get_delete_ref_keyboard(link.id), disable_web_page_preview=True)
        message_ids.append(msg.message_id)
    await state.update_data(link_message_ids=message_ids)

@router.callback_query(F.data.startswith("admin_refs:delete:"), F.from_user.id.in_(ADMINS))
async def admin_delete_ref(callback: CallbackQuery, bot: Bot, dp: Dispatcher):
    link_id = int(callback.data.split(':')[2])
    success, assigned_user_id = await reference_manager.delete_reference(link_id)
    if not success:
        try: await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É.", show_alert=True)
        except: pass
        return
    await callback.message.delete()
    try: await callback.answer(f"–°—Å—ã–ª–∫–∞ ID {link_id} —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    except: pass
    if assigned_user_id:
        try:
            user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=assigned_user_id, chat_id=assigned_user_id))
            await user_state.clear()
            await bot.send_message(assigned_user_id, "‚ùóÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply.get_main_menu_keyboard())
            await user_state.set_state(UserState.MAIN_MENU)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {assigned_user_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")


# --- –ë–õ–û–ö: –ú–û–î–ï–†–ê–¶–ò–Ø ---

@router.callback_query(F.data.startswith('admin_verify:'), F.from_user.id.in_(ADMINS))
async def admin_verification_handler(callback: CallbackQuery, state: FSMContext, bot: Bot, dp: Dispatcher):
    try: await callback.answer()
    except: pass
    _, action, context, user_id_str = callback.data.split(':')
    user_id = int(user_id_str)
    admin_state = state
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    original_text = callback.message.text or callback.message.caption
    action_text = ""
    
    if action == "confirm":
        action_text = f"‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û (@{callback.from_user.username})"
        if context == "google_profile":
            await user_state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
            await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=inline.get_google_last_reviews_check_keyboard())
        elif context == "google_last_reviews":
            await user_state.set_state(UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
            await bot.send_message(user_id, "–û—Ç–∑—ã–≤—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_google_continue_writing_keyboard())
        elif "yandex_profile" in context:
            await user_state.set_state(UserState.YANDEX_REVIEW_READY_TO_TASK)
            await bot.send_message(user_id, "–ü—Ä–æ—Ñ–∏–ª—å Yandex –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=inline.get_yandex_continue_writing_keyboard())
        elif context == "gmail_device_model":
            await admin_state.set_state(AdminState.ENTER_GMAIL_DATA)
            await admin_state.update_data(gmail_user_id=user_id)
            await bot.send_message(callback.from_user.id, "‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:\n–ò–º—è\n–§–∞–º–∏–ª–∏—è\n–ü–∞—Ä–æ–ª—å\n–ü–æ—á—Ç–∞ (–±–µ–∑ @gmail.com)")
    
    elif action == "warn":
        action_text = f"‚ö†Ô∏è –í–´–î–ê–ß–ê –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (@{callback.from_user.username})"
        platform = "gmail" if "gmail" in context else context.split('_')[0]
        await admin_state.set_state(AdminState.PROVIDE_WARN_REASON)
        await admin_state.update_data(target_user_id=user_id, platform=platform, context=context)
        await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {user_id_str}.")

    elif action == "reject":
        action_text = f"‚ùå –û–¢–ö–õ–û–ù–ï–ù (@{callback.from_user.username})"
        context_map = {"google_profile": "google_profile", "google_last_reviews": "google_last_reviews", "yandex_profile": "yandex_profile", "yandex_profile_screenshot": "yandex_profile", "gmail_device_model": "gmail_device_model"}
        rejection_context = context_map.get(context)
        if rejection_context:
            await admin_state.set_state(AdminState.PROVIDE_REJECTION_REASON)
            await admin_state.update_data(target_user_id=user_id, rejection_context=rejection_context)
            await bot.send_message(callback.from_user.id, f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è {user_id_str}.")
        else:
            await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
    
    try:
        if callback.message.photo: await callback.message.edit_caption(caption=f"{original_text}\n\n{action_text}", reply_markup=None)
        else: await callback.message.edit_text(f"{original_text}\n\n{action_text}", reply_markup=None)
    except TelegramBadRequest: pass


# --- –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –í–í–û–î–û–í –û–¢ –ê–î–ú–ò–ù–ê ---

@router.message(AdminState.PROVIDE_WARN_REASON, F.from_user.id.in_(ADMINS))
async def process_warning_reason(message: Message, state: FSMContext, bot: Bot, dp: Dispatcher):
    if not message.text: return
    admin_data = await state.get_data()
    user_id, platform, context = admin_data.get("target_user_id"), admin_data.get("platform"), admin_data.get("context")
    if not all([user_id, platform, context]):
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await process_warning_reason_logic(bot, user_id, platform, message.text, user_state, context)
    await message.answer(response)
    await state.clear()

@router.message(AdminState.PROVIDE_REJECTION_REASON, F.from_user.id.in_(ADMINS))
async def process_rejection_reason(message: Message, state: FSMContext, bot: Bot, dp: Dispatcher):
    if not message.text: return
    admin_data = await state.get_data()
    user_id, context = admin_data.get("target_user_id"), admin_data.get("rejection_context")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ."); await state.clear(); return
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    response = await process_rejection_reason_logic(bot, user_id, message.text, context, user_state)
    await message.answer(response)
    await state.clear()

@router.callback_query(F.data.startswith('admin_provide_text:'), F.from_user.id == TEXT_ADMIN)
async def admin_start_providing_text(callback: CallbackQuery, state: FSMContext):
    try:
        _, platform, user_id_str, link_id_str = callback.data.split(':')
        state_map = {'google': AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, 'yandex': AdminState.PROVIDE_YANDEX_REVIEW_TEXT}
        if platform not in state_map: await callback.answer("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."); return
        await state.set_state(state_map[platform])
        await state.update_data(target_user_id=int(user_id_str), target_link_id=int(link_id_str), platform=platform)
        
        edit_text = f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –¥–ª—è ID: {user_id_str}"
        new_content = f"{(callback.message.caption or callback.message.text)}\n\n{edit_text}"
        if callback.message.photo: await callback.message.edit_caption(caption=new_content, reply_markup=None)
        else: await callback.message.edit_text(new_content, reply_markup=None)
    except Exception as e: logger.warning(f"Error in admin_start_providing_text: {e}")

@router.message(
    F.state.in_({AdminState.PROVIDE_GOOGLE_REVIEW_TEXT, AdminState.PROVIDE_YANDEX_REVIEW_TEXT}),
    F.from_user.id == TEXT_ADMIN
)
async def admin_process_review_text(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, dp: Dispatcher):
    if not message.text: return
    data = await state.get_data()
    success, response_text = await send_review_text_to_user_logic(
        bot=bot,
        dp=dp,
        scheduler=scheduler,
        user_id=data['target_user_id'],
        link_id=data['target_link_id'],
        platform=data['platform'],
        review_text=message.text
    )
    await message.answer(response_text)
    if success: await state.clear()


# --- –ë–õ–û–ö: –ú–û–î–ï–†–ê–¶–ò–Ø –û–¢–ó–´–í–û–í (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò –í –•–û–õ–î–ï) ---

@router.callback_query(F.data.startswith('admin_final_approve:'), F.from_user.id.in_(ADMINS))
async def admin_final_approve(callback: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    review_id = int(callback.data.split(':')[1])
    success, message_text = await approve_review_to_hold_logic(review_id, bot, scheduler)
    await callback.answer(message_text, show_alert=True)
    if success:
        await callback.message.edit_caption(caption=f"{callback.message.caption}\n\n‚úÖ –í –•–û–õ–î–ï (@{callback.from_user.username})", reply_markup=None)

@router.callback_query(F.data.startswith('admin_final_reject:'), F.from_user.id.in_(ADMINS))
async def admin_final_reject(callback: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    review_id = int(callback.data.split(':')[1])
    success, message_text = await reject_initial_review_logic(review_id, bot, scheduler)
    await callback.answer(message_text, show_alert=True)
    if success:
        await callback.message.edit_caption(caption=f"{callback.message.caption}\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù (@{callback.from_user.username})", reply_markup=None)

@router.message(Command("reviewhold"), F.from_user.id.in_(ADMINS))
async def admin_review_hold(message: Message, bot: Bot):
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ...")
    hold_reviews = await db_manager.get_all_hold_reviews()
    if not hold_reviews:
        await message.answer("–í —Ö–æ–ª–¥–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."); return
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(hold_reviews)}")
    for review in hold_reviews:
        link_url = review.link.url if review.link else "–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
        info_text = (f"ID: `{review.id}` | User: `{review.user_id}`\n–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: `{review.platform}` | –°—É–º–º–∞: `{review.amount}` ‚≠ê\n"
                     f"–°—Å—ã–ª–∫–∞: `{link_url}`\n–¢–µ–∫—Å—Ç: ¬´_{review.review_text}_¬ª")
        try:
            if review.admin_message_id:
                await bot.copy_message(message.chat.id, FINAL_CHECK_ADMIN, review.admin_message_id, caption=info_text, reply_markup=inline.get_admin_hold_review_keyboard(review.id))
            else:
                await message.answer(info_text, reply_markup=inline.get_admin_hold_review_keyboard(review.id))
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {review.id}: {e}\n\n{info_text}", reply_markup=inline.get_admin_hold_review_keyboard(review.id))

@router.callback_query(F.data.startswith('admin_hold_approve:'), F.from_user.id.in_(ADMINS))
async def admin_hold_approve_handler(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split(':')[1])
    success, message_text = await approve_hold_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success:
        new_caption = (callback.message.caption or "") + f"\n\n‚úÖ –û–î–û–ë–†–ï–ù (@{callback.from_user.username})"
        await callback.message.edit_caption(caption=new_caption, reply_markup=None)

@router.callback_query(F.data.startswith('admin_hold_reject:'), F.from_user.id.in_(ADMINS))
async def admin_hold_reject_handler(callback: CallbackQuery, bot: Bot):
    review_id = int(callback.data.split(':')[1])
    success, message_text = await reject_hold_review_logic(review_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success:
        new_caption = (callback.message.caption or "") + f"\n\n‚ùå –û–¢–ö–õ–û–ù–ï–ù (@{callback.from_user.username})"
        await callback.message.edit_caption(caption=new_caption, reply_markup=None)


# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–í–û–î–û–ú –°–†–ï–î–°–¢–í ---

@router.callback_query(F.data.startswith("admin_withdraw_approve:"), F.from_user.id.in_(ADMINS))
async def admin_approve_withdrawal(callback: CallbackQuery, bot: Bot):
    request_id = int(callback.data.split(":")[1])
    success, message_text, _ = await approve_withdrawal_logic(request_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success:
        try:
            new_text = callback.message.text + f"\n\n**[ ‚úÖ –í–´–ü–õ–ê–ß–ï–ù–û –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ]**"
            await callback.message.edit_text(new_text, parse_mode="Markdown", reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit withdrawal message in channel: {e}")

@router.callback_query(F.data.startswith("admin_withdraw_reject:"), F.from_user.id.in_(ADMINS))
async def admin_reject_withdrawal(callback: CallbackQuery, bot: Bot):
    request_id = int(callback.data.split(":")[1])
    success, message_text, _ = await reject_withdrawal_logic(request_id, bot)
    await callback.answer(message_text, show_alert=True)
    if success:
        try:
            new_text = callback.message.text + f"\n\n**[ ‚ùå –û–¢–ö–õ–û–ù–ï–ù–û –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ]**"
            await callback.message.edit_text(new_text, parse_mode="Markdown", reply_markup=None)
        except TelegramBadRequest as e:
            logger.warning(f"Could not edit withdrawal message in channel: {e}")


# --- –ë–õ–û–ö: –ü–†–û–ß–ò–ï –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("reset_cooldown"), F.from_user.id.in_(ADMINS))
async def reset_cooldown_handler(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reset_cooldown ID_–∏–ª–∏_@username`"); return
    user_id = await db_manager.find_user_by_identifier(args[1])
    if not user_id:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{args[1]}` –Ω–µ –Ω–∞–π–¥–µ–Ω."); return
    if await db_manager.reset_user_cooldowns(user_id):
        user = await db_manager.get_user(user_id)
        username = f"@{user.username}" if user.username else f"ID: {user_id}"
        await message.answer(f"‚úÖ –ö—É–ª–¥–∞—É–Ω—ã –¥–ª—è **{username}** —Å–±—Ä–æ—à–µ–Ω—ã.")
    else: await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è `{args[1]}`.")

@router.message(Command("viewhold"), F.from_user.id.in_(ADMINS))
async def viewhold_handler(message: Message, bot: Bot):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /viewhold ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username")
        return
    identifier = args[1]
    response_text = await get_user_hold_info_logic(identifier)
    await message.answer(response_text)

@router.message(Command("fine"), F.from_user.id.in_(ADMINS))
async def fine_user_start(message: Message, state: FSMContext):
    await state.set_state(AdminState.FINE_USER_ID)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.FINE_USER_ID, F.from_user.id.in_(ADMINS))
async def fine_user_get_id(message: Message, state: FSMContext):
    if not message.text: return
    user_id = await db_manager.find_user_by_identifier(message.text)
    if not user_id:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_inline_keyboard()); return
    await state.update_data(target_user_id=user_id)
    await state.set_state(AdminState.FINE_AMOUNT)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).", reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.FINE_AMOUNT, F.from_user.id.in_(ADMINS))
async def fine_user_get_amount(message: Message, state: FSMContext):
    if not message.text: return
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard()); return
    await state.update_data(fine_amount=amount)
    await state.set_state(AdminState.FINE_REASON)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.FINE_REASON, F.from_user.id.in_(ADMINS))
async def fine_user_get_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É.", reply_markup=inline.get_cancel_inline_keyboard()); return
    data = await state.get_data()
    result_text = await apply_fine_to_user(data.get("target_user_id"), message.from_user.id, data.get("fine_amount"), message.text, bot)
    await message.answer(result_text)
    await state.clear()

# --- –ë–õ–û–ö: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–ú–û–ö–û–î–û–í ---

@router.message(Command("create_promo"), F.from_user.id.in_(ADMINS))
async def create_promo_start(message: Message, state: FSMContext):
    await state.set_state(AdminState.PROMO_CODE_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `NEWYEAR2025`). –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.",
                         reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.PROMO_CODE_NAME, F.from_user.id.in_(ADMINS))
async def promo_name_entered(message: Message, state: FSMContext):
    if not message.text: return
    promo_name = message.text.strip().upper()
    
    existing_promo = await db_manager.get_promo_by_code(promo_name)
    if existing_promo:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                             reply_markup=inline.get_cancel_inline_keyboard())
        return
        
    await state.update_data(promo_name=promo_name)
    await state.set_state(AdminState.PROMO_USES)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥).",
                         reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.PROMO_USES, F.from_user.id.in_(ADMINS))
async def promo_uses_entered(message: Message, state: FSMContext):
    if not message.text or not message.text.isdigit():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard())
        return
    
    uses = int(message.text)
    if uses <= 0:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.", reply_markup=inline.get_cancel_inline_keyboard())
        return

    await state.update_data(promo_uses=uses)
    await state.set_state(AdminState.PROMO_REWARD)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `25`).",
                         reply_markup=inline.get_cancel_inline_keyboard())

@router.message(AdminState.PROMO_REWARD, F.from_user.id.in_(ADMINS))
async def promo_reward_entered(message: Message, state: FSMContext):
    try:
        reward = float(message.text)
        if reward <= 0:
            raise ValueError
    except (ValueError, TypeError):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `10.5`).",
                             reply_markup=inline.get_cancel_inline_keyboard())
        return
    
    await state.update_data(promo_reward=reward)
    await state.set_state(AdminState.PROMO_CONDITION)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.",
                         reply_markup=inline.get_promo_condition_keyboard())

@router.callback_query(F.data.startswith("promo_cond:"), AdminState.PROMO_CONDITION, F.from_user.id.in_(ADMINS))
async def promo_condition_selected(callback: CallbackQuery, state: FSMContext):
    condition = callback.data.split(":")[1]
    data = await state.get_data()
    
    new_promo = await db_manager.create_promo_code(
        code=data['promo_name'],
        total_uses=data['promo_uses'],
        reward=data['promo_reward'],
        condition=condition
    )
    
    if new_promo:
        await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{new_promo.code}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    else:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        
    await state.clear()


# <<< –û–ë–´–ß–ù–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å) >>>

@router.message(Command("testadmin"), F.from_user.id.in_(ADMINS))
async def admin_test_handler(message: Message):
    """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ä–æ—É—Ç–µ—Ä."""
    await message.answer("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@router.message(Command("whatstate"))
async def get_current_state(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM."""
    current_state = await state.get_state()
    await message.answer(f"–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: `{current_state}`")