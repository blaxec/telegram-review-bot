# file: handlers/deposits.py
# (–ù–æ–≤—ã–π —Ñ–∞–π–ª)
import logging
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import DepositStates
from keyboards import inline
from database import db_manager
from config import DEPOSIT_PLANS
from logic.user_notifications import format_timedelta

router = Router()
logger = logging.getLogger(__name__)

async def show_deposits_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    deposits = await db_manager.get_active_user_deposits(user_id)
    total_on_deposits = sum(d.current_balance for d in deposits)

    text = f"üè¶ **–î–µ–ø–æ–∑–∏—Ç—ã**\n\n–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã: **{total_on_deposits:.2f} ‚≠ê**\n\n"
    if not deposits:
        text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤."
    else:
        text += "**–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥—ã:**\n"
        for dep in deposits:
            time_left = dep.closes_at - datetime.utcnow()
            days, rem = divmod(time_left.total_seconds(), 86400)
            hours, _ = divmod(rem, 3600)
            time_left_str = f"–æ—Å—Ç–∞–ª–æ—Å—å {int(days)}–¥ {int(hours)}—á"
            
            plan_name = DEPOSIT_PLANS.get(dep.deposit_plan_id, {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            text += f"‚Ä¢ –ü–ª–∞–Ω '{plan_name}': **{dep.current_balance:.2f} ‚≠ê**, –∑–∞–∫—Ä–æ–µ—Ç—Å—è {dep.closes_at.strftime('%d.%m.%Y %H:%M')} ({time_left_str})\n"

    await callback.message.edit_text(text, reply_markup=inline.get_deposits_menu_keyboard())


@router.callback_query(F.data == 'show_deposits_menu')
async def deposits_entry_point(callback: CallbackQuery):
    await show_deposits_menu(callback)

@router.callback_query(F.data == 'open_new_deposit')
async def open_new_deposit_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DepositStates.choosing_plan)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞:",
        reply_markup=inline.get_deposit_plan_selection_keyboard(DEPOSIT_PLANS)
    )

@router.callback_query(F.data.startswith("select_deposit_plan:"), DepositStates.choosing_plan)
async def select_deposit_plan(callback: CallbackQuery, state: FSMContext):
    plan_id = callback.data.split(":")[1]
    plan = DEPOSIT_PLANS.get(plan_id)
    
    if not plan:
        await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.update_data(selected_plan_id=plan_id)
    await state.set_state(DepositStates.waiting_for_amount)

    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω **'{plan['name']}'**:\n"
        f"‚Ä¢ {plan['description']}\n"
        f"‚Ä¢ –°—Ä–æ–∫: {plan['duration_days']} –¥–Ω—è(–¥–Ω–µ–π)\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∫–ª–∞–¥: {plan['min_amount']:.2f} ‚≠ê\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —ç—Ç–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ–≥–æ —Å—Ä–æ–∫–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –Ω–∞ –≤–µ—Å—å —Å—Ä–æ–∫!\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å (–Ω–µ –º–µ–Ω–µ–µ {plan['min_amount']:.2f} ‚≠ê):"
    )
    prompt_msg = await callback.message.edit_text(text, reply_markup=inline.get_cancel_inline_keyboard("show_deposits_menu"))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(DepositStates.waiting_for_amount)
async def process_deposit_amount(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    plan_id = data.get("selected_plan_id")
    plan = DEPOSIT_PLANS.get(plan_id)
    
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    user = await db_manager.get_user(message.from_user.id)
    if user.balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return
    if amount < plan['min_amount']:
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞: {plan['min_amount']:.2f} ‚≠ê.")
        return

    await db_manager.create_user_deposit(message.from_user.id, plan_id, amount)
    
    await message.answer(
        f"‚úÖ –í–∞—à –¥–µ–ø–æ–∑–∏—Ç '{plan['name']}' –Ω–∞ —Å—É–º–º—É {amount:.2f} ‚≠ê —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å {plan['duration_days']} –¥–Ω—è(–¥–Ω–µ–π). "
        "–ü—Ä–æ—Ü–µ–Ω—Ç—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –∏ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –î–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
    )
    
    if prompt_id := data.get("prompt_message_id"):
        try: await bot.delete_message(message.chat.id, prompt_id)
        except: pass
    await message.delete()

    await state.clear()
    
    dummy_callback = CallbackQuery(id="dummy", from_user=message.from_user, chat_instance="", message=await message.answer("..."))
    await show_deposits_menu(dummy_callback)
    await dummy_callback.message.delete()