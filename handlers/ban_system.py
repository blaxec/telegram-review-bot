# file: handlers/ban_system.py

import logging
import asyncio
import datetime
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from database import db_manager
from config import ADMIN_ID_1, ADMIN_IDS, Durations
from keyboards import inline
from logic.user_notifications import format_timedelta

router = Router()
logger = logging.getLogger(__name__)
ADMINS = set(ADMIN_IDS)

async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

@router.message(Command("unban_request"))
async def request_unban(message: Message, bot: Bot):
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
    asyncio.create_task(schedule_message_deletion(message, Durations.DELETE_UNBAN_REQUEST_DELAY))

    user = await db_manager.get_user(message.from_user.id)

    if not user or not user.is_banned:
        msg = await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if user.last_unban_request_at:
        time_since_last_request = datetime.datetime.utcnow() - user.last_unban_request_at
        if time_since_last_request < datetime.timedelta(minutes=Durations.COOLDOWN_UNBAN_REQUEST_MINUTES):
            remaining_time = datetime.timedelta(minutes=Durations.COOLDOWN_UNBAN_REQUEST_MINUTES) - time_since_last_request
            msg = await message.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑: {format_timedelta(remaining_time)}")
            asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
            return
    
    admin_notification = (
        f"üö® <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é!</b> üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: <code>{user.id}</code>) –ø—Ä–æ—Å–∏—Ç –æ —Ä–∞–∑–±–∞–Ω–µ."
    )
    
    try:
        await bot.send_message(
            chat_id=ADMIN_ID_1,
            text=admin_notification,
            reply_markup=inline.get_unban_request_keyboard(user.id)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
        await db_manager.update_last_unban_request_time(user.id)
        msg = await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –∞–¥–º–∏–Ω—É {ADMIN_ID_1}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Command("unban"), F.from_user.id.in_(ADMINS))
async def unban_user_command(message: Message):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∞
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    args = message.text.split()
    if len(args) < 2:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username</code>")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return

    identifier = args[1]
    user_id_to_unban = await db_manager.find_user_by_identifier(identifier)

    if not user_id_to_unban:
        msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
        
    user_to_unban = await db_manager.get_user(user_id_to_unban)
    if not user_to_unban.is_banned:
        msg = await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
        
    success = await db_manager.unban_user(user_id_to_unban)
    if success:
        msg = await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.")


@router.callback_query(F.data.startswith("unban_approve:"))
async def approve_unban_request(callback: CallbackQuery, bot: Bot):
    user_id_to_unban = int(callback.data.split(":")[1])
    
    success = await db_manager.unban_user(user_id_to_unban)
    
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.", show_alert=True)
        return

    try:
        await bot.send_message(user_id_to_unban, "üéâ <b>–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_unban} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")

    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.", show_alert=True)
    if callback.message:
        await callback.message.edit_text(f"{callback.message.text}\n\n<b>–°—Ç–∞—Ç—É—Å: –†–ê–ó–ë–ê–ù–ï–ù</b>", reply_markup=None)

@router.callback_query(F.data.startswith("unban_reject:"))
async def reject_unban_request(callback: CallbackQuery):
    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=True)
    if callback.message:
        await callback.message.edit_text(f"{callback.message.text}\n\n<b>–°—Ç–∞—Ç—É—Å: –û–¢–ö–õ–û–ù–ï–ù–û</b>", reply_markup=None)