# file: handlers/ban_system.py

import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from database import db_manager
from config import ADMIN_ID_1, ADMIN_IDS
from keyboards import inline

router = Router()
logger = logging.getLogger(__name__)
ADMINS = set(ADMIN_IDS)

@router.message(Command("unban_request"))
async def request_unban(message: Message, bot: Bot):
    user = await db_manager.get_user(message.from_user.id)

    if not user or not user.is_banned:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    admin_notification = (
        f"üö® **–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é!** üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: <code>{user.id}</code>) –ø—Ä–æ—Å–∏—Ç –æ —Ä–∞–∑–±–∞–Ω–µ."
    )
    
    try:
        await bot.send_message(
            chat_id=ADMIN_ID_1,
            text=admin_notification,
            reply_markup=inline.get_unban_request_keyboard(user.id)
        )
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –∞–¥–º–∏–Ω—É {ADMIN_ID_1}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /unban –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@router.message(Command("unban"), F.from_user.id.in_(ADMINS))
async def unban_user_command(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username</code>")
        return

    identifier = args[1]
    user_id_to_unban = await db_manager.find_user_by_identifier(identifier)

    if not user_id_to_unban:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    user_to_unban = await db_manager.get_user(user_id_to_unban)
    if not user_to_unban.is_banned:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return
        
    success = await db_manager.unban_user(user_id_to_unban)
    if success:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.")


@router.callback_query(F.data.startswith("unban_approve:"))
async def approve_unban_request(callback: CallbackQuery, bot: Bot):
    user_id_to_unban = int(callback.data.split(":")[1])
    
    success = await db_manager.unban_user(user_id_to_unban)
    
    if not success:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.", show_alert=True)
        return

    try:
        await bot.send_message(user_id_to_unban, "üéâ **–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!**\n\n–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_unban} –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")

    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.", show_alert=True)
    if callback.message:
        await callback.message.edit_text(f"{callback.message.text}\n\n*–°—Ç–∞—Ç—É—Å: –†–ê–ó–ë–ê–ù–ï–ù*", reply_markup=None)

@router.callback_query(F.data.startswith("unban_reject:"))
async def reject_unban_request(callback: CallbackQuery):
    user_id_to_reject = int(callback.data.split(":")[1])
    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=True)
    if callback.message:
        await callback.message.edit_text(f"{callback.message.text}\n\n*–°—Ç–∞—Ç—É—Å: –û–¢–ö–õ–û–ù–ï–ù–û*", reply_markup=None)