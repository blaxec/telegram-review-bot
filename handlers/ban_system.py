# file: handlers/ban_system.py

import logging
import asyncio
import datetime
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice
from aiogram.exceptions import TelegramBadRequest

from database import db_manager
from config import SUPER_ADMIN_ID, Durations, PAYMENT_PROVIDER_TOKEN, PAID_UNBAN_COST_STARS
from keyboards import inline
from logic.user_notifications import format_timedelta
from utils.access_filters import IsSuperAdmin
from states.user_states import UserState
from aiogram.fsm.context import FSMContext

router = Router()
logger = logging.getLogger(__name__)

async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

@router.message(Command("unban_request"))
async def request_unban_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    user = await db_manager.get_user(message.from_user.id)

    if not user or not user.is_banned:
        msg = await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return

    if user.last_unban_request_at:
        time_since_last_request = datetime.datetime.utcnow() - user.last_unban_request_at
        if time_since_last_request < datetime.timedelta(minutes=Durations.COOLDOWN_UNBAN_REQUEST_MINUTES):
            remaining_time = datetime.timedelta(minutes=Durations.COOLDOWN_UNBAN_REQUEST_MINUTES) - time_since_last_request
            msg = await message.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑: {format_timedelta(remaining_time)}")
            asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
            return
    
    await state.set_state(UserState.UNBAN_AWAITING_REASON)
    prompt_msg = await message.answer(
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –±–∞–Ω –±—ã–ª –≤—ã–¥–∞–Ω –æ—à–∏–±–æ—á–Ω–æ, –∏–ª–∏ –ø–æ—á–µ–º—É –≤–∞—Å —Å–ª–µ–¥—É–µ—Ç —Ä–∞–∑–±–∞–Ω–∏—Ç—å. "
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.UNBAN_AWAITING_REASON, F.text)
async def process_unban_reason(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞."""
    data = await state.get_data()
    prompt_msg_id = data.get("prompt_message_id")
    if prompt_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_msg_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

    user_id = message.from_user.id
    reason = message.text
    
    await db_manager.create_unban_request(user_id, reason)
    await db_manager.update_last_unban_request_time(user_id)
    
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    
    try:
        await bot.send_message(SUPER_ADMIN_ID, f"üîî –ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /amnesty –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    except Exception as e:
        logger.error(f"Failed to notify super admin about new unban request: {e}")
        
    await state.clear()


@router.message(Command("unban"), IsSuperAdmin())
async def unban_user_command(message: Message):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    args = message.text.split()
    if len(args) < 2:
        msg = await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unban ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username</code>")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return

    identifier = args[1]
    user_id_to_unban = await db_manager.find_user_by_identifier(identifier)

    if not user_id_to_unban:
        msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
        
    user_to_unban = await db_manager.get_user(user_id_to_unban)
    if not user_to_unban.is_banned:
        msg = await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        return
        
    success = await db_manager.unban_user(user_id_to_unban)
    if success:
        msg = await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_unban.username} (<code>{user_id_to_unban}</code>) –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.")
        asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
        try:
            await message.bot.send_message(user_id_to_unban, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–∞–Ω–∏–ª –≤–∞—Å –≤—Ä—É—á–Ω—É—é.")
        except: pass
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ---

@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–µ–º—É –ø–ª–∞—Ç–µ–∂–∞."""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    logger.info(f"Pre-checkout query for user {pre_checkout_query.from_user.id} confirmed.")

@router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ä–∞–∑–±–∞–Ω."""
    user_id = message.from_user.id
    logger.info(f"Successful payment of {message.successful_payment.total_amount} stars received from user {user_id} for unban.")
    
    request = await db_manager.get_unban_request_by_status(user_id, 'payment_pending')
    
    if not request:
        logger.error(f"CRITICAL: Successful payment from {user_id}, but no 'payment_pending' unban request found!")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û–¥–Ω–∞–∫–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db_manager.unban_user(user_id)
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
    await db_manager.update_unban_request_status(request.id, 'approved', SUPER_ADMIN_ID)
    
    await message.answer(
        "üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        "–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
    )