import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from math import ceil

from config import ADMIN_ID_1, ADMIN_ID_2
from keyboards import inline
from database import db_manager
from logic import admin_roles
from utils.access_filters import IsSuperAdmin
from states.user_states import AdminState


router = Router()
logger = logging.getLogger(__name__)

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ ---
from main import set_bot_commands


async def delete_and_clear_prompt(message: Message, state: FSMContext):
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest: pass
    try:
        await message.delete()
    except TelegramBadRequest: pass
    await state.update_data(prompt_message_id=None)

# --- –ö–æ–º–∞–Ω–¥–∞ /roles ---
@router.message(Command("roles"), IsSuperAdmin())
async def cmd_roles(message: Message):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer(
        "üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö.",
        reply_markup=await inline.get_roles_main_menu()
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---

@router.callback_query(F.data == "roles_back:main")
async def roles_back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–ª–µ–π."""
    await callback.message.edit_text(
        "üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö.",
        reply_markup=await inline.get_roles_main_menu()
    )

@router.callback_query(F.data.startswith("roles_cat:"))
async def roles_select_category(callback: CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ø–Ω–¥–µ–∫—Å, Google –∏ —Ç.–¥.)."""
    category = callback.data.split(":")[1]
    
    if category == "yandex":
        await callback.message.edit_text(
            "<b>üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=await inline.get_roles_yandex_menu()
        )
    elif category == "google":
        await callback.message.edit_text(
            "<b>üåç Google Maps</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "google")
        )
    elif category == "gmail":
        await callback.message.edit_text(
            "<b>üìß Gmail</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "gmail")
        )
    elif category == "other":
        await callback.message.edit_text(
            "<b>üì¶ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "other")
        )

@router.callback_query(F.data.startswith("roles_subcat:"))
async def roles_select_subcategory(callback: CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø–Ω–¥–µ–∫—Å —Å —Ç–µ–∫—Å—Ç–æ–º/–±–µ–∑)."""
    subcategory = callback.data.split(":")[1] # yandex_text –∏–ª–∏ yandex_no_text
    category, sub_type = subcategory.split("_", 1) # yandex, text

    title_map = {
        "text": "üìù –Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)",
        "no_text": "üö´ –Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)",
    }
    
    await callback.message.edit_text(
        f"<b>{title_map.get(sub_type)}</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
        reply_markup=await inline.get_task_switching_keyboard(bot, category, sub_type)
    )

@router.callback_query(F.data == "roles_back:yandex")
async def roles_back_to_yandex_cat(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ø–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á."""
    await callback.message.edit_text(
        "<b>üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=await inline.get_roles_yandex_menu()
    )
    
# --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

@router.callback_query(F.data.startswith("roles_switch:"))
async def roles_switch_admin_start(callback: CallbackQuery, bot: Bot):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –∞–¥–º–∏–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."""
    role_key = callback.data.split(":", 1)[1]
    
    all_admins = await db_manager.get_all_administrators_by_role()
    current_admin_id_str = await db_manager.get_system_setting(role_key)
    current_admin_id = int(current_admin_id_str) if current_admin_id_str else ADMIN_ID_1
    
    task_description = admin_roles.ROLE_DESCRIPTIONS.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–ª—è –∑–∞–¥–∞—á–∏:\n<b>¬´{task_description}¬ª</b>",
        reply_markup=await inline.get_admin_selection_keyboard(all_admins, role_key, current_admin_id, bot)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("roles_set_admin:"))
async def roles_set_new_admin(callback: CallbackQuery, bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–æ–ª–∏."""
    _, role_key, new_admin_id_str = callback.data.split(":")
    new_admin_id = int(new_admin_id_str)
    
    current_admin_id_str = await db_manager.get_system_setting(role_key)
    current_admin_id = int(current_admin_id_str) if current_admin_id_str else ADMIN_ID_1
    
    if new_admin_id == current_admin_id:
        await callback.answer("–≠—Ç–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É —Ä–æ–ª—å.", show_alert=True)
        return

    await db_manager.set_system_setting(role_key, str(new_admin_id))
    
    await callback.answer("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–∑–º–µ–Ω–µ–Ω!")

    category, subcategory = admin_roles.get_category_from_role_key(role_key)

    new_admin_name = await admin_roles.get_admin_username(bot, new_admin_id)
    old_admin_name = await admin_roles.get_admin_username(bot, current_admin_id)
    task_description = admin_roles.ROLE_DESCRIPTIONS.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")

    notification_text = (
        f"üîÑ <b>–°–º–µ–Ω–∞ —Ä–æ–ª–µ–π!</b>\n\n"
        f"–ó–∞–¥–∞—á–∞ ¬´<b>{task_description}</b>¬ª –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç {old_admin_name} –∫ {new_admin_name}."
    )
    
    all_db_admins = await db_manager.get_all_administrators_by_role()
    for admin in all_db_admins:
        try:
            await bot.send_message(admin.user_id, notification_text, reply_markup=inline.get_close_post_keyboard())
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin.user_id} –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á
    title_map = {"text": "üìù –Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)", "no_text": "üö´ –Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"}
    category_title_map = {"google": "üåç Google Maps", "gmail": "üìß Gmail", "other": "üì¶ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏"}

    title = ""
    if category == "yandex":
        title = title_map.get(subcategory)
    else:
        title = category_title_map.get(category)
        
    await callback.message.edit_text(
        f"<b>{title}</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
        reply_markup=await inline.get_task_switching_keyboard(bot, category, subcategory)
    )

@router.callback_query(F.data == "roles_show_current")
async def roles_show_current_settings(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    await callback.answer()
    settings_text = await admin_roles.get_all_roles_readable(bot)
    await callback.message.answer(
        settings_text,
        reply_markup=inline.get_current_settings_keyboard()
    )

@router.callback_query(F.data == "roles_delete_msg")
async def roles_delete_settings_msg(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    try:
        await callback.message.delete()
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except TelegramBadRequest:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

# --- –ë–ª–æ–∫ –¥–ª—è /roles_manage ---

@router.message(Command("roles_manage"), IsSuperAdmin())
async def cmd_roles_manage(message: Message):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–µ—Ä–æ–≤.",
        reply_markup=inline.get_roles_manage_menu()
    )

@router.callback_query(F.data == "roles_manage:back_to_menu")
async def roles_manage_back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
         "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–µ—Ä–æ–≤.",
        reply_markup=inline.get_roles_manage_menu()
    )

@router.callback_query(F.data.startswith("roles_manage:list:"))
async def list_admins(callback: CallbackQuery, bot: Bot):
    page = int(callback.data.split(":")[-1])
    admins_per_page = 5
    
    all_admins = await db_manager.get_all_administrators_by_role()
    total_pages = ceil(len(all_admins) / admins_per_page)
    
    start_index = (page - 1) * admins_per_page
    end_index = start_index + admins_per_page
    admins_on_page = all_admins[start_index:end_index]
    
    text, keyboard = await inline.get_roles_list_keyboard(admins_on_page, page, total_pages, bot)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("roles_manage:view:"))
async def view_single_admin(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[-1])
    admin = await db_manager.get_administrator(user_id)
    if not admin:
        await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    try:
        chat = await bot.get_chat(user_id)
        username = f"@{chat.username}" if chat.username else f"ID: {user_id}"
    except Exception:
        username = f"ID: {user_id}"

    role_text = "–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω" if admin.role == 'super_admin' else "–ê–¥–º–∏–Ω"
    tester_text = "–î–∞" if admin.is_tester else "–ù–µ—Ç"
    
    text = (f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {username}</b>\n\n"
            f"<b>–†–æ–ª—å:</b> {role_text}\n"
            f"<b>–¢–µ—Å—Ç–µ—Ä:</b> {tester_text}\n"
            f"<b>–î–æ–±–∞–≤–∏–ª:</b> ID {admin.added_by}\n"
            f"<b>–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:</b> {'–î–∞' if admin.is_removable else '–ù–µ—Ç'}")
            
    await callback.message.edit_text(text, reply_markup=inline.get_single_admin_manage_keyboard(admin))

@router.callback_query(F.data.startswith("roles_manage:toggle_tester:"))
async def toggle_tester_status(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[-1])
    admin = await db_manager.get_administrator(user_id)
    if not admin: return
    
    new_status = not admin.is_tester
    await db_manager.update_administrator(user_id, is_tester=new_status)
    await callback.answer(f"–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    await set_bot_commands(bot)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await view_single_admin(callback, bot)
    
@router.callback_query(F.data.startswith("roles_manage:delete_confirm:"))
async def confirm_delete_admin(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[-1])
    try:
        chat = await bot.get_chat(user_id)
        username = f"@{chat.username}" if chat.username else f"ID {user_id}"
    except Exception:
        username = f"ID {user_id}"
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username}?",
        reply_markup=inline.get_delete_admin_confirm_keyboard(user_id)
    )

@router.callback_query(F.data.startswith("roles_manage:delete_execute:"))
async def execute_delete_admin(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split(":")[-1])
    success = await db_manager.delete_administrator(user_id)
    if success:
        await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω.", show_alert=True)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö ---
        await set_bot_commands(bot)
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è callback.data, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é ---
        await list_admins(callback, bot)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)

@router.callback_query(F.data == "roles_manage:add")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.ROLES_ADD_ADMIN_ID)
    prompt = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=inline.get_cancel_inline_keyboard("roles_manage:back_to_menu")
    )
    await state.update_data(prompt_message_id=prompt.message_id)

@router.message(AdminState.ROLES_ADD_ADMIN_ID)
async def process_add_admin_id(message: Message, state: FSMContext):
    user_id = await db_manager.find_user_by_identifier(message.text)
    await delete_and_clear_prompt(message, state)
    
    if not user_id:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=inline.get_roles_manage_menu())
        await state.clear()
        return
        
    if await db_manager.get_administrator(user_id):
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=inline.get_roles_manage_menu())
        await state.clear()
        return

    await state.update_data(new_admin_id=user_id)
    await state.set_state(AdminState.ROLES_ADD_ADMIN_ROLE)
    prompt = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=inline.get_role_selection_keyboard())
    await state.update_data(prompt_message_id=prompt.message_id)

@router.callback_query(F.data.startswith("roles_manage:set_role:"), AdminState.ROLES_ADD_ADMIN_ROLE)
async def process_add_admin_role(callback: CallbackQuery, state: FSMContext, bot: Bot):
    role = callback.data.split(":")[-1]
    data = await state.get_data()
    
    success = await db_manager.add_administrator(
        user_id=data['new_admin_id'],
        role=role,
        is_tester=False,
        added_by=callback.from_user.id
    )
    
    if success:
        await callback.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", show_alert=True)
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã ---
        await set_bot_commands(bot)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        
    await state.clear()
    await callback.message.delete()
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º list_admins —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ ---
    await list_admins(callback, bot)