# file: handlers/admin_panel.py

import asyncio
import logging
from math import ceil
from typing import Union

from aiogram import Bot, Dispatcher, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message

from config import Durations, Limits
from database import db_manager
from keyboards import inline
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã ---
from logic.admin_logic import (apply_fine_to_user, format_banned_user_page,
                               format_complaints_page, format_promo_code_page,
                               get_unban_requests_page, get_user_hold_info_logic,
                               process_unban_request_logic)
from states.user_states import AdminState
from utils.access_filters import IsAdmin, IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)


async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

async def delete_previous_messages(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass


# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ---

@router.message(Command("dnd"), IsAdmin())
async def toggle_dnd_mode(message: Message, state: FSMContext):
    try: await message.delete()
    except TelegramBadRequest: pass
    
    new_dnd_status = await db_manager.toggle_dnd_status(message.from_user.id)
    
    if new_dnd_status:
        response_text = "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    else:
        response_text = "‚òÄÔ∏è –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –í—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    
    msg = await message.answer(response_text)
    asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_ADMIN_REPLY_DELAY))
    await state.clear()

@router.message(Command("pending_tasks"), IsAdmin())
async def show_pending_tasks(message: Message, state: FSMContext):
    try: await message.delete()
    except TelegramBadRequest: pass
    
    tasks_count = await db_manager.get_pending_tasks_count()
    
    text = (
        "üì• <b>–ó–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:</b>\n\n"
        f"‚û°Ô∏è <b>–û—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:</b> {tasks_count['reviews']} —à—Ç.\n"
        f"‚û°Ô∏è <b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> {tasks_count['tickets']} —à—Ç.\n\n"
        "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.</i>"
    )
    
    msg = await message.answer(text)
    asyncio.create_task(schedule_message_deletion(msg, Durations.DELETE_INFO_MESSAGE_DELAY))
    await state.clear()
    
# --- –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–õ–ï–ù–ò–Ø /panel ---
@router.message(Command("panel"), IsSuperAdmin())
async def show_admin_panel(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è SuperAdmin."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await state.clear()
    await message.answer(
        "üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏—Ç–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=inline.get_admin_panel_keyboard()
    )

@router.callback_query(F.data == "panel:back_to_panel")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await state.clear()
    await callback.message.edit_text(
        "üõ†Ô∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ç–∏–ª–∏—Ç–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=inline.get_admin_panel_keyboard()
    )

# --- –ü–û–î–ú–ï–ù–Æ –í –ü–ê–ù–ï–õ–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
@router.callback_query(F.data.startswith("panel:"))
async def panel_actions(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    
    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏
    if action == "manage_bans":
        await callback.message.edit_text("<b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline.get_ban_management_keyboard())
    elif action == "ban_user":
        await state.set_state(AdminState.BAN_USER_IDENTIFIER)
        prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_bans"))
        await state.update_data(prompt_message_id=prompt.message_id)
    elif action == "ban_list":
        await state.set_state(AdminState.BAN_LIST_VIEW)
        await show_banned_users_page(callback, state, 1)
    
    # –ú–µ–Ω—é –∞–º–Ω–∏—Å—Ç–∏–∏ (–≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—é –±–∞–Ω–æ–≤)
    elif action == "manage_amnesty":
        await state.set_state(AdminState.AMNESTY_LIST_VIEW)
        await show_amnesty_page(callback, state, 1)

    # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    elif action == "manage_promos":
        await callback.message.edit_text("<b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline.get_promo_management_keyboard())
    elif action == "create_promo":
        await state.set_state(AdminState.PROMO_CODE_NAME)
        prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NEWYEAR2025).", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
        await state.update_data(prompt_message_id=prompt.message_id)
    elif action == "promo_list":
        await state.set_state(AdminState.PROMO_LIST_VIEW)
        await show_promo_codes_page(callback, state, 1)

    # –ú–µ–Ω—é –∂–∞–ª–æ–± (–≤–Ω—É—Ç—Ä–∏ —à—Ç—Ä–∞—Ñ–æ–≤)
    elif action == "view_complaints":
        await state.set_state(AdminState.COMPLAINTS_LIST_VIEW)
        await show_complaints_page(callback, state, 1)

    # –î—Ä—É–≥–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif action == "issue_fine":
        await state.set_state(AdminState.FINE_USER_ID)
        prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
        await state.update_data(prompt_message_id=prompt.message_id)
    elif action == "reset_cooldown":
        await state.set_state(AdminState.RESET_COOLDOWN_USER_ID)
        prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
        await state.update_data(prompt_message_id=prompt.message_id)
    elif action == "view_hold":
        await state.set_state(AdminState.VIEWHOLD_USER_ID)
        prompt = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Ö–æ–ª–¥–∞.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
        await state.update_data(prompt_message_id=prompt.message_id)
    
    await callback.answer()

async def show_banned_users_page(callback_or_message: Union[CallbackQuery, Message], state: FSMContext, page: int):
    users, total = await db_manager.get_banned_users(page=page), await db_manager.get_banned_users_count()
    total_pages = ceil(total / 6) if total > 0 else 1
    text = await format_banned_user_page(users, page, total_pages)
    markup = inline.get_pagination_keyboard("banlist:page", page, total_pages, back_callback="panel:manage_bans")

    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text, reply_markup=markup)
    else:
        await callback_or_message.answer(text, reply_markup=markup)


async def show_promo_codes_page(callback_or_message: Union[CallbackQuery, Message], state: FSMContext, page: int):
    promos, total = await db_manager.get_all_promo_codes(page=page), await db_manager.get_promo_codes_count()
    total_pages = ceil(total / 6) if total > 0 else 1
    text = await format_promo_code_page(promos, page, total_pages)
    markup = inline.get_promo_list_keyboard(page, total_pages)
    
    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text, reply_markup=markup)
    else:
        await callback_or_message.answer(text, reply_markup=markup)

async def show_amnesty_page(callback: CallbackQuery, state: FSMContext, page: int):
    requests, total = await db_manager.get_pending_unban_requests(page=page), await db_manager.get_pending_unban_requests_count()
    total_pages = ceil(total / 5) if total > 0 else 1
    text = await get_unban_requests_page(requests, page, total_pages)
    await callback.message.edit_text(text, reply_markup=inline.get_amnesty_keyboard(requests, page, total_pages))

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ---
async def show_complaints_page(callback: CallbackQuery, state: FSMContext, page: int):
    # –í–∞–∂–Ω–æ: —Ç–∞–±–ª–∏—Ü–∞ transfer_complaints –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–µ–π
    complaints, total = await db_manager.get_transfer_complaints(page=page)
    total_pages = ceil(total / 5) if total > 0 else 1
    text = await format_complaints_page(complaints, page, total_pages)
    await callback.message.edit_text(text, reply_markup=inline.get_complaints_keyboard(complaints, page, total_pages))

# --- –ü–†–û–ß–ò–ï –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ (–∏–∑ –ø–∞–Ω–µ–ª–∏) ---

@router.message(Command("reset_cooldown"), IsAdmin())
@router.message(AdminState.RESET_COOLDOWN_USER_ID, IsAdmin())
async def reset_cooldown_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    
    current_state = await state.get_state()
    if current_state == AdminState.RESET_COOLDOWN_USER_ID:
        await delete_previous_messages(message, state)

    identifier = None
    if message.text.startswith('/reset_cooldown'):
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/reset_cooldown ID_–∏–ª–∏_@username</code>"); return
        identifier = args[1]
    else:
        identifier = message.text

    user_id = await db_manager.find_user_by_identifier(identifier)
    if not user_id:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."); return

    if await db_manager.reset_user_cooldowns(user_id):
        user = await db_manager.get_user(user_id)
        username = f"@{user.username}" if user.username else f"ID: {user_id}"
        msg = await message.answer(f"‚úÖ –ö—É–ª–¥–∞—É–Ω—ã –¥–ª—è <i>{username}</i> —Å–±—Ä–æ—à–µ–Ω—ã.")
    else: 
        msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫—É–ª–¥–∞—É–Ω–æ–≤ –¥–ª—è <code>{identifier}</code>.")

    await state.clear()
    await schedule_message_deletion(msg, 7)
    await show_admin_panel(message, state)


@router.message(Command("viewhold"), IsAdmin())
@router.message(AdminState.VIEWHOLD_USER_ID, IsAdmin())
async def viewhold_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest: pass
    
    current_state = await state.get_state()
    if current_state == AdminState.VIEWHOLD_USER_ID:
        await delete_previous_messages(message, state)
    
    identifier = None
    if message.text.startswith('/viewhold'):
        args = message.text.split()
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /viewhold ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–∏–ª–∏_@username")
            return
        identifier = args[1]
    else:
        identifier = message.text

    response_text = await get_user_hold_info_logic(identifier)
    msg = await message.answer(response_text)
    await state.clear()
    await schedule_message_deletion(msg, 15)
    await show_admin_panel(message, state)

@router.message(AdminState.FINE_USER_ID, IsAdmin())
async def fine_user_get_id(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    user_id = await db_manager.find_user_by_identifier(message.text)
    if not user_id:
        prompt_msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{message.text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(target_user_id=user_id)
    prompt_msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
    await state.set_state(AdminState.FINE_AMOUNT)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.FINE_AMOUNT, IsAdmin())
async def fine_user_get_amount(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except (ValueError, TypeError):
        prompt_msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(fine_amount=amount)
    prompt_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —à—Ç—Ä–∞—Ñ–∞.", reply_markup=inline.get_cancel_inline_keyboard("panel:back_to_panel"))
    await state.set_state(AdminState.FINE_REASON)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.FINE_REASON, IsAdmin())
async def fine_user_get_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text: return
    await delete_previous_messages(message, state)
    data = await state.get_data()
    result_text = await apply_fine_to_user(data.get("target_user_id"), message.from_user.id, data.get("fine_amount"), message.text, bot)
    msg = await message.answer(result_text)
    await state.clear()
    await asyncio.sleep(5)
    await show_admin_panel(msg, state)

@router.message(AdminState.PROMO_CODE_NAME, IsSuperAdmin())
async def promo_name_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    promo_name = message.text.strip().upper()
    existing_promo = await db_manager.get_promo_by_code(promo_name)
    if existing_promo:
        prompt_msg = await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_name=promo_name)
    prompt_msg = await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
    await state.set_state(AdminState.PROMO_USES)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.PROMO_USES, IsSuperAdmin())
async def promo_uses_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    if not message.text.isdigit():
        prompt_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    uses = int(message.text)
    if uses <= 0:
        prompt_msg = await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_uses=uses)
    prompt_msg = await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {uses}.\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –∑–≤–µ–∑–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>25</code>).", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
    await state.set_state(AdminState.PROMO_REWARD)
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.PROMO_REWARD, IsSuperAdmin())
async def promo_reward_entered(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    try:
        reward = float(message.text.replace(',', '.'))
        if reward <= 0: raise ValueError
    except (ValueError, TypeError):
        prompt_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>10.5</code>).", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await state.update_data(promo_reward=reward)
    await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞–≥—Ä–∞–¥–∞: {reward} ‚≠ê.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.", reply_markup=inline.get_promo_condition_keyboard())
    await state.set_state(AdminState.PROMO_CONDITION)

@router.callback_query(F.data.startswith("promo_cond:"), AdminState.PROMO_CONDITION, IsSuperAdmin())
async def promo_condition_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    condition = callback.data.split(":")[1]
    data = await state.get_data()
    new_promo = await db_manager.create_promo_code(
        code=data['promo_name'], total_uses=data['promo_uses'],
        reward=data['promo_reward'], condition=condition
    )
    if new_promo and callback.message:
        await callback.message.edit_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{new_promo.code}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=inline.get_back_to_panel_keyboard("panel:manage_promos"))
    elif callback.message:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.", reply_markup=inline.get_back_to_panel_keyboard("panel:manage_promos"))
    await state.clear()
    
@router.message(AdminState.BAN_USER_IDENTIFIER, IsSuperAdmin())
async def ban_user_get_identifier(message: Message, state: FSMContext):
    if not message.text: return
    await delete_previous_messages(message, state)
    
    identifier = message.text.strip()
    user_id_to_ban = await db_manager.find_user_by_identifier(identifier)

    if not user_id_to_ban:
        prompt_msg = await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_bans"))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
        
    user_to_ban = await db_manager.get_user(user_id_to_ban)
    if user_to_ban.is_banned:
        msg = await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_to_ban.username} (<code>{user_id_to_ban}</code>) —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=inline.get_back_to_panel_keyboard("panel:manage_bans"))
        await state.clear()
        return

    await state.set_state(AdminState.BAN_REASON)
    await state.update_data(user_id_to_ban=user_id_to_ban)
    
    prompt_msg = await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_to_ban.username} (<code>{user_id_to_ban}</code>).", reply_markup=inline.get_cancel_inline_keyboard("panel:manage_bans"))
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.BAN_REASON, IsSuperAdmin())
async def ban_user_reason(message: Message, state: FSMContext, bot: Bot):
    if not message.text:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–º.")
        return
        
    await delete_previous_messages(message, state)
    data = await state.get_data()
    user_id_to_ban = data.get("user_id_to_ban")
    ban_reason = message.text

    success = await db_manager.ban_user(user_id_to_ban, ban_reason)
    if not success:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await state.clear()
        return

    try:
        user_notification = (
            f"‚ùóÔ∏è <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {ban_reason}\n\n"
            "–í–∞–º –∑–∞–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞. "
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–º–Ω–∏—Å—Ç–∏—é –∫–æ–º–∞–Ω–¥–æ–π /unban_request."
        )
        await bot.send_message(user_id_to_ban, user_notification)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_ban} –æ –±–∞–Ω–µ: {e}")

    msg = await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id_to_ban}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.", reply_markup=inline.get_back_to_panel_keyboard("panel:manage_bans"))
    await state.clear()


# --- –ë–õ–û–ö: –°–ü–ò–°–ö–ò –ó–ê–ë–ê–ù–ï–ù–ù–´–• –ò –ü–†–û–ú–û–ö–û–î–û–í ---

@router.callback_query(F.data.startswith("banlist:page:"), AdminState.BAN_LIST_VIEW, IsSuperAdmin())
async def banlist_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_banned_users_page(callback, state, page)

@router.callback_query(F.data.startswith("promolist:page:"), AdminState.PROMO_LIST_VIEW, IsSuperAdmin())
async def promolist_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_promo_codes_page(callback, state, page)

@router.callback_query(F.data == "promolist:delete_start", AdminState.PROMO_LIST_VIEW, IsSuperAdmin())
async def promo_delete_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.PROMO_DELETE_CONFIRM)
    prompt_msg = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.",
        reply_markup=inline.get_cancel_inline_keyboard("panel:manage_promos")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(AdminState.PROMO_DELETE_CONFIRM, IsSuperAdmin())
async def process_delete_promo_id(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    
    identifier = message.text.strip()
    promo_to_delete = None
    
    if identifier.isdigit():
        promo_id = int(identifier)
        promo_to_delete = await db_manager.get_promo_by_id(promo_id) 
    else:
        promo_to_delete = await db_manager.get_promo_by_code(identifier)

    if not promo_to_delete:
        await message.answer(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(AdminState.PROMO_LIST_VIEW)
        await show_promo_codes_page(message, state, 1)
        return

    success = await db_manager.delete_promo_code(promo_to_delete.id)
    if success:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{promo_to_delete.code}` –∏ –≤—Å–µ –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ `{promo_to_delete.code}`.")
        
    await state.set_state(AdminState.PROMO_LIST_VIEW)
    await show_promo_codes_page(message, state, 1)

# --- –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ú–ù–ò–°–¢–ò–Ø–ú–ò ---

@router.callback_query(F.data.startswith("amnesty:page:"), AdminState.AMNESTY_LIST_VIEW, IsSuperAdmin())
async def amnesty_pagination_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    page = int(callback.data.split(":")[2])
    await show_amnesty_page(callback, state, page)

@router.callback_query(F.data.startswith("amnesty:action:"), AdminState.AMNESTY_LIST_VIEW, IsSuperAdmin())
async def amnesty_action_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    _, action, request_id_str = callback.data.split(":")
    request_id = int(request_id_str)
    admin_id = callback.from_user.id

    success, message_text = await process_unban_request_logic(bot, request_id, action, admin_id)
    
    await callback.answer(message_text, show_alert=True)
    
    await show_amnesty_page(callback, state, 1)