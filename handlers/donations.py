# file: handlers/donations.py

import logging
import datetime
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import DonationStates
from keyboards import inline
from database import db_manager
from config import NOVICE_HELP_AMOUNT
from logic.user_notifications import format_timedelta

router = Router()
logger = logging.getLogger(__name__)

async def show_donation_menu(callback: CallbackQuery, bot: Bot):
    fund_balance_str = await db_manager.get_system_setting('donation_fund_balance')
    fund_balance = float(fund_balance_str) if fund_balance_str else 0.0
    top_donators = await db_manager.get_top_donators(limit=5)
    
    leaderboard_text = ""
    if not top_donators:
        leaderboard_text = "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π."
    else:
        emojis = ["ü•á", "ü•à", "ü•â", "4.", "5."]
        for i, (user_id, amount) in enumerate(top_donators):
            try:
                user_info = await bot.get_chat(user_id)
                display_name = f"@{user_info.username}" if user_info.username else f"{user_info.first_name}"
            except Exception:
                display_name = f"ID {user_id}"
            leaderboard_text += f"{emojis[i]} {display_name} - {amount:.2f} ‚≠ê\n"
            
    menu_text = (
        "üíñ **–§–æ–Ω–¥ –ü–æ–º–æ—â–∏ –ù–æ–≤–∏—á–∫–∞–º**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Å–≤–æ–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. "
        "–í–∞—à–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–¥—É—Ç –≤ –æ–±—â—É—é –∫–æ–ø–∏–ª–∫—É, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–æ–≤–∏—á–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
        f"–°–µ–π—á–∞—Å –≤ —Ñ–æ–Ω–¥–µ: **{fund_balance:.2f} ‚≠ê**\n\n"
        "**–î–æ—Å–∫–∞ –ü–æ—á–µ—Ç–∞ (—Ç–æ–ø-5 –º–µ—Ü–µ–Ω–∞—Ç–æ–≤):**\n"
        f"{leaderboard_text}"
    )
    
    await callback.message.edit_text(menu_text, reply_markup=inline.get_donation_menu_keyboard())

@router.callback_query(F.data == 'profile_donate')
async def donation_entry(callback: CallbackQuery, bot: Bot):
    await show_donation_menu(callback, bot)

@router.callback_query(F.data == 'make_donation')
async def make_donation_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DonationStates.waiting_for_donation_amount)
    prompt_msg = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤ –§–æ–Ω–¥ –ü–æ–º–æ—â–∏:",
        reply_markup=inline.get_cancel_inline_keyboard("profile_donate")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(DonationStates.waiting_for_donation_amount)
async def process_donation_amount(message: Message, state: FSMContext, bot: Bot):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    user = await db_manager.get_user(message.from_user.id)
    if not user or user.balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return
        
    await db_manager.process_donation(message.from_user.id, amount)
    
    await message.answer(f"üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ {amount:.2f} ‚≠ê! –í–∞—à–∞ –ø–æ–º–æ—â—å –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.")
    
    data = await state.get_data()
    if prompt_id := data.get("prompt_message_id"):
        try: await bot.delete_message(message.chat.id, prompt_id)
        except TelegramBadRequest: pass
    try: await message.delete()
    except TelegramBadRequest: pass
    
    await state.clear()
    
    dummy_callback_message = await message.answer("...")
    dummy_callback = CallbackQuery(id="dummy", from_user=message.from_user, chat_instance="", message=dummy_callback_message)
    await show_donation_menu(dummy_callback, bot)
    await dummy_callback_message.delete()

@router.callback_query(F.data == 'get_daily_help')
async def get_daily_help(callback: CallbackQuery, bot: Bot):
    user = await db_manager.get_user(callback.from_user.id)
    
    if not user or user.first_task_completed:
        await callback.answer("–í—ã —É–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫ –∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ! üéâ", show_alert=True)
        return

    if user.last_help_request_at and (datetime.datetime.utcnow() - user.last_help_request_at) < datetime.timedelta(hours=24):
        remaining = (user.last_help_request_at + datetime.timedelta(hours=24)) - datetime.datetime.utcnow()
        await callback.answer(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø–æ–º–æ—â—å —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {format_timedelta(remaining)}.", show_alert=True)
        return
        
    success = await db_manager.process_help_request(user.id, NOVICE_HELP_AMOUNT)
    
    if success:
        await callback.answer(f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {NOVICE_HELP_AMOUNT} ‚≠ê –∏–∑ –§–æ–Ω–¥–∞ –ü–æ–º–æ—â–∏!", show_alert=True)
        await bot.send_message(user.id, "–°–ª–µ–¥—É—é—â–∞—è –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
    else:
        await callback.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –§–æ–Ω–¥–µ –ü–æ–º–æ—â–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)