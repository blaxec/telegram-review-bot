# handlers/games/coinflip.py
# (–ù–æ–≤—ã–π —Ñ–∞–π–ª)

import logging
import random
import asyncio
from aiogram import Router, F, Bot, bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import CoinflipStates
from keyboards import inline
from database import db_manager

router = Router()
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã "–û—Ä—ë–ª –∏ –†–µ—à–∫–∞" ---

@router.message(F.text == 'üé≤ –ò–≥—Ä—ã')
async def games_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=inline.get_games_menu_keyboard())

@router.callback_query(F.data == "back_to_games_menu")
async def back_to_games_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=inline.get_games_menu_keyboard())

@router.callback_query(F.data == "start_coinflip")
async def start_coinflip(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CoinflipStates.waiting_for_bet)
    user = await db_manager.get_user(callback.from_user.id)
    win_streak_text = f"\n\nüî• –í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {user.win_streak}" if user and user.win_streak > 0 else ""
    
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–û—Ä—ë–ª –∏ –†–µ—à–∫–∞'! –ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å? "
        "–£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –∫–æ–º–∏—Å—Å–∏–µ–π 5%." + win_streak_text,
        reply_markup=inline.get_coinflip_bet_keyboard()
    )

async def process_bet(callback: CallbackQuery, state: FSMContext, amount: float):
    user = await db_manager.get_user(callback.from_user.id)
    if not user or user.balance < amount:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
        return

    await state.update_data(current_bet_amount=amount)
    await state.set_state(CoinflipStates.waiting_for_choice)
    await callback.message.edit_text(
        f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {amount:.2f} ‚≠ê. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:",
        reply_markup=inline.get_coinflip_choice_keyboard()
    )

@router.callback_query(F.data.startswith("bet_"), CoinflipStates.waiting_for_bet)
async def handle_fixed_bet(callback: CallbackQuery, state: FSMContext):
    amount = float(callback.data.split("_")[1])
    await process_bet(callback, state, amount)

@router.callback_query(F.data == "custom_bet", CoinflipStates.waiting_for_bet)
async def handle_custom_bet_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CoinflipStates.waiting_for_custom_bet)
    prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50.5):", reply_markup=inline.get_cancel_inline_keyboard("start_coinflip"))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(CoinflipStates.waiting_for_custom_bet)
async def handle_custom_bet_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    user = await db_manager.get_user(message.from_user.id)
    if not user or user.balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return

    data = await state.get_data()
    prompt_id = data.get("prompt_message_id")
    if prompt_id:
        try: await bot.delete_message(message.chat.id, prompt_id)
        except: pass
    await message.delete()

    # –ò–º–∏—Ç–∏—Ä—É–µ–º callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—â—É—é –ª–æ–≥–∏–∫—É
    dummy_callback = CallbackQuery(id="dummy", from_user=message.from_user, chat_instance="", message=await message.answer("..."))
    await process_bet(dummy_callback, state, amount)
    await dummy_callback.message.delete()


@router.callback_query(F.data.startswith("choice_"), CoinflipStates.waiting_for_choice)
async def handle_coinflip_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_choice = "–û—Ä—ë–ª" if callback.data == "choice_eagle" else "–†–µ—à–∫–∞"
    data = await state.get_data()
    bet_amount = data.get("current_bet_amount")

    if not bet_amount:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await state.clear()
        await start_coinflip(callback, state)
        return

    user = await db_manager.get_user(callback.from_user.id)
    win_streak = user.win_streak if user else 0

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É
    if 1 <= bet_amount <= 50: win_chance = 50
    elif 51 <= bet_amount <= 500: win_chance = 30
    else: win_chance = 10

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    is_win = random.randint(1, 100) <= win_chance
    is_lucky_coin = random.randint(1, 100) <= 2

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ–º–±–æ
    combo_multiplier = 1.0
    if win_streak >= 5: combo_multiplier = 1.10
    elif win_streak >= 3: combo_multiplier = 1.05

    # –ê–Ω–∏–º–∞—Ü–∏—è
    final_side = user_choice if is_win else ("–†–µ—à–∫–∞" if user_choice == "–û—Ä—ë–ª" else "–û—Ä—ë–ª")
    await callback.message.edit_text("–ú–æ–Ω–µ—Ç–∫–∞ –≤ –≤–æ–∑–¥—É—Ö–µ...")
    await asyncio.sleep(1.5)

    result_text = ""
    if is_win:
        new_win_streak = win_streak + 1
        base_win = bet_amount * 0.95
        combo_win = base_win * combo_multiplier
        final_win = combo_win * 2 if is_lucky_coin else combo_win
        total_change = final_win - bet_amount

        result_text = f"–í—ã–ø–∞–ª {final_side}! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n"
        if is_lucky_coin: result_text += "‚ú® **–°—á–∞—Å—Ç–ª–∏–≤–∞—è –º–æ–Ω–µ—Ç–∫–∞! –í–∞—à –≤—ã–∏–≥—Ä—ã—à —É–¥–≤–æ–µ–Ω!**\n"
        if combo_multiplier > 1.0: result_text += f"üî• **–ö–æ–º–±–æ!** –í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥ ({win_streak}) –¥–∞–µ—Ç –±–æ–Ω—É—Å +{int((combo_multiplier-1)*100)}%!\n"
        result_text += f"–ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–∏–≥—Ä—ã—à: **{final_win:.2f} ‚≠ê**\n–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: **{new_win_streak}**"
        
        await db_manager.update_user_balance_and_streak(user.id, total_change, new_win_streak)

    else:
        new_win_streak = 0
        total_change = -bet_amount
        result_text = f"–í—ã–ø–∞–ª {final_side}! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount:.2f} ‚≠ê...\n–í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥ —Å–±—Ä–æ—à–µ–Ω–∞."
        await db_manager.update_user_balance_and_streak(user.id, total_change, new_win_streak)

    await state.set_state(CoinflipStates.waiting_for_bet)
    await callback.message.edit_text(result_text, reply_markup=inline.get_coinflip_bet_keyboard(play_again=True))