# file: handlers/games/coinflip.py

import logging
import random
import asyncio
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from typing import Union

from states.user_states import CoinflipStates
from keyboards import inline
from database import db_manager

router = Router()
logger = logging.getLogger(__name__)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä—ã "–û—Ä—ë–ª –∏ –†–µ—à–∫–∞" ---

@router.message(F.text == 'üé≤ –ò–≥—Ä—ã')
async def games_menu(message: Message):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=inline.get_games_menu_keyboard())

@router.callback_query(F.data == "back_to_games_menu")
async def back_to_games_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=inline.get_games_menu_keyboard())

@router.callback_query(F.data == "start_coinflip")
async def start_coinflip(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CoinflipStates.waiting_for_bet)
    user = await db_manager.get_user(callback.from_user.id)
    win_streak_text = f"\n\nüî• –í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: {user.win_streak}" if user and user.win_streak > 0 else ""
    
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    
    await callback.message.edit_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–û—Ä—ë–ª –∏ –†–µ—à–∫–∞'!\n–í–∞—à –±–∞–ª–∞–Ω—Å: **{balance:.2f} ‚≠ê**\n\n"
        "–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å? "
        "–£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤—ã–∏–≥—Ä—ã—à —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è." + win_streak_text,
        reply_markup=inline.get_coinflip_bet_keyboard(win_streak=user.win_streak if user else 0)
    )

async def process_bet(message: Message, state: FSMContext, amount: float):
    user_id = message.chat.id
    user = await db_manager.get_user(user_id)
    if not user or user.balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Å—Ç–∞–≤–æ–∫
        dummy_callback = CallbackQuery(id="dummy", from_user=message.from_user, chat_instance="", message=message)
        await start_coinflip(dummy_callback, state)
        return

    await state.update_data(current_bet_amount=amount)
    await state.set_state(CoinflipStates.waiting_for_choice)
    
    await message.edit_text(
        f"–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: **{amount:.2f} ‚≠ê**. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É:",
        reply_markup=inline.get_coinflip_choice_keyboard()
    )

@router.callback_query(F.data.startswith("bet_"), CoinflipStates.waiting_for_bet)
async def handle_fixed_bet(callback: CallbackQuery, state: FSMContext):
    amount = float(callback.data.split("_")[1])
    await process_bet(callback.message, state, amount)

@router.callback_query(F.data == "custom_bet", CoinflipStates.waiting_for_bet)
async def handle_custom_bet_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CoinflipStates.waiting_for_custom_bet)
    prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50.5):", reply_markup=inline.get_cancel_inline_keyboard("start_coinflip"))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(CoinflipStates.waiting_for_custom_bet)
async def handle_custom_bet_input(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    prompt_id = data.get("prompt_message_id")

    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        await message.delete()
        return

    await message.delete()
    if prompt_id:
        try:
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            await bot.edit_message_text(chat_id=message.chat.id, message_id=prompt_id, text="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Message –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
            editable_message = Message(message_id=prompt_id, chat=message.chat, bot=bot)
            await process_bet(editable_message, state, amount)
        except TelegramBadRequest:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            new_msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
            await process_bet(new_msg, state, amount)
    else:
        new_msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        await process_bet(new_msg, state, amount)


@router.callback_query(F.data.startswith("choice_"), CoinflipStates.waiting_for_choice)
async def handle_coinflip_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    user_choice = "–û—Ä—ë–ª" if callback.data == "choice_eagle" else "–†–µ—à–∫–∞"
    data = await state.get_data()
    bet_amount = data.get("current_bet_amount")

    if not bet_amount:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await state.clear()
        await start_coinflip(callback, state)
        return

    user = await db_manager.get_user(callback.from_user.id)
    win_streak = user.win_streak if user else 0

    is_win = random.choice([True, False])
    
    final_side = user_choice if is_win else ("–†–µ—à–∫–∞" if user_choice == "–û—Ä—ë–ª" else "–û—Ä—ë–ª")
    await callback.message.edit_text("–ú–æ–Ω–µ—Ç–∫–∞ –≤ –≤–æ–∑–¥—É—Ö–µ...")
    await asyncio.sleep(1.5)

    result_text = ""
    if is_win:
        new_win_streak = win_streak + 1
        win_amount = bet_amount 
        
        await db_manager.update_user_balance_and_streak(user.id, win_amount, new_win_streak)
        new_balance = user.balance + win_amount

        result_text = f"–í—ã–ø–∞–ª **{final_side}**! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n"
        result_text += f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à: **{win_amount:.2f} ‚≠ê**\n–ù–æ–≤–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: **{new_win_streak}**"

    else:
        new_win_streak = 0
        loss_amount = -bet_amount
        await db_manager.update_user_balance_and_streak(user.id, loss_amount, new_win_streak)
        new_balance = user.balance + loss_amount

        result_text = f"–í—ã–ø–∞–ª **{final_side}**! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ **{bet_amount:.2f} ‚≠ê**...\n–í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥ —Å–±—Ä–æ—à–µ–Ω–∞."

    await state.set_state(CoinflipStates.waiting_for_bet)
    
    win_streak_text = f"\n\nüî• –í–∞—à–∞ —Å–µ—Ä–∏—è –ø–æ–±–µ–¥: **{new_win_streak}**" if new_win_streak > 0 else ""
    balance_text = f"\n–í–∞—à –±–∞–ª–∞–Ω—Å: **{new_balance:.2f} ‚≠ê**"
    
    result_text += balance_text + win_streak_text
    
    await callback.message.edit_text(
        result_text, 
        reply_markup=inline.get_coinflip_bet_keyboard(play_again=True, win_streak=new_win_streak)
    )