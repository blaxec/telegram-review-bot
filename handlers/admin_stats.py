# file: handlers/admin_stats.py

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from database import db_manager
from keyboards import inline
from utils.access_filters import IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("stats_admin"), IsSuperAdmin())
async def get_admin_stats(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫—É."""
    try:
        await message.delete()
    except:
        pass

    stats = await db_manager.get_extended_admin_stats()

    text = (
        "üìà **–ë–∏–∑–Ω–µ—Å-–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
        "**–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:**\n"
        f" ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: `{stats['reviews_today']}`\n"
        f" ‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: `{stats['reviews_7_days']}`\n"
        f" ‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: `{stats['reviews_30_days']}`\n\n"
        "**–í—ã–ø–ª–∞—Ç—ã –∑–∞ –æ—Ç–∑—ã–≤—ã:**\n"
        f" ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: `{stats['paid_today']:.2f} ‚≠ê`\n"
        f" ‚Ä¢ –ó–∞ 7 –¥–Ω–µ–π: `{stats['paid_7_days']:.2f} ‚≠ê`\n"
        f" ‚Ä¢ –ó–∞ 30 –¥–Ω–µ–π: `{stats['paid_30_days']:.2f} ‚≠ê`\n\n"
        f"**–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–∑—ã–≤ (30 –¥–Ω):** `{stats['avg_reward']:.2f} ‚≠ê`\n\n"
        "**üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (30 –¥–Ω):**\n"
        f"{stats['top_5_active']}\n\n"
        "**‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ '–≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞' (30 –¥–Ω):**\n"
        f"{stats['top_5_rejected']}"
    )
    await message.answer(text, reply_markup=inline.get_close_post_keyboard())

@router.message(Command("campaigns"), IsSuperAdmin())
async def list_campaigns(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    try:
        await message.delete()
    except:
        pass
    
    tags = await db_manager.get_all_campaign_tags()
    if not tags:
        await message.answer("–ö–∞–º–ø–∞–Ω–∏–∏ —Å —Ç–µ–≥–∞–º–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å.", reply_markup=inline.get_close_post_keyboard())
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=inline.get_campaign_list_keyboard(tags))

@router.callback_query(F.data.startswith("campaign_stats:"))
async def show_campaign_stats(callback: CallbackQuery):
    tag = callback.data.split(":", 1)[1]
    stats = await db_manager.get_stats_for_campaign(tag)

    if not stats:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏.", show_alert=True)
        return

    text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏: `{tag}`**\n\n"
        f"–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: `{stats.get('total', 0)}`\n\n"
        f"üü¢ –î–æ—Å—Ç—É–ø–Ω–æ: `{stats.get('available', 0)}`\n"
        f"üü° –í —Ä–∞–±–æ—Ç–µ: `{stats.get('assigned', 0)}`\n"
        f"üî¥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{stats.get('used', 0)}`\n"
        f"‚ö´ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: `{stats.get('expired', 0)}`"
    )

    await callback.message.edit_text(text, reply_markup=inline.get_back_to_campaigns_keyboard())
    await callback.answer()

@router.callback_query(F.data == "back_to_campaigns")
async def back_to_campaign_list(callback: CallbackQuery):
    tags = await db_manager.get_all_campaign_tags()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=inline.get_campaign_list_keyboard(tags))