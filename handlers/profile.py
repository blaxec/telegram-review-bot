# file: handlers/profile.py

import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, User
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState
from keyboards import inline, reply
from database import db_manager
from config import WITHDRAWAL_CHANNEL_ID, Limits, Rewards

router = Router()
logger = logging.getLogger(__name__)

async def delete_previous_messages(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass

# --- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

async def show_profile_menu(message_or_callback: Message | CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    await state.set_state(UserState.MAIN_MENU)
    user_id = message_or_callback.from_user.id
    
    await db_manager.ensure_user_exists(user_id, message_or_callback.from_user.username)
    
    user = await db_manager.get_user(user_id)
    if not user:
        await message_or_callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return

    balance, hold_balance = user.balance, user.hold_balance
    referrer_info = await db_manager.get_referrer_info(user_id)
    
    profile_text = (
        f"‚ú® –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å ‚ú®\n\n"
        f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer_info}\n"
        f"–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {balance} ‚≠ê\n"
        f"–í —Ö–æ–ª–¥–µ: {hold_balance} ‚≠ê"
    )
    
    keyboard = inline.get_profile_keyboard()
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(profile_text, reply_markup=keyboard)
    else: 
        try:
            if message_or_callback.message:
                await message_or_callback.message.edit_text(profile_text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                try:
                    await message_or_callback.answer()
                except TelegramBadRequest:
                    pass
            else:
                try:
                    if message_or_callback.message:
                        await message_or_callback.message.delete()
                except TelegramBadRequest:
                    pass
                if message_or_callback.message:
                    await message_or_callback.message.answer(profile_text, reply_markup=keyboard)


@router.message(Command("stars"))
@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', UserState.MAIN_MENU)
async def profile_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await show_profile_menu(message, state)

@router.callback_query(F.data == 'go_profile')
async def go_profile_handler(callback: CallbackQuery, state: FSMContext):
    await show_profile_menu(callback, state)


# --- –ü–æ–¥–º–æ–¥—É–ª—å: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤–µ–∑–¥ ---

@router.callback_query(F.data == 'profile_transfer')
async def initiate_transfer(callback: CallbackQuery, state: FSMContext, **kwargs):
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    
    try:
        balance = float(balance)
    except (ValueError, TypeError):
        balance = 0.0

    if balance < 0:
        await callback.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π. –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤–µ–∑–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–≥–∞—Å–∏—Ç–µ –¥–æ–ª–≥.", show_alert=True)
        return
        
    if balance < Limits.MIN_TRANSFER_AMOUNT:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º {Limits.MIN_TRANSFER_AMOUNT} ‚≠ê).", show_alert=True)
        return

    await state.set_state(UserState.TRANSFER_AMOUNT_OTHER)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å?",
            reply_markup=inline.get_cancel_inline_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

async def process_transfer_amount(amount: float, message: Message, state: FSMContext):
    balance, _ = await db_manager.get_user_balance(message.from_user.id)
    if amount > float(balance):
        prompt_msg = await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.update_data(transfer_amount=amount)
    await state.set_state(UserState.TRANSFER_RECIPIENT)
    prompt_msg = await message.answer(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã? –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.TRANSFER_AMOUNT_OTHER)
async def transfer_other_amount_input(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text: return
    try:
        amount = float(message.text)
        if amount < Limits.MIN_TRANSFER_AMOUNT: raise ValueError
    except (ValueError, TypeError):
        prompt_msg = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º {Limits.MIN_TRANSFER_AMOUNT}).")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    await process_transfer_amount(amount, message, state)

@router.message(UserState.TRANSFER_RECIPIENT)
async def process_transfer_recipient(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text: return
    recipient_id = await db_manager.find_user_by_identifier(message.text)
    if not recipient_id or recipient_id == message.from_user.id:
        prompt_msg = await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã —Å–µ–±–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.update_data(recipient_id=recipient_id)
    await state.set_state(UserState.TRANSFER_SHOW_MY_NICK)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ? –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç, –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–∏ –∑–≤–µ–∑–¥—ã.",
        reply_markup=inline.get_transfer_show_nick_keyboard()
    )

@router.callback_query(F.data.in_({'transfer_show_nick_yes', 'transfer_show_nick_no'}), UserState.TRANSFER_SHOW_MY_NICK)
async def process_transfer_show_nick(callback: CallbackQuery, state: FSMContext):
    show_nick = callback.data == 'transfer_show_nick_yes'
    await state.update_data(show_nick=show_nick)
    await state.set_state(UserState.TRANSFER_ASK_COMMENT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–¥–∞—á–µ?",
            reply_markup=inline.get_ask_comment_keyboard(prefix='transfer')
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data == 'transfer_ask_comment_no', UserState.TRANSFER_ASK_COMMENT)
async def process_transfer_no_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.message:
        await callback.message.delete()
    await finish_transfer(callback.from_user, state, bot, comment=None)

@router.callback_query(F.data == 'transfer_ask_comment_yes', UserState.TRANSFER_ASK_COMMENT)
async def process_transfer_yes_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.TRANSFER_COMMENT_INPUT)
    if callback.message:
        prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.TRANSFER_COMMENT_INPUT)
async def process_transfer_comment_input(message: Message, state: FSMContext, bot: Bot):
    await delete_previous_messages(message, state)
    if not message.text: return
    await finish_transfer(message.from_user, state, bot, comment=message.text)

async def finish_transfer(user, state: FSMContext, bot: Bot, comment: str | None):
    data = await state.get_data()
    sender_id = user.id
    sender_username = user.username
    
    success = await db_manager.transfer_stars(
        sender_id=sender_id,
        recipient_id=data['recipient_id'],
        amount=data['transfer_amount']
    )

    if success:
        sender_name = f"@{sender_username}" if data['show_nick'] else "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        notification_text = (
            f"‚ú® –í–∞–º –ø–µ—Ä–µ–¥–∞–Ω—ã –∑–≤–µ–∑–¥—ã ‚ú®\n\n"
            f"–û—Ç: {sender_name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['transfer_amount']} ‚≠ê"
        )
        if comment:
            notification_text += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
        
        try:
            await bot.send_message(data['recipient_id'], notification_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–µ—Ä–µ–≤–æ–¥–µ {data['recipient_id']}: {e}")

        await bot.send_message(sender_id, "–ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã!", reply_markup=reply.get_main_menu_keyboard())
    else:
        await bot.send_message(sender_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=reply.get_main_menu_keyboard())

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


# --- –ü–æ–¥–º–æ–¥—É–ª—å: –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥ ---

@router.callback_query(F.data == 'profile_withdraw')
async def initiate_withdraw(callback: CallbackQuery, state: FSMContext, **kwargs):
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    
    try:
        balance = float(balance)
    except (ValueError, TypeError):
        balance = 0.0
    
    if balance < 0:
        await callback.answer("–í–∞—à –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π. –í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–≥–∞—Å–∏—Ç–µ –¥–æ–ª–≥.", show_alert=True)
        return

    if balance < Limits.MIN_WITHDRAWAL_AMOUNT:
        await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {Limits.MIN_WITHDRAWAL_AMOUNT} –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê.", show_alert=True)
        return
    
    if not WITHDRAWAL_CHANNEL_ID:
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–ø–ª–∞—Ç.", show_alert=True)
        logger.warning("Attempted to withdraw, but WITHDRAWAL_CHANNEL_ID is not set.")
        return

    await state.set_state(UserState.WITHDRAW_AMOUNT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?",
            reply_markup=inline.get_withdraw_amount_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data.startswith('withdraw_amount_'), UserState.WITHDRAW_AMOUNT)
async def withdraw_predefined_amount(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    amount_str = callback.data.split('_')[-1]
    
    if amount_str == 'other':
        await state.set_state(UserState.WITHDRAW_AMOUNT_OTHER)
        if callback.message:
            prompt_msg = await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º {Limits.MIN_WITHDRAWAL_AMOUNT}):", reply_markup=inline.get_cancel_inline_keyboard())
            if prompt_msg:
                await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    amount = float(amount_str)
    
    balance, _ = await db_manager.get_user_balance(user_id)
    if float(balance) < amount:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê", show_alert=True)
        return

    await state.update_data(withdraw_amount=amount)
    await state.set_state(UserState.WITHDRAW_RECIPIENT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?",
            reply_markup=inline.get_withdraw_recipient_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_AMOUNT_OTHER)
async def withdraw_other_amount_input(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text: return
    try:
        amount = float(message.text)
        if amount < Limits.MIN_WITHDRAWAL_AMOUNT:
            prompt_msg = await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - {Limits.MIN_WITHDRAWAL_AMOUNT} –∑–≤–µ–∑–¥.")
            await state.update_data(prompt_message_id=prompt_msg.message_id)
            return
    except (ValueError, TypeError):
        prompt_msg = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    balance, _ = await db_manager.get_user_balance(message.from_user.id)
    if float(balance) < amount:
        prompt_msg = await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠ê")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.update_data(withdraw_amount=amount)
    await state.set_state(UserState.WITHDRAW_RECIPIENT)
    prompt_msg = await message.answer(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?",
        reply_markup=inline.get_withdraw_recipient_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    
async def _create_and_notify_withdrawal(user: User, amount: float, recipient_info: str, comment: str | None, bot: Bot, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
    request_id = await db_manager.create_withdrawal_request(user.id, amount, recipient_info, comment)

    if request_id is None:
        await bot.send_message(user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await state.set_state(UserState.MAIN_MENU)
        return

    admin_message = (
        f"üö® **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!** üö®\n\n"
        f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** @{user.username} (ID: `{user.id}`)\n"
        f"üí∞ **–°—É–º–º–∞:** {amount} ‚≠ê\n"
        f"üéØ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {recipient_info}\n"
    )
    if comment:
        admin_message += f"üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {comment}\n"
    
    admin_message += f"\n*–ó–∞–ø—Ä–æ—Å ID: `{request_id}`*"

    try:
        await bot.send_message(
            chat_id=WITHDRAWAL_CHANNEL_ID,
            text=admin_message,
            parse_mode="Markdown",
            reply_markup=inline.get_admin_withdrawal_keyboard(request_id)
        )
        await bot.send_message(user.id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"Failed to send withdrawal request to channel {WITHDRAWAL_CHANNEL_ID}: {e}", exc_info=True)
        await bot.send_message(user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await db_manager.update_balance(user.id, amount)
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)

@router.callback_query(F.data.startswith('withdraw_recipient_'), UserState.WITHDRAW_RECIPIENT)
async def process_withdraw_recipient(callback: CallbackQuery, state: FSMContext, bot: Bot):
    recipient_type = callback.data.split('_')[-1]
    data = await state.get_data()
    amount = data['withdraw_amount']
    
    if callback.message:
        await callback.message.delete()

    if recipient_type == 'self':
        await _create_and_notify_withdrawal(callback.from_user, amount, "–°–µ–±–µ", None, bot, state)
    elif recipient_type == 'other':
        await state.set_state(UserState.WITHDRAW_USER_ID)
        prompt_msg = await bot.send_message(
            callback.from_user.id,
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.",
            reply_markup=inline.get_cancel_inline_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_USER_ID)
async def process_withdraw_user_id(message: Message, state: FSMContext):
    await delete_previous_messages(message, state)
    if not message.text: return
    recipient_id = await db_manager.find_user_by_identifier(message.text)
    if not recipient_id or recipient_id == message.from_user.id:
        prompt_msg = await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–±–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
        
    await state.update_data(withdraw_recipient_id=recipient_id)
    await state.set_state(UserState.WITHDRAW_ASK_COMMENT)
    prompt_msg = await message.answer(
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–∞—Ä–∫—É?",
        reply_markup=inline.get_ask_comment_keyboard(prefix='withdraw')
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data == 'withdraw_ask_comment_no', UserState.WITHDRAW_ASK_COMMENT)
async def process_withdraw_no_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.message:
        await callback.message.delete()
    await finish_withdraw(callback.from_user, state, bot, comment=None)

@router.callback_query(F.data == 'withdraw_ask_comment_yes', UserState.WITHDRAW_ASK_COMMENT)
async def process_withdraw_yes_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.WITHDRAW_COMMENT_INPUT)
    if callback.message:
        prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–∞—Ä–∫—É:")
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_COMMENT_INPUT)
async def process_withdraw_comment_input(message: Message, state: FSMContext, bot: Bot):
    await delete_previous_messages(message, state)
    if not message.text: return
    await finish_withdraw(message.from_user, state, bot, comment=message.text)

async def finish_withdraw(user: User, state: FSMContext, bot: Bot, comment: str | None):
    data = await state.get_data()
    amount = data['withdraw_amount']
    recipient_id = data.get('withdraw_recipient_id')
    
    recipient_user = await db_manager.get_user(recipient_id)
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {recipient_id}"

    await _create_and_notify_withdrawal(user, amount, recipient_info, comment, bot, state)


# --- –ü–æ–¥–º–æ–¥—É–ª—å: "–†–µ—Ñ. —Å—Å—ã–ª–∫–∞" –∏ "–•–æ–ª–¥" ---

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—É—Ç—å.
# –ï—Å–ª–∏ –Ω–µ—Ç, –æ–Ω –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω. –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ handlers/referral.py
@router.callback_query(F.data == 'profile_referral')
async def show_referral_info(callback: CallbackQuery, state: FSMContext, bot: Bot, **kwargs):
    user_id = callback.from_user.id
    user = await db_manager.get_user(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –ø—É—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.
    # –≠—Ç–æ—Ç callback —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handlers.referral
    if not user or not user.referral_path:
        # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ—ç—Ç–æ–º—É –¥—É–±–ª–∏—Ä—É–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ callback, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ referral.py
        # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º callback.answer() –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
        # —Ç–∞–∫ –∫–∞–∫ router –≤ main.py –ø–µ—Ä–µ–¥–∞—Å—Ç —ç—Ç–æ—Ç callback –¥–∞–ª—å—à–µ –≤ referral.router
        logger.info(f"User {user_id} has no referral path. Passing callback to referral handler.")
        # –ß—Ç–æ–±—ã —ç—Ç–æ—Ç callback –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è –≤ –¥—Ä—É–≥–æ–º —Ä–æ—É—Ç–µ—Ä–µ, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª.
        # –ü–æ—ç—Ç–æ–º—É –º—ã –µ–≥–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –æ—Ç—Å—é–¥–∞, –∞ –≤ referral.py —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —Ç–∞–∫–∏–º –∂–µ —Ñ–∏–ª—å—Ç—Ä–æ–º.
        # –≠—Ç–æ—Ç –∫–æ–¥ –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω.
        pass

# –ù–æ–≤–∞—è, –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
@router.callback_query(F.data == 'profile_referrals_list')
async def show_referrals_list(callback: CallbackQuery, state: FSMContext, **kwargs):
    referrals = await db_manager.get_referrals(callback.from_user.id)
    if not referrals:
        text = "ü§ù –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤."
    else:
        text = f"ü§ù –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n–£ –≤–∞—Å {len(referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n–°–ø–∏—Å–æ–∫:\n" + "\n".join([f"- @{username}" for username in referrals if username])
    
    if callback.message:
        try:
            await callback.message.edit_text(text, reply_markup=inline.get_back_to_referral_menu_keyboard())
        except TelegramBadRequest:
            pass


@router.callback_query(F.data == 'profile_claim_referral_stars')
async def claim_referral_stars(callback: CallbackQuery, state: FSMContext, bot: Bot, **kwargs):
    user_id = callback.from_user.id
    earnings = await db_manager.get_referral_earnings(user_id)
    if earnings > 0:
        await db_manager.claim_referral_earnings(user_id)
        await callback.answer(f"{earnings} ‚≠ê –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å!", show_alert=True)
        
        # –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        # –≠—Ç–æ—Ç callback —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handlers.referral
        from handlers.referral import show_selected_referral_path 
        await show_selected_referral_path(callback, bot)

    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞.", show_alert=True)

@router.callback_query(F.data == 'profile_hold')
async def show_hold_info(callback: CallbackQuery, state: FSMContext, **kwargs):
    reviews_in_hold = await db_manager.get_user_hold_reviews(callback.from_user.id)
    if not reviews_in_hold:
        text = "‚è≥ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ:\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ."
    else:
        text = "‚è≥ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ:\n\n"
        review_lines = [f"- {review.amount} ‚≠ê ({review.platform}) –¥–æ {review.hold_until.strftime('%d.%m.%Y %H:%M')} UTC" for review in reviews_in_hold]
        text += "\n".join(review_lines)
    
    if callback.message:
        try:
            await callback.message.edit_text(text, reply_markup=inline.get_back_to_profile_keyboard())
        except TelegramBadRequest:
            pass