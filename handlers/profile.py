# file: handlers/profile.py

import logging
import json
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, User, InputMediaPhoto, InputMediaVideo, InputMediaAnimation
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState
from keyboards import inline, reply
from database import db_manager
from config import WITHDRAWAL_CHANNEL_ID, Limits, TRANSFER_COMMISSION_PERCENT, SUPER_ADMIN_ID
from logic.user_notifications import format_timedelta

router = Router()
logger = logging.getLogger(__name__)

async def delete_prompt_message(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
            await state.update_data(prompt_message_id=None)
        except TelegramBadRequest:
            pass

# --- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---
async def show_profile_menu(message_or_callback: Message | CallbackQuery, state: FSMContext, bot: Bot):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    await state.set_state(UserState.MAIN_MENU)
    user_id = message_or_callback.from_user.id
    
    await db_manager.ensure_user_exists(user_id, message_or_callback.from_user.username)
    
    user = await db_manager.get_user(user_id)
    if not user:
        # –í —Å–ª—É—á–∞–µ —Å–±–æ—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return

    balance, hold_balance = user.balance, user.hold_balance
    referrer_info = await db_manager.get_referrer_info(user_id)
    
    profile_text = (
        f"‚ú® –í–∞—à <b>–ü—Ä–æ—Ñ–∏–ª—å</b> ‚ú®\n\n"
        f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer_info}\n"
        f"–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {balance:.2f} ‚≠ê\n"
        f"–í —Ö–æ–ª–¥–µ: {hold_balance:.2f} ‚≠ê"
    )
    
    keyboard = inline.get_profile_keyboard()
    
    is_message = isinstance(message_or_callback, Message)
    target_message = message_or_callback if is_message else message_or_callback.message

    if not target_message: return

    if is_message:
        await target_message.answer(profile_text, reply_markup=keyboard)
    else:
        try:
            await target_message.edit_text(profile_text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Could not edit profile message, sending new. Error: {e}")
                await target_message.delete()
                await bot.send_message(chat_id=target_message.chat.id, text=profile_text, reply_markup=keyboard)
            await message_or_callback.answer()


@router.message(Command("stars"))
@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', UserState.MAIN_MENU)
async def profile_handler(message: Message, state: FSMContext, bot: Bot):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await show_profile_menu(message, state, bot)

@router.callback_query(F.data == 'go_profile')
async def go_profile_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await show_profile_menu(callback, state, bot)

@router.callback_query(F.data == 'profile_history')
async def show_operation_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ 24 —á–∞—Å–∞."""
    await callback.answer()
    user_id = callback.from_user.id
    operations = await db_manager.get_operation_history(user_id)

    text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n"
    if not operations:
        text += "–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        for op in operations:
            time_str = op.created_at.strftime('%H:%M:%S UTC')
            amount_str = f"{op.amount:+.2f} ‚≠ê" if op.amount > 0 else f"{op.amount:.2f} ‚≠ê"
            
            op_map = {
                "REVIEW_APPROVED": "‚úÖ –û–¥–æ–±—Ä–µ–Ω –æ—Ç–∑—ã–≤", "PROMO_ACTIVATED": "üéÅ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                "WITHDRAWAL": "üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥", "FINE": "üí∏ –®—Ç—Ä–∞—Ñ",
                "TRANSFER_SENT": "‚û°Ô∏è –ü–µ—Ä–µ–≤–æ–¥ –∑–≤–µ–∑–¥", "TRANSFER_RECEIVED": "‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥",
                "TOP_REWARD": "üèÜ –ù–∞–≥—Ä–∞–¥–∞"
            }
            op_description = op_map.get(op.operation_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            
            description_suffix = ""
            if op.operation_type == "TRANSFER_SENT":
                description_suffix = f" ({op.description})"
                if op.comment: description_suffix += " (—Å –∫–æ–º–º.)"
                if op.media_json and op.media_json != '[]': description_suffix += " (—Å –º–µ–¥–∏–∞)"
            elif op.operation_type == "TRANSFER_RECEIVED":
                sender_info = "–ê–Ω–æ–Ω–∏–º" if op.is_anonymous else (f"–æ—Ç @{op.sender.username}" if op.sender and op.sender.username else f"–æ—Ç ID: {op.sender_id}")
                description_suffix = f" ({sender_info})"
            elif op.description:
                description_suffix = f" ({op.description})"

            text += f"<code>{time_str}</code>: {op_description} {amount_str}{description_suffix}\n"
    
    if callback.message:
        await callback.message.edit_text(text, reply_markup=inline.get_operation_history_keyboard(), parse_mode="HTML")

# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ---

@router.callback_query(F.data == 'profile_transfer')
async def initiate_transfer(callback: CallbackQuery, state: FSMContext):
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    if float(balance) < Limits.MIN_TRANSFER_AMOUNT:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ (–º–∏–Ω–∏–º—É–º {Limits.MIN_TRANSFER_AMOUNT} ‚≠ê).", show_alert=True)
        return

    await state.set_state(UserState.TRANSFER_AMOUNT_OTHER)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            f"–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å? (–ú–∏–Ω–∏–º—É–º {Limits.MIN_TRANSFER_AMOUNT} ‚≠ê)\n"
            f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥: {TRANSFER_COMMISSION_PERCENT}%",
            reply_markup=inline.get_cancel_to_profile_keyboard()
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.TRANSFER_AMOUNT_OTHER, F.text)
async def transfer_amount_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < Limits.MIN_TRANSFER_AMOUNT: raise ValueError
    except (ValueError, TypeError):
        await delete_prompt_message(message, state)
        await message.delete()
        prompt_msg = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω–∏–º—É–º {Limits.MIN_TRANSFER_AMOUNT}).")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    
    balance, _ = await db_manager.get_user_balance(message.from_user.id)
    commission = amount * (TRANSFER_COMMISSION_PERCENT / 100)
    total_deduction = amount + commission
    if total_deduction > float(balance):
        await delete_prompt_message(message, state)
        await message.delete()
        prompt_msg = await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ ({commission:.2f} ‚≠ê) –≤–∞–º –Ω—É–∂–Ω–æ {total_deduction:.2f} ‚≠ê.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.update_data(transfer_amount=amount)
    await state.set_state(UserState.TRANSFER_RECIPIENT)
    await delete_prompt_message(message, state)
    await message.delete()
    prompt_msg = await message.answer("–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã? –£–∫–∞–∂–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=inline.get_cancel_to_profile_keyboard())
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.TRANSFER_RECIPIENT, F.text)
async def process_transfer_recipient(message: Message, state: FSMContext):
    recipient_id = await db_manager.find_user_by_identifier(message.text)
    await delete_prompt_message(message, state)
    await message.delete()
    
    if not recipient_id or recipient_id == message.from_user.id:
        prompt_msg = await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Å–µ–±—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await state.set_state(UserState.TRANSFER_OPTIONS)
    await state.update_data(recipient_id=recipient_id, transfer_comment=None, transfer_media=[], is_anonymous=False)
    
    data = await state.get_data()
    recipient_user = await db_manager.get_user(recipient_id)
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {recipient_id}"
    
    text = (f"<b>–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è {recipient_info}</b>\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –º–µ–¥–∏–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∞–Ω–æ–Ω–∏–º–Ω–æ. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'.")

    prompt_msg = await message.answer(text, reply_markup=inline.get_transfer_options_keyboard(data))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data.startswith('transfer_option:'), UserState.TRANSFER_OPTIONS)
async def handle_transfer_options(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    option = callback.data.split(':')[1]
    data = await state.get_data()
    
    if option == 'comment':
        await state.set_state(UserState.TRANSFER_COMMENT_INPUT)
        prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=inline.get_cancel_to_profile_keyboard())
        await state.update_data(prompt_message_id=prompt_msg.message_id)
    elif option == 'media':
        await state.set_state(UserState.TRANSFER_AWAITING_MEDIA)
        prompt_msg = await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF (–¥–æ 3 —Ñ–∞–π–ª–æ–≤, GIF —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞ 3). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", reply_markup=inline.get_post_media_keyboard(has_media=bool(data.get('transfer_media'))))
        await state.update_data(prompt_message_id=prompt_msg.message_id)
    elif option == 'anonymous':
        is_anonymous = not data.get('is_anonymous', False)
        await state.update_data(is_anonymous=is_anonymous)
        await callback.message.edit_reply_markup(reply_markup=inline.get_transfer_options_keyboard(await state.get_data()))
    elif option == 'confirm':
        await ask_for_transfer_confirmation(callback.message, state)

@router.message(UserState.TRANSFER_COMMENT_INPUT, F.text)
async def process_transfer_comment(message: Message, state: FSMContext):
    await state.update_data(transfer_comment=message.text)
    await message.delete()
    await delete_prompt_message(message, state)
    await state.set_state(UserState.TRANSFER_OPTIONS)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –æ–ø—Ü–∏–π
    data = await state.get_data()
    recipient_user = await db_manager.get_user(data['recipient_id'])
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {data['recipient_id']}"
    text = f"<b>–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è {recipient_info}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'."
    prompt_msg = await message.answer(text, reply_markup=inline.get_transfer_options_keyboard(data))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.TRANSFER_AWAITING_MEDIA, F.photo | F.video | F.animation)
async def process_transfer_media(message: Message, state: FSMContext, bot: Bot):
    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ posting.py)
    data = await state.get_data()
    media_list = data.get("transfer_media", [])
    current_weight = sum(m.get('weight', 1) for m in media_list)
    
    new_media = None
    if message.animation:
        if current_weight > 0:
            await message.answer("GIF –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–º, –æ–Ω –∑–∞–π–º–µ—Ç –≤—Å–µ 3 —Å–ª–æ—Ç–∞.")
            return
        new_media = {"type": "gif", "file_id": message.animation.file_id, "weight": 3}
    elif current_weight >= 3:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 3 –º–µ–¥–∏–∞.")
        return
    elif message.photo:
        new_media = {"type": "photo", "file_id": message.photo[-1].file_id, "weight": 1}
    elif message.video:
        new_media = {"type": "video", "file_id": message.video.file_id, "weight": 1}
        
    if new_media:
        media_list.append(new_media)
        await state.update_data(transfer_media=media_list)
        await message.delete()
    
    if prompt_id := data.get('prompt_message_id'):
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id, message_id=prompt_id,
                text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF. –î–æ–±–∞–≤–ª–µ–Ω–æ: {len(media_list)}/3. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                reply_markup=inline.get_post_media_keyboard(has_media=True)
            )
        except TelegramBadRequest: pass

@router.callback_query(F.data == 'post_media:done', UserState.TRANSFER_AWAITING_MEDIA)
async def transfer_media_done(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(UserState.TRANSFER_OPTIONS)
    await callback.message.delete()
    
    data = await state.get_data()
    recipient_user = await db_manager.get_user(data['recipient_id'])
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {data['recipient_id']}"
    text = f"<b>–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è {recipient_info}</b>\n\n–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."
    prompt_msg = await bot.send_message(callback.from_user.id, text, reply_markup=inline.get_transfer_options_keyboard(data))
    await state.update_data(prompt_message_id=prompt_msg.message_id)

async def ask_for_transfer_confirmation(message: Message, state: FSMContext):
    data = await state.get_data()
    amount, recipient_id = data['transfer_amount'], data['recipient_id']
    recipient_user = await db_manager.get_user(recipient_id)
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {recipient_id}"
    commission = amount * (TRANSFER_COMMISSION_PERCENT / 100)
    total_to_deduct = amount + commission

    confirmation_text = (
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞</b>\n\n"
        f"<b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient_info}\n"
        f"<b>–°—É–º–º–∞:</b> {amount:.2f} ‚≠ê\n"
        f"<b>–ö–æ–º–∏—Å—Å–∏—è:</b> {commission:.2f} ‚≠ê\n"
        f"<b>–ö —Å–ø–∏—Å–∞–Ω–∏—é: {total_to_deduct:.2f} ‚≠ê</b>\n\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('transfer_comment') or '–ù–µ—Ç'}\n"
        f"<b>–ú–µ–¥–∏–∞:</b> {len(data.get('transfer_media', []))} —à—Ç.\n"
        f"<b>–ê–Ω–æ–Ω–∏–º–Ω–æ:</b> {'–î–∞' if data.get('is_anonymous') else '–ù–µ—Ç'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é?"
    )
    
    await state.set_state(UserState.TRANSFER_CONFIRMATION)
    await message.edit_text(confirmation_text, reply_markup=inline.get_transfer_confirmation_keyboard())

@router.callback_query(F.data == 'transfer_confirm', UserState.TRANSFER_CONFIRMATION)
async def process_transfer_confirmed(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.message:
        await callback.message.delete()
    await finish_transfer(callback.from_user, state, bot)

async def finish_transfer(user: User, state: FSMContext, bot: Bot):
    data = await state.get_data()
    sender_id, sender_username = user.id, user.username
    recipient_id, amount = data['recipient_id'], data['transfer_amount']
    comment, is_anonymous, media = data.get('transfer_comment'), data.get('is_anonymous', False), data.get('transfer_media', [])
    
    success, transfer_id = await db_manager.transfer_stars(sender_id, recipient_id, amount, comment, is_anonymous, media)

    if not success:
        await bot.send_message(sender_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.", reply_markup=reply.get_main_menu_keyboard())
        await state.clear()
        return

    sender_info = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å" if is_anonymous else (f"@{sender_username}" if sender_username else f"ID {sender_id}")
    notification_text = f"‚ú® –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã <b>{amount:.2f} ‚≠ê</b> –æ—Ç {sender_info}!"
    if comment:
        notification_text += f"\n\n<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</i> {comment}"
        
    try:
        if not media:
            await bot.send_message(recipient_id, notification_text, reply_markup=inline.get_transfer_recipient_keyboard(transfer_id))
        else:
            media_group = []
            for i, m in enumerate(media):
                if m['type'] == 'photo': media_group.append(InputMediaPhoto(media=m['file_id'], caption=notification_text if i == 0 else None))
                elif m['type'] == 'video': media_group.append(InputMediaVideo(media=m['file_id'], caption=notification_text if i == 0 else None))
                elif m['type'] == 'gif': media_group.append(InputMediaAnimation(media=m['file_id'], caption=notification_text if i == 0 else None))
            
            await bot.send_media_group(recipient_id, media_group)
            await bot.send_message(recipient_id, "‚†Ä", reply_markup=inline.get_transfer_recipient_keyboard(transfer_id)) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–µ—Ä–µ–≤–æ–¥–µ {recipient_id}: {e}")

    await bot.send_message(sender_id, "‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!", reply_markup=reply.get_main_menu_keyboard())
    await state.clear()

# --- –õ–æ–≥–∏–∫–∞ –∂–∞–ª–æ–± ---
@router.callback_query(F.data.startswith('transfer_complain:'))
async def complain_about_transfer(callback: CallbackQuery, state: FSMContext):
    transfer_id = int(callback.data.split(':')[1])
    await state.set_state(UserState.COMPLAINT_REASON)
    await state.update_data(complaint_transfer_id=transfer_id)
    prompt_msg = await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–µ.", reply_markup=inline.get_cancel_to_profile_keyboard())
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()

@router.message(UserState.COMPLAINT_REASON, F.text)
async def process_complaint_reason(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    transfer_id = data.get('complaint_transfer_id')
    
    success = await db_manager.create_transfer_complaint(transfer_id, message.from_user.id, message.text)
    
    await message.delete()
    await delete_prompt_message(message, state)
    
    if success:
        await message.answer("‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        try:
            await bot.send_message(SUPER_ADMIN_ID, f"üö® –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ #{transfer_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        except Exception as e:
            logger.error(f"Failed to notify admin about complaint: {e}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É.")
        
    await state.clear()


# --- (–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞: –í—ã–≤–æ–¥, –•–æ–ª–¥ –∏ —Ç.–¥. –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ...
@router.callback_query(F.data == 'profile_withdraw')
async def initiate_withdraw(callback: CallbackQuery, state: FSMContext, **kwargs):
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    
    if float(balance) < Limits.MIN_WITHDRAWAL_AMOUNT:
        await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {Limits.MIN_WITHDRAWAL_AMOUNT:.2f} –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚≠ê.", show_alert=True)
        return
    
    if not WITHDRAWAL_CHANNEL_ID:
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–ø–ª–∞—Ç.", show_alert=True)
        logger.warning("Attempted to withdraw, but WITHDRAWAL_CHANNEL_ID is not set.")
        return

    await state.set_state(UserState.WITHDRAW_AMOUNT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏?",
            reply_markup=inline.get_withdraw_amount_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data.startswith('withdraw_amount_'), UserState.WITHDRAW_AMOUNT)
async def withdraw_predefined_amount(callback: CallbackQuery, state: FSMContext):
    amount_str = callback.data.split('_')[-1]
    
    if amount_str == 'other':
        await state.set_state(UserState.WITHDRAW_AMOUNT_OTHER)
        if callback.message:
            prompt_msg = await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º {Limits.MIN_WITHDRAWAL_AMOUNT:.2f}):", reply_markup=inline.get_cancel_to_profile_keyboard())
            if prompt_msg:
                await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    amount = float(amount_str)
    balance, _ = await db_manager.get_user_balance(callback.from_user.id)
    if float(balance) < amount:
        await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚≠ê", show_alert=True)
        return

    await state.update_data(withdraw_amount=amount)
    await state.set_state(UserState.WITHDRAW_RECIPIENT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?",
            reply_markup=inline.get_withdraw_recipient_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_AMOUNT_OTHER, F.text)
async def withdraw_other_amount_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < Limits.MIN_WITHDRAWAL_AMOUNT:
            raise ValueError
    except (ValueError, TypeError):
        await delete_prompt_message(message, state)
        await message.delete()
        prompt_msg = await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ –º–µ–Ω–µ–µ {Limits.MIN_WITHDRAWAL_AMOUNT:.2f}.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
    
    balance, _ = await db_manager.get_user_balance(message.from_user.id)
    if float(balance) < amount:
        await delete_prompt_message(message, state)
        await message.delete()
        prompt_msg = await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚≠ê")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return

    await delete_prompt_message(message, state)
    await message.delete()
    await state.update_data(withdraw_amount=amount)
    await state.set_state(UserState.WITHDRAW_RECIPIENT)
    prompt_msg = await message.answer(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫?",
        reply_markup=inline.get_withdraw_recipient_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    
async def _create_and_notify_withdrawal(user: User, amount: float, recipient_info: str, comment: str | None, bot: Bot, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
    request_id = await db_manager.create_withdrawal_request(user.id, amount, recipient_info, comment)

    if request_id is None:
        await bot.send_message(user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    admin_message = (
        f"üö® <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b> üö®\n\n"
        f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> @{user.username} (ID: <code>{user.id}</code>)\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount:.2f} ‚≠ê\n"
        f"üéØ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient_info}\n"
    )
    if comment:
        admin_message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n"
    
    admin_message += f"\n–ó–∞–ø—Ä–æ—Å ID: <code>{request_id}</code>"

    try:
        await bot.send_message(
            chat_id=WITHDRAWAL_CHANNEL_ID,
            text=admin_message,
            reply_markup=inline.get_admin_withdrawal_keyboard(request_id)
        )
        await bot.send_message(user.id, "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n–°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–∂–Ω–æ –≤ –Ω–∞—à–µ–º <a href='https://t.me/conclusions_starref'>–∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç</a>.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç {WITHDRAWAL_CHANNEL_ID}: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
        await db_manager.update_balance(user.id, amount, op_type="WITHDRAWAL", description="–í–æ–∑–≤—Ä–∞—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        await bot.send_message(user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç. –í–∞—à–∏ –∑–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    
    await state.clear()

@router.callback_query(F.data.startswith('withdraw_recipient_'), UserState.WITHDRAW_RECIPIENT)
async def process_withdraw_recipient(callback: CallbackQuery, state: FSMContext, bot: Bot):
    recipient_type = callback.data.split('_')[-1]
    data = await state.get_data()
    amount = data['withdraw_amount']
    
    if callback.message:
        await callback.message.delete()

    if recipient_type == 'self':
        await _create_and_notify_withdrawal(callback.from_user, amount, "–°–µ–±–µ", None, bot, state)
    elif recipient_type == 'other':
        await state.set_state(UserState.WITHDRAW_USER_ID)
        prompt_msg = await bot.send_message(
            callback.from_user.id,
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.",
            reply_markup=inline.get_cancel_to_profile_keyboard()
        )
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_USER_ID, F.text)
async def process_withdraw_user_id(message: Message, state: FSMContext):
    await delete_prompt_message(message, state)
    await message.delete()
    recipient_id = await db_manager.find_user_by_identifier(message.text)
    if not recipient_id or recipient_id == message.from_user.id:
        prompt_msg = await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–±–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
        
    await state.update_data(withdraw_recipient_id=recipient_id)
    await state.set_state(UserState.WITHDRAW_ASK_COMMENT)
    prompt_msg = await message.answer(
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–∞—Ä–∫—É?",
        reply_markup=inline.get_ask_comment_keyboard(prefix='withdraw')
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data == 'withdraw_ask_comment_no', UserState.WITHDRAW_ASK_COMMENT)
async def process_withdraw_no_comment(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.message:
        await callback.message.delete()
    await finish_withdraw(callback.from_user, state, bot, comment=None)

@router.callback_query(F.data == 'withdraw_ask_comment_yes', UserState.WITHDRAW_ASK_COMMENT)
async def process_withdraw_yes_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.WITHDRAW_COMMENT_INPUT)
    if callback.message:
        prompt_msg = await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–¥–∞—Ä–∫—É:")
        if prompt_msg:
            await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(UserState.WITHDRAW_COMMENT_INPUT, F.text)
async def process_withdraw_comment_input(message: Message, state: FSMContext, bot: Bot):
    await delete_prompt_message(message, state)
    await message.delete()
    await finish_withdraw(message.from_user, state, bot, comment=message.text)

async def finish_withdraw(user: User, state: FSMContext, bot: Bot, comment: str | None):
    data = await state.get_data()
    amount = data['withdraw_amount']
    recipient_id = data.get('withdraw_recipient_id')
    
    recipient_user = await db_manager.get_user(recipient_id)
    recipient_info = f"@{recipient_user.username}" if recipient_user and recipient_user.username else f"ID: {recipient_id}"

    await _create_and_notify_withdrawal(user, amount, recipient_info, comment, bot, state)

@router.callback_query(F.data == 'profile_hold')
async def show_hold_info(callback: CallbackQuery, state: FSMContext, **kwargs):
    reviews_in_hold = await db_manager.get_user_hold_reviews(callback.from_user.id)
    if not reviews_in_hold:
        text = "‚è≥ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ:\n\n–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ."
    else:
        text = "‚è≥ –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ:\n\n"
        review_lines = [f"- {review.amount:.2f} ‚≠ê ({review.platform}) –¥–æ {review.hold_until.strftime('%d.%m.%Y %H:%M')} UTC" for review in reviews_in_hold]
        text += "\n".join(review_lines)
    
    if callback.message:
        try:
            await callback.message.edit_text(text, reply_markup=inline.get_back_to_profile_keyboard())
        except TelegramBadRequest:
            pass