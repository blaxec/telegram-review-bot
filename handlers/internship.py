# file: handlers/internship.py

import logging
from math import ceil
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.user_states import UserState
from keyboards import inline, reply
from database import db_manager
from config import SUPER_ADMIN_ID

router = Router()
logger = logging.getLogger(__name__)

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "–í–ê–ö–ê–ù–°–ò–Ø" ---

@router.message(F.text == 'üíº –í–∞–∫–∞–Ω—Å–∏—è', StateFilter("*"))
async def internship_entry_point(message: Message, state: FSMContext):
    """
    –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∞–º–æ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    current_state = await state.get_state()
    internship_states = [s.state for s in UserState if s.state.startswith("UserState:INTERNSHIP_")]
    if current_state not in internship_states:
        await state.clear()
        
    user_id = message.from_user.id
    user = await db_manager.get_user(user_id)

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞–∂–µ—Ä
    if user and user.is_intern:
        await show_intern_cabinet(message, state)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É
    application = await db_manager.get_internship_application(user_id)
    if application:
        if application.status == 'pending':
            await message.answer("‚è≥ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif application.status == 'rejected':
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        elif application.status == 'approved':
            await message.answer("üéâ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        elif application.status == 'archived_success':
             await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É. –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–µ. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –º—ã —Å–æ–æ–±—â–∏–º.")
    # 3. –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
    else:
        await message.answer(
            "–û—Ç–∫—Ä—ã—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é —Å—Ç–∞–∂–µ—Ä–∞!\n\n"
            "–ú—ã –∏—â–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π. "
            "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ –∏–∑–Ω—É—Ç—Ä–∏.\n\n"
            "–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
            reply_markup=inline.get_internship_application_start_keyboard()
        )

# --- –†–ê–ë–û–ß–ò–ô –ö–ê–ë–ò–ù–ï–¢ –°–¢–ê–ñ–ï–†–ê ---

async def show_intern_cabinet(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –∫–∞–±–∏–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞–∂–µ—Ä–∞."""
    await state.set_state(UserState.MAIN_MENU) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞–ª–∏
    task = await db_manager.get_active_intern_task(message.from_user.id)
    user = await db_manager.get_user(message.from_user.id)
    
    if not task:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞—à–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    salary = task.estimated_salary or 0.0
    # –®—Ç—Ä–∞—Ñ —Ä–∞–≤–µ–Ω –¥–≤–æ–π–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
    penalty_per_error = (salary / task.goal_count) * 2 if task.goal_count > 0 else 0
    total_penalty = task.error_count * penalty_per_error
    final_salary = salary - total_penalty

    text = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à —Ä–∞–±–æ—á–∏–π –∫–∞–±–∏–Ω–µ—Ç!</b>\n\n"
        "<b>–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"
        f" ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: <code>{task.platform}</code>\n"
        f" ‚Ä¢ –¢–∏–ø –∑–∞–¥–∞—á–∏: <code>{task.task_type}</code>\n\n"
        "<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"
        f" ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{task.current_progress} / {task.goal_count}</b>\n"
        f" ‚Ä¢ –û—à–∏–±–æ–∫ –¥–æ–ø—É—â–µ–Ω–æ: <b>{task.error_count}</b>\n\n"
        "<b>–†–∞—Å—á–µ—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</b>\n"
        f" ‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: {salary:.2f} ‚≠ê\n"
        f" ‚Ä¢ –®—Ç—Ä–∞—Ñ—ã: -{total_penalty:.2f} ‚≠ê\n"
        f" ‚Ä¢ <b>–ö –≤—ã–ø–ª–∞—Ç–µ: {final_salary:.2f} ‚≠ê</b>"
    )

    await message.answer(text, reply_markup=inline.get_intern_cabinet_keyboard(is_busy=user.is_busy_intern))


@router.callback_query(F.data == "intern_cabinet:resign")
async def resign_request(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è."""
    user = await db_manager.get_user(callback.from_user.id)
    if user.is_busy_intern:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–≤–æ–ª–∏—Ç—å—Å—è, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –º–∏–∫—Ä–æ-–∑–∞–¥–∞—á—É. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–æ–ª–∏—Ç—å—Å—è —Å–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏? –í–µ—Å—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=inline.get_intern_resign_confirm_keyboard()
    )

@router.callback_query(F.data == "intern_cabinet:resign_confirm")
async def resign_confirm(callback: CallbackQuery, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è."""
    await db_manager.fire_intern(callback.from_user.id, "–£–≤–æ–ª–∏–ª—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∂–µ–ª–∞–Ω–∏—é")
    await callback.message.edit_text("–í—ã –±—ã–ª–∏ —É–≤–æ–ª–µ–Ω—ã —Å–æ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.", reply_markup=inline.get_back_to_main_menu_keyboard())
    await bot.send_message(SUPER_ADMIN_ID, f"‚ùóÔ∏è –°—Ç–∞–∂–µ—Ä @{callback.from_user.username} (ID: {callback.from_user.id}) —É–≤–æ–ª–∏–ª—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∂–µ–ª–∞–Ω–∏—é.")


@router.callback_query(F.data.startswith("intern_cabinet:mistakes"))
async def show_mistakes_history(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—à–∏–±–æ–∫ —Å—Ç–∞–∂–µ—Ä–∞."""
    page = int(callback.data.split(":")[-1]) if ":" in callback.data else 1
    
    mistakes, total = await db_manager.get_intern_mistakes(callback.from_user.id, page=page)
    total_pages = ceil(total / 5) if total > 0 else 1
    
    text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ—à–∏–±–æ–∫:</b>\n\n"
    if not mistakes:
        text += "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
    else:
        for mistake in mistakes:
            date_str = mistake.created_at.strftime('%d.%m.%Y')
            text += (
                f"<b>–î–∞—Ç–∞:</b> {date_str} | <b>–®—Ç—Ä–∞—Ñ:</b> {mistake.penalty_amount:.2f} ‚≠ê\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{mistake.reason}</i>\n"
                f"<i>(ID –æ—Ç–∑—ã–≤–∞: {mistake.review_id})</i>\n\n"
            )

    await callback.message.edit_text(
        text, 
        reply_markup=inline.get_pagination_keyboard("intern_cabinet:mistakes", page, total_pages, show_close=False)
    )

# --- FSM –î–õ–Ø –ü–û–î–ê–ß–ò –ê–ù–ö–ï–¢–´ ---

@router.callback_query(F.data == "internship_app:start")
async def start_application(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ FSM: –ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞."""
    await state.set_state(UserState.INTERNSHIP_APP_AGE)
    await callback.message.edit_text("–®–∞–≥ 1/3: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21).", reply_markup=inline.get_cancel_inline_keyboard())

@router.message(UserState.INTERNSHIP_APP_AGE)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤."""
    if not message.text or not message.text.isdigit() or not (16 <= int(message.text) <= 60):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 16 –¥–æ 60).")
        return
    await state.update_data(age=message.text)
    await state.set_state(UserState.INTERNSHIP_APP_HOURS)
    await message.answer("–®–∞–≥ 2/3: –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3-4)")

@router.message(UserState.INTERNSHIP_APP_HOURS)
async def process_hours(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤.")
        return
    await state.update_data(hours=message.text)
    await state.set_state(UserState.INTERNSHIP_APP_PLATFORMS)
    await state.update_data(selected_platforms=set())
    await message.answer(
        "–®–∞–≥ 3/3: –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤–∞–º –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å. "
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=inline.get_internship_platform_selection_keyboard()
    )

@router.callback_query(F.data.startswith("internship_toggle:"), UserState.INTERNSHIP_APP_PLATFORMS)
async def toggle_platform(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º."""
    _, platform, platform_text = callback.data.split(":")
    data = await state.get_data()
    selected = data.get("selected_platforms", set())

    if platform in selected:
        selected.remove(platform)
    else:
        selected.add(platform)

    await state.update_data(selected_platforms=selected)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–º–µ—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    builder = InlineKeyboardBuilder()
    platforms_map = {
        "google": "Google –ö–∞—Ä—Ç—ã",
        "yandex_text": "–Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)",
        "yandex_no_text": "–Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"
    }
    for p_key, p_text in platforms_map.items():
        text = f"‚úÖ {p_text}" if p_key in selected else p_text
        builder.button(text=text, callback_data=f"internship_toggle:{p_key}:{p_text}")
    
    builder.button(text="‚úÖ –î–∞–ª–µ–µ", callback_data="internship_app:platforms_done")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1)
    
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "internship_app:platforms_done", UserState.INTERNSHIP_APP_PLATFORMS)
async def platforms_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º, –ø–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    data = await state.get_data()
    selected_platforms = data.get("selected_platforms")
    if not selected_platforms:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.", show_alert=True)
        return
    
    await state.set_state(UserState.INTERNSHIP_APP_CONFIRM)
    
    platforms_text = ", ".join(sorted(list(selected_platforms)))
    
    confirmation_text = (
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É:</b>\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data.get('age')}\n"
        f"<b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å:</b> {data.get('hours')} —á/–¥–µ–Ω—å\n"
        f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {platforms_text}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="internship_app:confirm")
    builder.button(text="‚úèÔ∏è –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="internship_app:start")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1)
    
    await callback.message.edit_text(confirmation_text, reply_markup=builder.as_markup())


@router.callback_query(F.data == "internship_app:confirm", UserState.INTERNSHIP_APP_CONFIRM)
async def confirm_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã."""
    data = await state.get_data()
    
    platforms_text = ", ".join(sorted(list(data.get("selected_platforms", set()))))
    
    try:
        app = await db_manager.create_internship_application(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            age=data.get('age'),
            hours=data.get('hours'),
            platforms=platforms_text
        )
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ —Ä–µ—à–µ–Ω–∏–∏.",
            reply_markup=inline.get_back_to_main_menu_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_text = (
            f"üîî <b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É!</b>\n\n"
            f"–û—Ç: @{callback.from_user.username} (<code>{callback.from_user.id}</code>)\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
            f"–í—Ä–µ–º—è: {data.get('hours')} —á/–¥–µ–Ω—å\n"
            f"–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_text}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /internships –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
        )
        await bot.send_message(SUPER_ADMIN_ID, admin_text)

    except Exception as e:
        logger.error(f"Failed to save internship application for user {callback.from_user.id}: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=inline.get_back_to_main_menu_keyboard())
    
    await state.clear()