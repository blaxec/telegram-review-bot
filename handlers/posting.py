# file: handlers/posting.py

import asyncio
import json
import logging
from math import ceil
from typing import Set

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, InputMediaPhoto, InputMediaVideo,
                           Message)

from database import db_manager
from keyboards import inline
from states.user_states import AdminState
from utils.access_filters import IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def get_preview_text(state: FSMContext) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤ FSM."""
    data = await state.get_data()
    post_text = data.get("post_text", "–¢–µ–∫—Å—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
    media_list = data.get("post_media", [])
    audience_set = data.get("post_audience", set())

    audience_map = {
        'all_users': '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        'admins': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
        'super_admins': '–ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã',
        'testers': '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏'
    }
    audience_str = ", ".join([audience_map.get(a, a) for a in audience_set]) or "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"

    return (
        "<b>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤</b>\n\n"
        "<i>–ù–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</i>\n"
        "-------------------------------------\n"
        f"{post_text}\n"
        "-------------------------------------\n"
        f"<i>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –º–µ–¥–∏–∞: {len(media_list)}</i>\n"
        f"<i>–ê—É–¥–∏—Ç–æ—Ä–∏—è: {audience_str}</i>"
    )

async def update_preview_message(message: Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é-—Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    if not message:
        return
    try:
        preview_text = await get_preview_text(state)
        await message.edit_text(
            preview_text,
            reply_markup=inline.get_post_constructor_keyboard(),
            disable_web_page_preview=True
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.warning(f"Error updating preview message: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

@router.message(F.text == '/posts', IsSuperAdmin())
async def start_post_constructor(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞."""
    await state.clear()
    await state.set_data({
        "post_text": "<b>–í–∞—à –ø–æ—Å—Ç.</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>HTML</b>-—Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏: [–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏](https://google.com)",
        "post_media": [],
        "post_audience": set()
    })
    
    preview_text = await get_preview_text(state)
    preview_msg = await message.answer(
        preview_text,
        reply_markup=inline.get_post_constructor_keyboard(),
        disable_web_page_preview=True
    )
    await state.update_data(preview_message_id=preview_msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ ---

@router.callback_query(F.data == "post_constructor:edit_text", IsSuperAdmin())
async def ask_for_text(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.POST_CONSTRUCTOR_AWAIT_TEXT)
    prompt_msg = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞. –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTML-—Ç–µ–≥–∏ –∏–ª–∏ Markdown-—Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ `[—Ç–µ–∫—Å—Ç](url)`.",
        reply_markup=inline.get_cancel_inline_keyboard("post_constructor:cancel_input")
    )
    await state.update_data(text_prompt_id=prompt_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "post_constructor:edit_media", IsSuperAdmin())
async def ask_for_media(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.POST_CONSTRUCTOR_AWAIT_MEDIA)
    data = await state.get_data()
    media_count = len(data.get("post_media", []))
    prompt_msg = await callback.message.answer(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF (–¥–æ 10 —Ñ–∞–π–ª–æ–≤). –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {media_count}.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=inline.get_post_media_keyboard()
    )
    await state.update_data(media_prompt_id=prompt_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "post_constructor:edit_audience", IsSuperAdmin())
async def show_audience_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    audience_set = data.get("post_audience", set())
    await callback.message.edit_reply_markup(
        reply_markup=inline.get_post_audience_keyboard(audience_set)
    )
    await callback.answer()

@router.callback_query(F.data == "post_constructor:send", IsSuperAdmin())
async def confirm_and_send(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if not data.get("post_audience"):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!", show_alert=True)
        return
    if not data.get("post_text") and not data.get("post_media"):
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –ø–æ—Å—Ç!", show_alert=True)
        return

    user_ids = await db_manager.get_user_ids_for_broadcast(data["post_audience"])
    if not user_ids:
        await callback.answer("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
        return

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=inline.get_post_confirm_send_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "post_constructor:confirm_send", IsSuperAdmin())
async def start_broadcasting(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.edit_text("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")
    await callback.answer()

    data = await state.get_data()
    user_ids = await db_manager.get_user_ids_for_broadcast(data.get("post_audience", set()))
    
    await state.clear()
    
    success_count, error_count = 0, 0
    start_time = asyncio.get_event_loop().time()

    for user_id in user_ids:
        try:
            media_list = data.get("post_media", [])
            text = data.get("post_text", "")
            
            if not media_list:
                await bot.send_message(user_id, text, reply_markup=inline.get_close_post_keyboard(), disable_web_page_preview=True)
            elif len(media_list) == 1:
                media = media_list[0]
                if media['type'] == 'photo':
                    await bot.send_photo(user_id, media['file_id'], caption=text, reply_markup=inline.get_close_post_keyboard())
                elif media['type'] == 'video':
                    await bot.send_video(user_id, media['file_id'], caption=text, reply_markup=inline.get_close_post_keyboard())
            else:
                media_group = []
                for i, media in enumerate(media_list):
                    InputMediaClass = InputMediaPhoto if media['type'] == 'photo' else InputMediaVideo
                    media_group.append(InputMediaClass(media=media['file_id'], caption=text if i == 0 else None))
                await bot.send_media_group(user_id, media_group)
                # –ö–Ω–æ–ø–∫—É "–∑–∞–∫—Ä—ã—Ç—å" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await bot.send_message(user_id, "...", reply_markup=inline.get_close_post_keyboard())

            success_count += 1
        except (TelegramForbiddenError, TelegramBadRequest):
            logger.warning(f"Broadcast failed for user {user_id}: bot blocked or chat not found.")
            error_count += 1
        except Exception as e:
            logger.error(f"Broadcast failed for user {user_id} with unexpected error: {e}")
            error_count += 1
        
        await asyncio.sleep(0.1) # –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤

    end_time = asyncio.get_event_loop().time()
    total_time = end_time - start_time
    
    report_text = (
        f"<b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        f"‚è±Ô∏è –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {total_time:.2f} —Å–µ–∫."
    )
    await bot.send_message(callback.from_user.id, report_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM ---

@router.message(AdminState.POST_CONSTRUCTOR_AWAIT_TEXT, F.text)
async def process_post_text(message: Message, state: FSMContext):
    await state.update_data(post_text=message.html_text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await state.set_state(None)

    data = await state.get_data()
    preview_msg = await bot.send_message(chat_id=message.chat.id, text="–û–±–Ω–æ–≤–ª—è—é –ø—Ä–µ–≤—å—é...")
    await update_preview_message(preview_msg, state)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await message.delete()
        if data.get('text_prompt_id'):
            await bot.delete_message(message.chat.id, data['text_prompt_id'])
        if data.get('preview_message_id'):
            await bot.delete_message(message.chat.id, data['preview_message_id'])
    except TelegramBadRequest:
        pass
    
    await state.update_data(preview_message_id=preview_msg.message_id)


@router.message(AdminState.POST_CONSTRUCTOR_AWAIT_MEDIA, F.photo | F.video)
async def process_post_media(message: Message, state: FSMContext):
    data = await state.get_data()
    media_list = data.get("post_media", [])
    
    if len(media_list) >= 10:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.")
        return

    if message.photo:
        media_list.append({"type": "photo", "file_id": message.photo[-1].file_id})
    elif message.video:
        media_list.append({"type": "video", "file_id": message.video.file_id})
    
    await state.update_data(post_media=media_list)
    await message.delete()
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        if data.get('media_prompt_id'):
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data['media_prompt_id'],
                text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF (–¥–æ 10 —Ñ–∞–π–ª–æ–≤). –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(media_list)}.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
                reply_markup=inline.get_post_media_keyboard(has_media=True)
            )
    except TelegramBadRequest:
        pass

# --- –î—Ä—É–≥–∏–µ –∫–æ–ª–±—ç–∫–∏ ---

@router.callback_query(F.data == "close_post")
async def close_post_handler(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)

@router.callback_query(F.data.startswith("post_audience:toggle:"), IsSuperAdmin())
async def toggle_audience(callback: CallbackQuery, state: FSMContext):
    audience = callback.data.split(":")[-1]
    data = await state.get_data()
    audience_set: Set[str] = data.get("post_audience", set())

    if audience in audience_set:
        audience_set.remove(audience)
    else:
        audience_set.add(audience)

    await state.update_data(post_audience=audience_set)
    await callback.message.edit_reply_markup(
        reply_markup=inline.get_post_audience_keyboard(audience_set)
    )
    await callback.answer()

@router.callback_query(F.data == "post_audience:back", IsSuperAdmin())
async def back_to_constructor(callback: CallbackQuery, state: FSMContext):
    await update_preview_message(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "post_constructor:cancel_input", StateFilter("*"), IsSuperAdmin())
async def cancel_text_input(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞/–º–µ–¥–∏–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É."""
    await state.set_state(None)
    data = await state.get_data()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ
    prompt_id = data.get('text_prompt_id') or data.get('media_prompt_id')
    if prompt_id:
        try:
            await bot.delete_message(callback.message.chat.id, prompt_id)
        except TelegramBadRequest:
            pass
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–≤—å—é
    preview_msg = await bot.send_message(chat_id=callback.message.chat.id, text="–û–±–Ω–æ–≤–ª—è—é –ø—Ä–µ–≤—å—é...")
    await update_preview_message(preview_msg, state)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–µ–≤—å—é
    if data.get('preview_message_id'):
        try:
            await bot.delete_message(callback.message.chat.id, data.get('preview_message_id'))
        except TelegramBadRequest: pass
    await state.update_data(preview_message_id=preview_msg.message_id)
    await callback.answer()