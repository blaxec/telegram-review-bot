# file: handlers/start.py

import re
import asyncio
import logging
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState
from keyboards import reply, inline
from database import db_manager
from config import Durations, TESTER_IDS
from references import reference_manager
from utils.tester_filter import IsTester
from logic.user_notifications import (
    send_liking_confirmation_button,
    send_yandex_liking_confirmation_button,
    send_confirmation_button,
    handle_task_timeout
)
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ Gmail ---
from handlers.gmail import cancel_gmail_verification_timeout


router = Router()
logger = logging.getLogger(__name__)


ACTIVE_TASK_STATES = [
    UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE,
    UserState.GOOGLE_REVIEW_AWAITING_ADMIN_TEXT,
    UserState.GOOGLE_REVIEW_TASK_ACTIVE,
    UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT,
    UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_AWAITING_ADMIN_TEXT,
    UserState.YANDEX_REVIEW_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT,
    UserState.AWAITING_CONFIRMATION_SCREENSHOT,
    UserState.GMAIL_AWAITING_VERIFICATION,
]

async def schedule_message_deletion(message: Message, delay: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É."""
    async def delete_after_delay():
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
    asyncio.create_task(delete_after_delay())


@router.message(Command("getstate"), IsTester())
async def get_current_state(message: Message, state: FSMContext):
    """
    [–¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê] –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–µ—Ä–∞.
    """
    user_id = message.from_user.id
    is_tester = False
    admin_rec = await db_manager.get_administrator(user_id)
    if admin_rec:
        is_tester = admin_rec.is_tester

    current_state = await state.get_state()
    
    diagnostics_text = (
        "<b>--- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞ ---</b>\n\n"
        f"<b>–í–∞—à ID:</b> <code>{user_id}</code>\n"
        f"<b>–°—á–∏—Ç–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Ç–µ—Å—Ç–µ—Ä–æ–º:</b> {'‚úÖ –î–∞' if is_tester else '‚ùå –ù–µ—Ç'}\n"
        f"<b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM:</b> <code>{current_state}</code>"
    )
    await message.answer(diagnostics_text)

SKIP_ALLOWED_STATES = {
    UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE,
    UserState.GOOGLE_REVIEW_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_TASK_ACTIVE
}

@router.message(
    Command("skip"),
    IsTester(),
    StateFilter(*SKIP_ALLOWED_STATES)
)
async def skip_timer_command_successful(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    """
    –û–°–ù–û–í–ù–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /skip. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤–µ—Ä–Ω—ã.
    –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –∏ —É–¥–∞–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_data = await state.get_data()
    
    confirm_job_id = user_data.get("confirm_job_id")
    timeout_job_id = user_data.get("timeout_job_id")
    if confirm_job_id:
        try: scheduler.remove_job(confirm_job_id)
        except Exception: pass
    if timeout_job_id:
        try: scheduler.remove_job(timeout_job_id)
        except Exception: pass

    response_msg = None
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º state –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
    if current_state == UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE:
        await send_liking_confirmation_button(bot, user_id, state)
        response_msg = await message.answer("‚úÖ –¢–∞–π–º–µ—Ä –ª–∞–π–∫–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif current_state == UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE:
        await send_yandex_liking_confirmation_button(bot, user_id, state)
        response_msg = await message.answer("‚úÖ –¢–∞–π–º–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif current_state in [UserState.GOOGLE_REVIEW_TASK_ACTIVE, UserState.YANDEX_REVIEW_TASK_ACTIVE]:
        platform = user_data.get("platform_for_task")
        if platform:
            await send_confirmation_button(bot, user_id, platform, state)
            response_msg = await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è {platform} –ø—Ä–æ–ø—É—â–µ–Ω.")
    
    asyncio.create_task(schedule_message_deletion(message, 5))
    if response_msg:
        asyncio.create_task(schedule_message_deletion(response_msg, 5))
    
    logger.info(f"Tester {user_id} successfully skipped timer for state {current_state}.")

@router.message(Command("skip"), IsTester())
async def skip_timer_command_failed(message: Message):
    """
    –ó–ê–ü–ê–°–ù–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /skip. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Ç–µ—Å—Ç–µ—Ä –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É –≤ –ù–ï–ü–û–î–•–û–î–Ø–©–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    –°–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∏ —É–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É.
    """
    logger.warning(f"Tester {message.from_user.id} tried to use /skip in a wrong state.")
    
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    response_msg = await message.answer(
        "‚ùå –ö–æ–º–∞–Ω–¥–∞ <code>/skip</code> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–∞—Ö —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º."
    )
    asyncio.create_task(schedule_message_deletion(response_msg, 5))

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /expire ---
@router.message(Command("expire"), IsTester(), StateFilter(*ACTIVE_TASK_STATES))
async def expire_task_command(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    """
    [–¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê] –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ "–ø—Ä–æ–≤–∞–ª–∏–≤–∞–µ—Ç" —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π.
    """
    user_id = message.from_user.id
    current_state_str = await state.get_state()
    user_data = await state.get_data()

    # –ù–∞—Ö–æ–¥–∏–º –∏ –æ—Ç–º–µ–Ω—è–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä
    job_ids = ["timeout_job_id", "confirm_job_id", "confirmation_timeout_job_id", "gmail_timeout_job_id"]
    for job_id_key in job_ids:
        if job_id := user_data.get(job_id_key):
            try:
                scheduler.remove_job(job_id)
                logger.info(f"Tester {user_id} is expiring task. Removed job '{job_id_key}'.")
            except Exception:
                pass

    await message.answer(f"‚öôÔ∏è –ò–º–∏—Ç–∏—Ä—É—é –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {current_state_str}...")
    await message.delete()

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–∞–π–º–∞—É—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state_str == UserState.GMAIL_AWAITING_VERIFICATION.state:
        await cancel_gmail_verification_timeout(bot, user_id, state)
        logger.info(f"Tester {user_id} manually expired GMAIL task.")
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        platform = user_data.get("platform_for_task", "unknown_platform")
        await handle_task_timeout(
            bot=bot,
            storage=state.storage,
            user_id=user_id,
            platform=platform,
            message_to_admins=f"—Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á–∏ (state: {current_state_str})",
            scheduler=scheduler
        )
        logger.info(f"Tester {user_id} manually expired standard task for state {current_state_str}.")


@router.message(CommandStart(), StateFilter(*ACTIVE_TASK_STATES))
async def start_while_busy_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    
    response_msg = await message.answer(
        "‚ùóÔ∏è –í—ã —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ.\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª."
    )
    asyncio.create_task(schedule_message_deletion(response_msg, 10))


@router.message(CommandStart(), ~StateFilter(*ACTIVE_TASK_STATES))
async def start_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    
    await state.clear()
    
    referrer_id = None
    args = message.text.split()
    if len(args) > 1:
        if args[1].isdigit():
            ref_id = int(args[1])
            if ref_id != message.from_user.id:
                referrer_id = ref_id

    await db_manager.ensure_user_exists(
        user_id=message.from_user.id,
        username=message.from_user.username,
        referrer_id=referrer_id
    )
    
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–∞—Ä–æ–π –º–æ–º–µ–Ω—Ç–æ–≤ –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        "üîπ <b>–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–æ–≤</b> –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ Google/–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö.\n"
        "üîπ <b>–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Gmail</b> –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è <i>—Ç–æ–ª—å–∫–æ</i> –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º. "
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."
    )
    
    await message.answer(
        welcome_text,
        reply_markup=inline.get_agreement_keyboard()
    )


@router.callback_query(F.data == 'agree_agreement')
async def process_agreement(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–≥–ª–∞—Å–µ–Ω'."""
    try:
        await callback.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    except TelegramBadRequest:
        pass
        
    try:
        if callback.message:
            await callback.message.edit_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.")
            await schedule_message_deletion(callback.message, Durations.DELETE_WELCOME_MESSAGE_DELAY)
    except TelegramBadRequest:
        pass

    await state.set_state(UserState.MAIN_MENU)
    if callback.message:
        welcome_msg = await callback.message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
            reply_markup=reply.get_main_menu_keyboard()
        )
        await schedule_message_deletion(welcome_msg, Durations.DELETE_WELCOME_MESSAGE_DELAY)


# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ ---

async def generic_cancel_logic(user_id: int, bot: Bot, state: FSMContext):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫."""
    current_state = await state.get_state()
    if current_state is None:
        return "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤–∑—è—Ç–∞
    await reference_manager.release_reference_from_user(user_id, 'available')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç—ã–º —Å—Ç–∞–∂–µ—Ä–æ–º
    user = await db_manager.get_user(user_id)
    if user and user.is_busy_intern:
        await db_manager.set_intern_busy_status(user_id, is_busy=False)
        logger.info(f"User {user_id} cancelled a task, their intern busy status has been reset.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)
    return "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."

@router.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel_handler_reply(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞', —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    response_text = await generic_cancel_logic(message.from_user.id, message.bot, state)
    
    await message.answer(
        response_text,
        reply_markup=reply.get_main_menu_keyboard()
    )


@router.callback_query(F.data == 'cancel_action')
async def cancel_handler_inline(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã."""
    try:
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except TelegramBadRequest:
        pass
    
    try:
        if callback.message:
            await callback.message.delete()
    except TelegramBadRequest as e:
        logger.warning(f"Error deleting message on inline cancel: {e}")

    await generic_cancel_logic(callback.from_user.id, callback.bot, state)


@router.callback_query(F.data == 'go_main_menu')
async def go_main_menu_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥', –≤–µ–¥—É—â–µ–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass
        
    try:
        if callback.message:
            await callback.message.delete()
    except TelegramBadRequest as e:
        print(f"Error deleting message on go_main_menu: {e}")
        
    await state.set_state(UserState.MAIN_MENU)
    if callback.message:
        menu_msg = await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply.get_main_menu_keyboard()
        )
        await schedule_message_deletion(menu_msg, Durations.DELETE_WELCOME_MESSAGE_DELAY)