# file: handlers/support.py

import logging
import asyncio
import datetime
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from config import ADMIN_IDS
from database import db_manager
from logic import notification_manager # –ù–û–í–´–ô –ò–ú–ü–û–†–¢
from utils.access_filters import IsAdmin # –ù–û–í–´–ô –§–ò–õ–¨–¢–†

router = Router()
logger = logging.getLogger(__name__)

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def delete_previous_messages(message_or_callback: Message | CallbackQuery, state: FSMContext, and_self: bool = True):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å Message, –∏ —Å CallbackQuery."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å —á–µ–º —Ä–∞–±–æ—Ç–∞–µ–º: —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏
    is_message = isinstance(message_or_callback, Message)
    target_message = message_or_callback if is_message else message_or_callback.message
    
    if not target_message:
        return

    if prompt_message_id:
        try:
            await target_message.bot.delete_message(target_message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ Message, –∞ –Ω–µ CallbackQuery
    if and_self and is_message:
        try:
            await target_message.delete()
        except TelegramBadRequest:
            pass

@router.message(F.text == 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', UserState.MAIN_MENU)
async def support_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    
    user = await db_manager.get_user(message.from_user.id)
    if user and user.support_cooldown_until and user.support_cooldown_until > datetime.datetime.utcnow():
        remaining_time = user.support_cooldown_until - datetime.datetime.utcnow()
        await message.answer(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –µ—â–µ –Ω–∞: {str(remaining_time).split('.')[0]}")
        return

    await state.set_state(UserState.SUPPORT_AWAITING_QUESTION)
    prompt_msg = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(UserState.SUPPORT_AWAITING_QUESTION, F.text)
async def process_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ."""
    await delete_previous_messages(message, state)
    
    await state.update_data(support_question=message.text)
    await state.set_state(UserState.SUPPORT_AWAITING_PHOTO_CHOICE)
    
    prompt_msg = await message.answer(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ –Ω–µ–º—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ–±–ª–µ–º—ã)?",
        reply_markup=inline.get_support_photo_choice_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

async def send_ticket_to_admins(bot: Bot, state: FSMContext, user_id: int, username: str):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∞–º."""
    data = await state.get_data()
    question = data.get("support_question")
    photo_file_id = data.get("support_photo_id")

    # 1. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    admin_text = (
        f"üö® <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b> –æ—Ç @{username} (ID: <code>{user_id}</code>)\n\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b>\n<i>{question}</i>"
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö message_id
    # notification_manager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –≤—Å–µ –∞–¥–º–∏–Ω—ã –≤ DND –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö.
    # –î–ª—è support_ticket –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º, –∫—Ç–æ –Ω–µ –≤ DND, –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö message_id.
    
    active_admins = await db_manager.get_active_admins(ADMIN_IDS)
    sent_messages_map = {} # {admin_id: message_id}
    
    for admin_id in active_admins:
        try:
            if photo_file_id:
                sent_msg = await bot.send_photo(admin_id, photo=photo_file_id, caption=admin_text)
            else:
                sent_msg = await bot.send_message(admin_id, admin_text)
            sent_messages_map[ADMIN_IDS.index(admin_id)] = sent_msg.message_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            sent_messages_map[ADMIN_IDS.index(admin_id)] = None # –£–∫–∞–∑—ã–≤–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sent_messages_map –≤ dict —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ 0 –∏ 1 –¥–ª—è –º–æ–¥–µ–ª–∏
    admin_message_ids_for_db = {
        0: sent_messages_map.get(0), # admin_id_1
        1: sent_messages_map.get(1)  # admin_id_2 (–µ—Å–ª–∏ –µ—Å—Ç—å)
    }

    # 3. –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É, —Å–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –ë–î
    if any(sent_messages_map.values()):
        ticket = await db_manager.create_support_ticket(
            user_id=user_id,
            username=username,
            question=question,
            admin_message_ids=admin_message_ids_for_db,
            photo_file_id=photo_file_id
        )
        
        # 4. –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–æ–≤, –¥–æ–±–∞–≤–ª—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å ID —Ç–∏–∫–µ—Ç–∞
        for i, admin_id_in_config in enumerate(ADMIN_IDS): # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏–∑ config
            msg_id_to_edit = sent_messages_map.get(i) # –ë–µ—Ä–µ–º message_id, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if msg_id_to_edit:
                try:
                    if photo_file_id:
                        await bot.edit_message_reply_markup(
                            chat_id=admin_id_in_config, message_id=msg_id_to_edit,
                            reply_markup=inline.get_support_admin_keyboard(ticket.id, user_id)
                        )
                    else:
                        await bot.edit_message_reply_markup(
                            chat_id=admin_id_in_config, message_id=msg_id_to_edit,
                            reply_markup=inline.get_support_admin_keyboard(ticket.id, user_id)
                        )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∞–¥–º–∏–Ω–∞ {admin_id_in_config} –¥–ª—è —Ç–∏–∫–µ—Ç–∞ {ticket.id}: {e}")
        
        await bot.send_message(user_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ–π—á–∞—Å –≤ ¬´–Ω–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ¬ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


@router.callback_query(F.data == "support_add_photo:no", UserState.SUPPORT_AWAITING_PHOTO_CHOICE)
async def process_no_photo_choice(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ."""
    await delete_previous_messages(callback, state, and_self=False)
    try:
        if callback.message:
            await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à —Ç–∏–∫–µ—Ç...")
    except TelegramBadRequest: pass
    await callback.answer()
    await send_ticket_to_admins(bot, state, callback.from_user.id, callback.from_user.username or "N/A")

@router.callback_query(F.data == "support_add_photo:yes", UserState.SUPPORT_AWAITING_PHOTO_CHOICE)
async def process_yes_photo_choice(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ."""
    await delete_previous_messages(callback, state, and_self=False)
    await state.set_state(UserState.SUPPORT_AWAITING_PHOTO)
    prompt_msg = await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=inline.get_cancel_inline_keyboard()
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)
    await callback.answer()

@router.message(UserState.SUPPORT_AWAITING_PHOTO, F.photo)
async def process_support_photo(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ, —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç."""
    await delete_previous_messages(message, state)
    await state.update_data(support_photo_id=message.photo[-1].file_id)
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à —Ç–∏–∫–µ—Ç...")
    await send_ticket_to_admins(bot, state, message.from_user.id, message.from_user.username or "N/A")


# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(F.data.startswith("support_answer:"), IsAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def admin_claim_question(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    ticket_id = int(callback.data.split(":")[1])
    admin_id = callback.from_user.id
    admin_username = callback.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    ticket = await db_manager.claim_support_ticket(ticket_id, admin_id)
    
    if not ticket:
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_alert=True)
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except: pass
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º db_manager.get_active_admins –¥–ª—è —É—á–µ—Ç–∞ DND, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –∫—Ç–æ –ù–ï –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É.
    other_admins_to_notify = [aid for aid in ADMIN_IDS if aid != admin_id]
    
    for other_admin_id_in_config in other_admins_to_notify:
        msg_id_to_edit = None
        if ADMIN_IDS.index(other_admin_id_in_config) == 0:
            msg_id_to_edit = ticket.admin_message_id_1
        elif ADMIN_IDS.index(other_admin_id_in_config) == 1:
            msg_id_to_edit = ticket.admin_message_id_2

        if msg_id_to_edit:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–æ –ª–∏ —Ñ–æ—Ç–æ
                if ticket.photo_file_id:
                    await bot.edit_message_caption(
                        caption=f"{callback.message.caption}\n\n<b>–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}</b>",
                        chat_id=other_admin_id_in_config, message_id=msg_id_to_edit, reply_markup=None
                    )
                else:
                    await bot.edit_message_text(
                        text=f"{callback.message.text}\n\n<b>–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}</b>",
                        chat_id=other_admin_id_in_config, message_id=msg_id_to_edit, reply_markup=None
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {other_admin_id_in_config}: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª
    new_text = (callback.message.caption or callback.message.text) + "\n\n‚úÖ –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    
    if ticket.photo_file_id:
        await callback.message.edit_caption(caption=new_text, reply_markup=None)
    else:
        await callback.message.edit_text(text=new_text, reply_markup=None)

    prompt_msg = callback.message # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ prompt
    await state.set_state(AdminState.SUPPORT_AWAITING_ANSWER)
    await state.update_data(
        support_ticket_id=ticket_id, 
        support_user_id=ticket.user_id,
        prompt_message_id=prompt_msg.message_id
    )
    
    await callback.answer()

@router.message(AdminState.SUPPORT_AWAITING_ANSWER, IsAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def admin_send_answer(message: Message, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await delete_previous_messages(message, state)
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return

    data = await state.get_data()
    user_id = data.get("support_user_id")
    ticket_id = data.get("support_ticket_id")
    
    if not user_id or not ticket_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")
        await state.clear()
        return

    user_text = (
        f"üì© <b>–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
        f"{message.text}"
    )
    
    try:
        await bot.send_message(user_id, user_text)
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await db_manager.close_support_ticket(ticket_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()


# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –í –ü–û–î–î–ï–†–ñ–ö–ï ---

@router.callback_query(F.data.startswith("support_warn:"), IsAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def admin_start_support_warn(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'."""
    try:
        _, ticket_id_str, user_id_str = callback.data.split(":")
        ticket_id = int(ticket_id_str)
        user_id = int(user_id_str)
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –ë–õ–û–ö –ó–ê–©–ò–¢–´ –û–¢ –ì–û–ù–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô ---
    admin_id = callback.from_user.id
    admin_username = callback.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    # 1. –ü—ã—Ç–∞–µ–º—Å—è "–∑–∞—Ö–≤–∞—Ç–∏—Ç—å" —Ç–∏–∫–µ—Ç
    ticket = await db_manager.claim_support_ticket(ticket_id, admin_id)
    
    # 2. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —É–∂–µ –∑–∞—Ö–≤–∞—Ç–∏–ª)
    if not ticket:
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", show_alert=True)
        try:
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–∂–∏–º–∞–ª
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception: 
            pass
        return # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    # 3. –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —É–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    other_admins_to_notify = [aid for aid in ADMIN_IDS if aid != admin_id]
    
    for other_admin_id_in_config in other_admins_to_notify:
        msg_id_to_edit = None
        if ADMIN_IDS.index(other_admin_id_in_config) == 0:
            msg_id_to_edit = ticket.admin_message_id_1
        elif ADMIN_IDS.index(other_admin_id_in_config) == 1:
            msg_id_to_edit = ticket.admin_message_id_2

        if msg_id_to_edit:
            try:
                if ticket.photo_file_id:
                    await bot.edit_message_caption(
                        caption=f"{callback.message.caption}\n\n<b>–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É (–¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}</b>",
                        chat_id=other_admin_id_in_config, message_id=msg_id_to_edit, reply_markup=None
                    )
                else:
                    await bot.edit_message_text(
                        text=f"{callback.message.text}\n\n<b>–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É (–¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è) –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}</b>",
                        chat_id=other_admin_id_in_config, message_id=msg_id_to_edit, reply_markup=None
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {other_admin_id_in_config} (warn): {e}")

    # 4. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–µ–±—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ FSM
    try:
        new_text = (callback.message.caption or callback.message.text) + "\n\n‚ö†Ô∏è –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        if ticket.photo_file_id:
            await callback.message.edit_caption(caption=new_text, reply_markup=None)
        else:
            await callback.message.edit_text(text=new_text, reply_markup=None)
    except Exception as e:
         logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞ {admin_id} (warn): {e}")

    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

    await state.set_state(AdminState.SUPPORT_AWAITING_WARN_REASON)
    await state.update_data(
        support_ticket_id=ticket_id,
        target_user_id=user_id,
        original_message_id=callback.message.message_id
    )
    await callback.answer()


@router.message(AdminState.SUPPORT_AWAITING_WARN_REASON, F.text, IsAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def admin_process_support_warn_reason(message: Message, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –≤–≤–µ–ª –ø—Ä–∏—á–∏–Ω—É, –≤—ã–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Ä–µ—à–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∫—É–ª–¥–∞—É–Ω."""
    await delete_previous_messages(message, state) # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
    data = await state.get_data()
    user_id = data.get("target_user_id")
    ticket_id = data.get("support_ticket_id")
    warn_reason = message.text

    await state.update_data(support_warn_reason=warn_reason)

    user = await db_manager.get_user(user_id)
    current_warnings = user.support_warnings if user else 0
    new_warnings_count = current_warnings + 1

    if new_warnings_count == 1:
        # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–µ–º
        await db_manager.add_support_warning_and_cooldown(user_id)
        await bot.send_message(user_id, f"‚ö†Ô∏è <b>–í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {warn_reason}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.")
        await message.answer(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (‚Ññ{new_warnings_count}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        await db_manager.close_support_ticket(ticket_id)
        await state.clear()
    elif new_warnings_count == 2:
        # –í—Ç–æ—Ä–æ–µ, –≤—ã–¥–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 1 —á–∞—Å
        await db_manager.add_support_warning_and_cooldown(user_id, hours=1)
        await bot.send_message(user_id, f"‚ùóÔ∏è <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {warn_reason}\n\n–ó–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 —á–∞—Å.")
        await message.answer(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (‚Ññ{new_warnings_count}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 —á–∞—Å.")
        await db_manager.close_support_ticket(ticket_id)
        await state.clear()
    else:
        # –¢—Ä–µ—Ç—å–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ, –∞–¥–º–∏–Ω —Å–∞–º –≤–≤–æ–¥–∏—Ç —Å—Ä–æ–∫
        await state.set_state(AdminState.SUPPORT_AWAITING_COOLDOWN_HOURS)
        prompt_msg = await message.answer(f"–≠—Ç–æ —É–∂–µ {new_warnings_count}-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –≤ —á–∞—Å–∞—Ö:")
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.SUPPORT_AWAITING_COOLDOWN_HOURS, F.text, IsAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def admin_set_support_cooldown(message: Message, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
    await delete_previous_messages(message, state)

    if not message.text.isdigit() or int(message.text) <= 0:
        prompt_msg = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        await state.update_data(prompt_message_id=prompt_msg.message_id)
        return
        
    hours = int(message.text)
    data = await state.get_data()
    user_id = data.get("target_user_id")
    ticket_id = data.get("support_ticket_id")
    warn_reason = data.get("support_warn_reason")
    
    current_warnings = await db_manager.add_support_warning_and_cooldown(user_id, hours=hours)

    await bot.send_message(user_id, f"‚ùóÔ∏è <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {warn_reason}\n\n–î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.")
    await message.answer(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (‚Ññ{current_warnings}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {hours} —á–∞—Å–æ–≤.")
    
    await db_manager.close_support_ticket(ticket_id)
    await state.clear()