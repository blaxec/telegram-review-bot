
import logging
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from states.user_states import UserState
from states.user_states import AdminState
from keyboards import inline, reply
from config import ADMIN_IDS

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞', UserState.MAIN_MENU)
async def support_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    
    await state.set_state(UserState.SUPPORT_AWAITING_QUESTION)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=inline.get_cancel_inline_keyboard()
    )

@router.message(UserState.SUPPORT_AWAITING_QUESTION)
async def process_question(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –∞–¥–º–∏–Ω–∞–º."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")
        return

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
    question_message_id = message.message_id
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ @username"

    admin_text = (
        f"üö® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: `{user_id}`)\n\n"
        f"**–í–æ–ø—Ä–æ—Å:**\n_{message.text}_"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                admin_text,
                reply_markup=inline.get_support_admin_keyboard(user_id, question_message_id)
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

@router.callback_query(F.data.startswith("support_answer:"))
async def admin_claim_question(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å."""
    _, user_id_str, question_msg_id_str = callback.data.split(":")
    user_id = int(user_id_str)
    
    admin_username = callback.from_user.username or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É
    for admin_id in ADMIN_IDS:
        try:
            # –ú—ã –Ω–µ –∑–Ω–∞–µ–º message_id —É –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞, –ø–æ—ç—Ç–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞–∂–∞–ª
            if admin_id == callback.from_user.id:
                 await callback.message.edit_text(
                    f"{callback.message.text}\n\n"
                    f"‚úÖ –í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.",
                    reply_markup=None
                )
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                await bot.send_message(
                    admin_id,
                    f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –±—ã–ª –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{admin_username}."
                )
        except TelegramBadRequest:
            # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
            pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id} –æ –≤–∑—è—Ç–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–æ–º—É –æ—Ç–≤–µ—á–∞—Ç—å
    await state.set_state(AdminState.SUPPORT_AWAITING_ANSWER)
    await state.update_data(support_user_id=user_id, support_question_msg_id=int(question_msg_id_str))
    
    await callback.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)

@router.message(AdminState.SUPPORT_AWAITING_ANSWER)
async def admin_send_answer(message: Message, state: FSMContext, bot: Bot):
    """–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.")
        return

    data = await state.get_data()
    user_id = data.get("support_user_id")
    question_msg_id = data.get("support_question_msg_id")
    
    if not user_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")
        await state.clear()
        return

    user_text = (
        f"üì© **–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n\n"
        f"{message.text}"
    )
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä—è–º–æ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await bot.send_message(user_id, user_text, reply_to_message_id=question_msg_id)
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await bot.send_message(user_id, user_text)
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω).")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")

    await state.clear()