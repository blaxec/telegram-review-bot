# file: telegram-review-bot-main/handlers/earning.py

import datetime
import logging
import asyncio
from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState
from keyboards import inline, reply
from database import db_manager
from references import reference_manager
from config import Durations, TESTER_IDS
from logic.user_notifications import (
    format_timedelta,
    send_liking_confirmation_button,
    send_yandex_liking_confirmation_button,
    handle_task_timeout,
    send_confirmation_button
)
from utils.tester_filter import IsTester
from logic import admin_roles

router = Router()
logger = logging.getLogger(__name__)


async def schedule_message_deletion(message: Message, delay: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É."""
    async def delete_after_delay():
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
    asyncio.create_task(delete_after_delay())

async def delete_user_and_prompt_messages(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass


# --- –ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /skip ---

SKIP_ALLOWED_STATES = {
    UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE,
    UserState.GOOGLE_REVIEW_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE,
    UserState.YANDEX_REVIEW_TASK_ACTIVE
}

@router.message(
    Command("skip"),
    IsTester(),
    F.state.in_(SKIP_ALLOWED_STATES)
)
async def skip_timer_command_successful(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = message.from_user.id
    current_state = await state.get_state()
    user_data = await state.get_data()
    
    confirm_job_id = user_data.get("confirm_job_id")
    timeout_job_id = user_data.get("timeout_job_id")
    if confirm_job_id:
        try: scheduler.remove_job(confirm_job_id)
        except Exception: pass
    if timeout_job_id:
        try: scheduler.remove_job(timeout_job_id)
        except Exception: pass

    response_msg = None
    if current_state == UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE:
        await send_liking_confirmation_button(bot, user_id)
        response_msg = await message.answer("‚úÖ –¢–∞–π–º–µ—Ä –ª–∞–π–∫–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif current_state == UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE:
        await send_yandex_liking_confirmation_button(bot, user_id)
        response_msg = await message.answer("‚úÖ –¢–∞–π–º–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω.")
    elif current_state in [UserState.GOOGLE_REVIEW_TASK_ACTIVE, UserState.YANDEX_REVIEW_TASK_ACTIVE]:
        platform = user_data.get("platform_for_task")
        if platform:
            await send_confirmation_button(bot, user_id, platform)
            response_msg = await message.answer(f"‚úÖ –¢–∞–π–º–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è {platform} –ø—Ä–æ–ø—É—â–µ–Ω.")
    
    asyncio.create_task(schedule_message_deletion(message, 5))
    if response_msg:
        asyncio.create_task(schedule_message_deletion(response_msg, 5))
    
    logger.info(f"Tester {user_id} successfully skipped timer for state {current_state}.")

@router.message(
    Command("skip"),
    IsTester()
)
async def skip_timer_command_failed(message: Message):
    logger.warning(f"Tester {message.from_user.id} tried to use /skip in a wrong state.")
    
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    response_msg = await message.answer(
        "‚ùå –ö–æ–º–∞–Ω–¥–∞ <code>/skip</code> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∞–ø–∞—Ö —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º–µ—Ä–æ–º."
    )
    asyncio.create_task(schedule_message_deletion(response_msg, 5))

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ó–∞—Ä–∞–±–æ—Ç–∫–∞ ---

@router.message(F.text == 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫', UserState.MAIN_MENU)
async def earning_handler_message(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())

async def earning_menu_logic(callback: CallbackQuery):
    if callback.message:
        try:
            await callback.message.edit_text("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Error editing earning menu message: {e}")
            await callback.answer()

@router.callback_query(F.data == 'earning_menu')
async def earning_handler_callback(callback: CallbackQuery, state: FSMContext):
    await earning_menu_logic(callback)


@router.callback_query(F.data == 'earning_write_review')
async def initiate_write_review(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:",
            reply_markup=inline.get_write_review_platform_keyboard()
        )
    
@router.callback_query(F.data == 'earning_menu_back')
async def earning_menu_back(callback: CallbackQuery, state: FSMContext):
    await earning_menu_logic(callback)

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Google –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_google_maps')
async def initiate_google_review(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cooldown = await db_manager.check_platform_cooldown(user_id, "google")
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Google —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return

    if not await reference_manager.has_available_references('google_maps'):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è Google –ö–∞—Ä—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
        
    await state.set_state(UserState.GOOGLE_REVIEW_INIT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Google.–ö–∞—Ä—Ç–∞—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 15 –∑–≤–µ–∑–¥.\n\n"
            "üí° –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ "
            "<i>¬´–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è¬ª</i> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.",
            reply_markup=inline.get_google_init_keyboard()
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.callback_query(F.data == 'google_review_done', UserState.GOOGLE_REVIEW_INIT)
async def process_google_review_done(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–ø—Ä–∏—à–ª–∏—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i> –≤ Google.–ö–∞—Ä—Ç–∞—Ö. "
            "–û—Ç–∑—ã–≤—ã –Ω–∞ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_google_ask_profile_screenshot_keyboard()
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.callback_query(F.data == 'google_get_profile_screenshot', UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def show_google_profile_screenshot_instructions(callback: CallbackQuery):
    if callback.message:
        try:
            await callback.message.edit_text(
                "ü§î <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Google.–ö–∞—Ä—Ç—ã:</b>\n\n"
                "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://www.google.com/maps/contrib/'>–ü—Ä–æ—Ñ–∏–ª—å Google Maps</a>\n"
                "2. –í–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Google –ö–∞—Ä—Ç—ã.\n"
                "3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–±–µ–∑ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–Ω–∏—è).",
                reply_markup=inline.get_google_back_from_instructions_keyboard(),
                disable_web_page_preview=True
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Error editing instructions message: {e}")
    await callback.answer()

@router.callback_query(F.data == 'google_back_to_profile_screenshot', UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def back_to_profile_screenshot(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–ø—Ä–∏—à–ª–∏—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i> –≤ Google.–ö–∞—Ä—Ç–∞—Ö. "
            "–û—Ç–∑—ã–≤—ã –Ω–∞ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_google_ask_profile_screenshot_keyboard()
        )
    await callback.answer()


@router.message(F.photo, UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_google_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    await delete_user_and_prompt_messages(message, state)
    if not message.photo: return
    
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_PROFILE_CHECK_PENDING)
    
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{user_info_text}"
    
    try:
        admin_id = await admin_roles.get_google_profile_admin()
        await bot.send_photo(
            chat_id=admin_id,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "google_profile")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'google_last_reviews_where', UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
async def show_google_last_reviews_instructions(callback: CallbackQuery):
    if callback.message:
        try:
            await callback.message.edit_text(
                "ü§î <b>–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ Google –ö–∞—Ä—Ç–∞—Ö.\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É '–û—Ç–∑—ã–≤—ã'.\n"
                "3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏–¥–Ω—ã –¥–∞—Ç—ã –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.",
                reply_markup=inline.get_google_back_from_last_reviews_keyboard()
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e):
                logger.warning(f"Error editing last reviews instructions: {e}")
    await callback.answer()

@router.callback_query(F.data == 'google_back_to_last_reviews', UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
async def back_to_last_reviews_check(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.",
            reply_markup=inline.get_google_last_reviews_check_keyboard()
        )
    await callback.answer()


@router.message(F.photo, UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
async def process_google_last_reviews_screenshot(message: Message, state: FSMContext, bot: Bot):
    await delete_user_and_prompt_messages(message, state)
    if not message.photo: return

    photo_file_id = message.photo[-1].file_id
    
    await message.answer("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK_PENDING)
    
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–Ω—Ç–µ—Ä–≤–∞–ª - 3 –¥–Ω—è.\n{user_info_text}"

    try:
        admin_id = await admin_roles.get_google_reviews_admin()
        await bot.send_photo(
            chat_id=admin_id,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(
                user_id=message.from_user.id, 
                context="google_last_reviews"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def start_google_liking_or_main_task(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, link):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ –ª–∞–π–∫–æ–≤ –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫)."""
    user_id = callback.from_user.id
    
    if link.is_fast_track:
        logger.info(f"Link {link.id} is a fast-track. Skipping liking step for user {user_id}.")
        await process_liking_completion(callback, state, bot, scheduler)
    else:
        task_text = (
            "<b>–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>\n\n"
            f"üîó <a href='{link.url}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n"
            "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.\n\n"
            f"‚è≥ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <i>{Durations.TASK_GOOGLE_LIKING_TIMEOUT} –º–∏–Ω—É—Ç</i>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {Durations.TASK_GOOGLE_LIKING_CONFIRM_APPEARS} –º–∏–Ω—É—Ç."
        )
        if callback.message:
            await callback.message.edit_text(task_text, disable_web_page_preview=True)
        await state.set_state(UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
        await state.update_data(username=callback.from_user.username, active_link_id=link.id)
        
        now = datetime.datetime.now(datetime.timezone.utc)
        confirm_job = scheduler.add_job(send_liking_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=Durations.TASK_GOOGLE_LIKING_CONFIRM_APPEARS), args=[bot, user_id])
        timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=Durations.TASK_GOOGLE_LIKING_TIMEOUT), args=[bot, state.storage, user_id, 'google', '—ç—Ç–∞–ø –ª–∞–π–∫–æ–≤', scheduler])
        await state.update_data(confirm_job_id=confirm_job.id, timeout_job_id=timeout_job.id)

@router.callback_query(F.data == 'google_continue_writing_review', UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
async def start_liking_step(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback.from_user.id
    
    link = await reference_manager.assign_reference_to_user(user_id, 'google_maps')
    if not link:
        if callback.message:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    await start_google_liking_or_main_task(callback, state, bot, scheduler, link)

@router.callback_query(F.data == 'google_confirm_liking_task', UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
async def process_liking_completion(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")

    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_ADMIN_TEXT)
    if callback.message:
        try:
            response_msg = await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
            await schedule_message_deletion(response_msg, 25)
        except TelegramBadRequest: pass
            
    user_info = await bot.get_chat(callback.from_user.id)
    link_id = user_data.get('active_link_id')
    link = await db_manager.db_get_link_by_id(link_id)
    profile_screenshot_id = user_data.get("profile_screenshot_id")

    if not link:
        if callback.message:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    admin_notification_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: <code>{callback.from_user.id}</code>) –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ Google.\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: <code>{link.url}</code>"
    )
    
    try:
        admin_id = await admin_roles.get_google_issue_admin()
        keyboard = inline.get_admin_provide_text_keyboard('google', callback.from_user.id, link.id)
        if profile_screenshot_id:
            await bot.send_photo(
                chat_id=admin_id,
                photo=profile_screenshot_id,
                caption=admin_notification_text,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(admin_id, admin_notification_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Failed to send task to admin: {e}")

@router.callback_query(F.data == 'google_confirm_task', UserState.GOOGLE_REVIEW_TASK_ACTIVE)
async def process_google_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")
    
    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞</i>."
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(F.photo, UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
async def process_google_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    await delete_user_and_prompt_messages(message, state)
    if not message.photo: return
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_text = user_data.get('review_text', '–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    photo_file_id = message.photo[-1].file_id
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    caption = (
        f"üö® <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Google</b> üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: <code>{user_id}</code>)\n"
        f"–°—Å—ã–ª–∫–∞: <code>{link_url}</code>\n\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´<i>{review_text}</i>¬ª\n\n"
        "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    
    try:
        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform='google',
            text=review_text,
            admin_message_id=0,
            screenshot_file_id=photo_file_id
        )

        if not review_id:
            raise Exception("Failed to create review draft in DB.")

        admin_id = await admin_roles.get_google_final_admin()
        sent_message = await bot.send_photo(
            chat_id=admin_id,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )
        
        await db_manager.db_update_review_admin_message_id(review_id, sent_message.message_id)

        response_msg = await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        await schedule_message_deletion(response_msg, 25)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Yandex –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_yandex_maps')
async def choose_yandex_review_type(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ –¥–ª—è Yandex.–ö–∞—Ä—Ç:",
            reply_markup=inline.get_yandex_review_type_keyboard()
        )

@router.callback_query(F.data.startswith('yandex_review_type:'))
async def initiate_yandex_review(callback: CallbackQuery, state: FSMContext):
    review_type = callback.data.split(':')[1]
    user_id = callback.from_user.id
    
    platform = f"yandex_{review_type}"
    
    cooldown = await db_manager.check_platform_cooldown(user_id, platform)
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Yandex ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}) —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return
        
    if not await reference_manager.has_available_references(platform):
        await callback.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–¥–∞–Ω–∏—è –¥–ª—è 'Yandex ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'})' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        return
    
    await state.update_data(yandex_review_type=review_type)
    await state.set_state(UserState.YANDEX_REVIEW_INIT)

    reward = 50 if review_type == "with_text" else 15
    
    if callback.message:
        await callback.message.edit_text(
            f"‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Yandex.–ö–∞—Ä—Ç–∞—Ö ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}) –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {reward} –∑–≤–µ–∑–¥.\n\n"
            "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "üí° –¢–∞–∫–∂–µ –≤—ã–∫–ª—é—á–∏—Ç–µ <i>¬´–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è¬ª</i> –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "üí° –ê–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–µ –Ω–∏–∂–µ <i>¬´–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞¬ª</i> 3-–≥–æ —É—Ä–æ–≤–Ω—è.",
            reply_markup=inline.get_yandex_init_keyboard()
        )

@router.callback_query(F.data == 'yandex_how_to_be_expert', UserState.YANDEX_REVIEW_INIT)
async def show_yandex_instructions(callback: CallbackQuery):
    text = ("üí° –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å <i>¬´–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞¬ª</i>, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
            "–ì–¥–µ –∏—Ö –≤–∑—è—Ç—å? –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–∞–∂–∞–≤ –Ω–∞ <i>¬´–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞¬ª</i>.")
    if callback.message:
        await callback.message.edit_text(text, reply_markup=inline.get_yandex_init_keyboard())

@router.callback_query(F.data == 'yandex_ready_to_screenshot', UserState.YANDEX_REVIEW_INIT)
async def ask_for_yandex_screenshot(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
    if callback.message:
        prompt_msg = await callback.message.edit_text(
            "–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i> –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.\n\n"
            "‚ùóÔ∏è<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:</i>\n"
            "1. –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <i>–ø–æ–ª–Ω—ã–º</i>, –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏–π –∏ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è.\n"
            "2. –ù–∞ –Ω–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –≤–∞—à —É—Ä–æ–≤–µ–Ω—å <i>¬´–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞¬ª</i>.\n"
            "3. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ <i>–¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞</i>.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_yandex_ask_profile_screenshot_keyboard()
        )
        await state.update_data(prompt_message_id=prompt_msg.message_id)


@router.message(F.photo, UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_yandex_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    await delete_user_and_prompt_messages(message, state)
    if not message.photo: return
    
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.YANDEX_REVIEW_PROFILE_SCREENSHOT_PENDING)
    
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è Yandex. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—Ç–æ–∫–∞ –Ω–µ –Ω–∏–∂–µ 3 –∏ –≤–∏–¥–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞.\n"
               f"{user_info_text}")
    
    try:
        user_data = await state.get_data()
        review_type = user_data.get("yandex_review_type", "with_text")
        admin_id = await admin_roles.get_yandex_text_profile_admin() if review_type == "with_text" else await admin_roles.get_yandex_no_text_profile_admin()

        await bot.send_photo(
            chat_id=admin_id,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(
                user_id=message.from_user.id,
                context="yandex_profile_screenshot"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Yandex –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

async def start_yandex_liking_or_main_task(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, link, platform: str):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫)."""
    user_id = callback.from_user.id

    if link.is_fast_track:
        logger.info(f"Link {link.id} is a fast-track. Skipping liking step for user {user_id}.")
        await process_yandex_liking_completion(callback, state, bot, scheduler)
    else:
        await state.set_state(UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE)
        await state.update_data(username=callback.from_user.username, active_link_id=link.id)
        
        task_text = (
            "<b>–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω. –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>\n\n"
            f"üîó <a href='{link.url}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n"
            "üëÄ <i>–î–µ–π—Å—Ç–≤–∏—è</i>: –ü—Ä–æ–ª–æ–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –ø–æ–ª–∏—Å—Ç–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –º–µ—Å—Ç–∞. "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–∑—ã–≤–∞.\n\n"
            f"‚è≥ –ù–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å <i>{Durations.TASK_YANDEX_LIKING_TIMEOUT} –º–∏–Ω—É—Ç</i>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {Durations.TASK_YANDEX_LIKING_CONFIRM_APPEARS} –º–∏–Ω—É—Ç."
        )
        if callback.message:
            await callback.message.edit_text(task_text, disable_web_page_preview=True)
        
        now = datetime.datetime.now(datetime.timezone.utc)
        confirm_job = scheduler.add_job(send_yandex_liking_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=Durations.TASK_YANDEX_LIKING_CONFIRM_APPEARS), args=[bot, user_id])
        timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=Durations.TASK_YANDEX_LIKING_TIMEOUT), args=[bot, state.storage, user_id, platform, '—ç—Ç–∞–ø –ø—Ä–æ–≥—Ä–µ–≤–∞', scheduler])
        await state.update_data(confirm_job_id=confirm_job.id, timeout_job_id=timeout_job.id)


@router.callback_query(F.data == 'yandex_continue_task', UserState.YANDEX_REVIEW_READY_TO_TASK)
async def start_yandex_liking_step(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    review_type = user_data.get("yandex_review_type", "with_text")
    platform = f"yandex_{review_type}"

    link = await reference_manager.assign_reference_to_user(user_id, platform)
    if not link:
        if callback.message:
            await callback.message.edit_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è Yandex.–ö–∞—Ä—Ç ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}) –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    await start_yandex_liking_or_main_task(callback, state, bot, scheduler, link, platform)


@router.callback_query(F.data == 'yandex_confirm_liking_task', UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE)
async def process_yandex_liking_completion(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try: scheduler.remove_job(timeout_job_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")

    review_type = user_data.get("yandex_review_type", "with_text")

    if review_type == "with_text":
        await state.set_state(UserState.YANDEX_REVIEW_AWAITING_ADMIN_TEXT)
        if callback.message:
            response_msg = await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
            await schedule_message_deletion(response_msg, 25)
        
        user_id = callback.from_user.id
        user_info = await bot.get_chat(user_id)
        link_id = user_data.get('active_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        profile_screenshot_id = user_data.get("profile_screenshot_id")

        if not link:
            if callback.message:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
            await state.clear()
            return

        admin_notification_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: <code>{user_id}</code>) –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ Yandex (–° –¢–ï–ö–°–¢–û–ú).\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: <code>{link.url}</code>"
        )
        
        try:
            admin_id = await admin_roles.get_yandex_text_issue_admin()
            keyboard = inline.get_admin_provide_text_keyboard('yandex_with_text', user_id, link.id)
            if profile_screenshot_id:
                await bot.send_photo(chat_id=admin_id, photo=profile_screenshot_id, caption=admin_notification_text, reply_markup=keyboard)
            else:
                await bot.send_message(admin_id, admin_notification_text, reply_markup=keyboard, disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"Failed to send task to admin for Yandex: {e}")
    
    else: # review_type == "without_text"
        link_id = user_data.get('active_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        
        if not link:
            if callback.message:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
            await state.clear()
            return

        task_text = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href='{link.url}'>–°–°–´–õ–ö–ï</a>.\n"
            "2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ <b>5 –∑–≤–µ–∑–¥</b>.\n"
            "3. <b>–¢–µ–∫—Å—Ç –ø–∏—Å–∞—Ç—å –ù–ï –ù–£–ñ–ù–û.</b>\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞."
        )
        if callback.message:
            prompt_msg = await callback.message.edit_text(task_text, disable_web_page_preview=True)
            await state.update_data(prompt_message_id=prompt_msg.message_id)
        await state.set_state(UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)

@router.callback_query(F.data == 'yandex_with_text_confirm_task', UserState.YANDEX_REVIEW_TASK_ACTIVE)
async def process_yandex_review_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    if callback.message:
        await callback.message.delete()
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try: 
            scheduler.remove_job(timeout_job_id)
        except Exception: 
            pass
    await state.set_state(UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)
    prompt_msg = await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞</i>."
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

    
@router.message(F.photo, UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)
async def process_yandex_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    await delete_user_and_prompt_messages(message, state)
    if not message.photo: return
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_type = user_data.get("yandex_review_type", "with_text")
    platform = f"yandex_{review_type}"
    photo_file_id = message.photo[-1].file_id

    review_text = user_data.get('review_text', '')
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
        
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    caption = (
        f"üö® <b>–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Yandex</b> ({'–° –¢–ï–ö–°–¢–û–ú' if review_type == 'with_text' else '–ë–ï–ó –¢–ï–ö–°–¢–ê'}) üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: <code>{user_id}</code>)\n"
        f"–°—Å—ã–ª–∫–∞: <code>{link_url}</code>\n\n"
    )
    if review_text:
        caption += f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´<i>{review_text}</i>¬ª\n\n"
    else:
        caption += "–¢–∏–ø: –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ 5 –∑–≤–µ–∑–¥).\n\n"
        
    caption += "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    
    try:
        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform=platform,
            text=review_text,
            admin_message_id=0,
            screenshot_file_id=photo_file_id
        )

        if not review_id:
            raise Exception("Failed to create review draft in DB.")

        admin_id = await admin_roles.get_yandex_text_final_admin() if review_type == "with_text" else await admin_roles.get_yandex_no_text_final_admin()
        sent_message = await bot.send_photo(
            chat_id=admin_id,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )
        
        await db_manager.db_update_review_admin_message_id(review_id, sent_message.message_id)
        
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await state.clear()
        return

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ–©–ï–ì–û –°–ö–†–ò–ù–®–û–¢–ê ---

@router.message(F.photo, UserState.AWAITING_CONFIRMATION_SCREENSHOT)
async def process_confirmation_screenshot(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    """
    –õ–æ–≤–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.
    """
    if not message.photo:
        return

    data = await state.get_data()
    review_id = data.get('review_id_for_confirmation')

    if not review_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
        return

    review = await db_manager.get_review_by_id(review_id)
    if not review or not review.screenshot_file_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
        return
        
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    timeout_job_id = data.get('confirmation_timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception:
            pass


    try:
        await message.delete()
    except TelegramBadRequest:
        pass
        
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
    
    new_screenshot_file_id = message.photo[-1].file_id
    await db_manager.save_confirmation_screenshot(review_id, new_screenshot_file_id)
    
    admin_text = (
        f"üö® <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞</b> üö®\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)\n"
        f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Å—Ç–æ:</b> <a href='{review.link.url if review.link else ''}'>–ü–µ—Ä–µ–π—Ç–∏</a>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ä–∞–≤–Ω–∏—Ç–µ –¥–≤–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (—Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π) –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )

    media_group = [
        InputMediaPhoto(media=new_screenshot_file_id, caption=admin_text),
        InputMediaPhoto(media=review.screenshot_file_id)
    ]

    try:
        admin_id = await admin_roles.get_other_hold_admin()
        sent_messages = await bot.send_media_group(
            chat_id=admin_id,
            media=media_group
        )
        
        if sent_messages:
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try-except –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "message is not modified"
            try:
                await bot.edit_message_reply_markup(
                    chat_id=admin_id,
                    message_id=sent_messages[0].message_id,
                    reply_markup=inline.get_admin_final_verification_keyboard(review_id)
                )
            except TelegramBadRequest as e:
                if "message is not modified" not in str(e).lower():
                    raise e # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ –¥–∞–ª—å—à–µ
                else:
                    logger.warning("Ignored 'message is not modified' error when adding keyboard to media group.")

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞ {review_id} –∞–¥–º–∏–Ω—É: {e}")
        admin_id = await admin_roles.get_other_hold_admin()
        await bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∑—ã–≤–∞ #{review_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


@router.callback_query(F.data.in_({'review_zoon', 'review_avito', 'review_yandex_services'}))
async def handle_unsupported_services(callback: CallbackQuery):
    platform_map = {
        'review_zoon': 'Zoon',
        'review_avito': 'Avito',
        'review_yandex_services': 'Yandex.–£—Å–ª—É–≥–∏'
    }
    platform_name = platform_map.get(callback.data)
    await callback.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å {platform_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)

@router.callback_query(F.data == 'cancel_to_earning')
async def cancel_to_earning_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await earning_menu_logic(callback)