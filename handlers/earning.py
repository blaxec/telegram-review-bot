# file: handlers/earning.py

import datetime
import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState
from keyboards import inline, reply
from database import db_manager
from references import reference_manager
from config import ADMIN_ID_1, FINAL_CHECK_ADMIN

router = Router()
logger = logging.getLogger(__name__)

TEXT_ADMIN = ADMIN_ID_1

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def format_timedelta(td: datetime.timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú:–°–°."""
    total_seconds = int(td.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours:02}:{minutes:02}:{seconds:02}"

async def send_liking_confirmation_button(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ '–ª–∞–π–∫–æ–≤'."""
    try:
        await bot.send_message(
            user_id,
            "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=inline.get_liking_confirmation_keyboard()
        )
    except TelegramNetworkError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–ª–∞–π–∫–æ–≤' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ '–ª–∞–π–∫–æ–≤' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_confirmation_button(bot: Bot, user_id: int, platform: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    try:
        await bot.send_message(
            user_id,
            "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=inline.get_task_confirmation_keyboard(platform)
        )
    except TelegramNetworkError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_task_timeout(bot: Bot, dp: Dispatcher, user_id: int, platform: str, message_to_admins: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ª—é–±–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ –∑–∞–¥–∞–Ω–∏—è."""
    state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    
    current_state_str = await state.get_state()
    if not current_state_str:
        return

    user_data = await state.get_data()
    await reference_manager.release_reference_from_user(user_id, final_status='available')
    await db_manager.set_platform_cooldown(user_id, platform, 72)
    await state.clear()
    
    timeout_message = "–í—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∏—Å—Ç–µ–∫–ª–æ. –°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è (72:00:00)."
    admin_notification = f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data.get('username', '???')} (ID: {user_id}) –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ({message_to_admins}) –≤–æ–≤—Ä–µ–º—è. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."
    
    try:
        await bot.send_message(user_id, timeout_message, reply_markup=reply.get_main_menu_keyboard())
        await bot.send_message(FINAL_CHECK_ADMIN, admin_notification)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è {user_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ó–∞—Ä–∞–±–æ—Ç–∫–∞ ---

@router.message(F.text == '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', UserState.MAIN_MENU)
async def earning_handler(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await message.answer("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())

@router.callback_query(F.data == 'earning_write_review')
async def initiate_write_review(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:",
        reply_markup=inline.get_write_review_platform_keyboard()
    )
    
@router.callback_query(F.data == 'earning_menu_back')
async def earning_menu_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Google –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_google_maps')
async def initiate_google_review(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cooldown = await db_manager.check_platform_cooldown(user_id, "google")
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Google —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return

    if not await reference_manager.has_available_references('google_maps'):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è Google –ö–∞—Ä—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
        
    await state.set_state(UserState.GOOGLE_REVIEW_INIT)
    await callback.message.edit_text(
        "‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Google.–ö–∞—Ä—Ç–∞—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 15 –∑–≤–µ–∑–¥.\n\n"
        "üí° –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ "
        "**\"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\"** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.",
        reply_markup=inline.get_google_init_keyboard()
    )

@router.callback_query(F.data == 'google_review_done', UserState.GOOGLE_REVIEW_INIT)
async def process_google_review_done(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
        "–ø—Ä–∏—à–ª–∏—Ç–µ **—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è** –≤ Google.–ö–∞—Ä—Ç–∞—Ö. "
        "–û—Ç–∑—ã–≤—ã –Ω–∞ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=inline.get_google_ask_profile_screenshot_keyboard()
    )

@router.callback_query(F.data == 'google_get_profile_screenshot', UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def show_google_profile_screenshot_instructions(callback: CallbackQuery):
    await callback.message.edit_text(
        "ü§î –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Google.–ö–∞—Ä—Ç—ã:\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–ü—Ä–æ—Ñ–∏–ª—å Google Maps](https://www.google.com/maps/contrib/)\n"
        "2. –í–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Google –ö–∞—Ä—Ç—ã.\n"
        "3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–±–µ–∑ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–Ω–∏—è).",
        reply_markup=inline.get_google_ask_profile_screenshot_keyboard(),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

@router.message(F.photo, UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_google_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_PROFILE_CHECK_PENDING)
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: `{message.from_user.id}`)"
    caption = f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{user_info_text}"
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "google_profile")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.photo, UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
async def process_google_last_reviews_screenshot(message: Message, state: FSMContext, bot: Bot):
    await message.answer("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK_PENDING)
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: `{message.from_user.id}`)"
    caption = f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–Ω—Ç–µ—Ä–≤–∞–ª - 3 –¥–Ω—è.\n{user_info_text}"
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "google_last_reviews")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'google_continue_writing_review', UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
async def start_liking_step(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, dp: Dispatcher):
    await callback.message.delete()
    user_id = callback.from_user.id
    
    link = await reference_manager.assign_reference_to_user(user_id, 'google_maps')
    if not link:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    task_text = (
        "–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:\n\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ]({link.url})\n"
        "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.\n\n"
        "‚è≥ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å **10 –º–∏–Ω—É—Ç**. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
    )
    await callback.message.answer(task_text, parse_mode='Markdown', disable_web_page_preview=True)
    await state.set_state(UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
    await state.update_data(username=callback.from_user.username, active_link_id=link.id)
    
    now = datetime.datetime.now(datetime.timezone.utc)
    scheduler.add_job(send_liking_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=5), args=[bot, user_id])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=10), args=[bot, dp, user_id, 'google', '—ç—Ç–∞–ø –ª–∞–π–∫–æ–≤'])
    await state.update_data(timeout_job_id=timeout_job.id)

@router.callback_query(F.data == 'google_confirm_liking_task', UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
async def process_liking_completion(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    await callback.message.delete()
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")

    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_ADMIN_TEXT)
    await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
            
    user_info = await bot.get_chat(callback.from_user.id)
    link_id = user_data.get('active_link_id')
    link = await db_manager.db_get_link_by_id(link_id)
    profile_screenshot_id = user_data.get("profile_screenshot_id")

    if not link:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    admin_notification_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: `{callback.from_user.id}`) –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø '–ª–∞–π–∫–æ–≤' –∏ –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ Google.\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: `{link.url}`"
    )
    
    try:
        if profile_screenshot_id:
            await bot.send_photo(
                chat_id=TEXT_ADMIN,
                photo=profile_screenshot_id,
                caption=admin_notification_text,
                reply_markup=inline.get_admin_provide_text_keyboard(callback.from_user.id, link.id)
            )
        else:
            await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=inline.get_admin_provide_text_keyboard(callback.from_user.id, link.id))
    except Exception as e:
        logger.error(f"Failed to send task to TEXT_ADMIN {TEXT_ADMIN}: {e}")
        await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=inline.get_admin_provide_text_keyboard(callback.from_user.id, link.id))


@router.callback_query(F.data == 'google_confirm_task', UserState.GOOGLE_REVIEW_TASK_ACTIVE)
async def process_google_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    await callback.message.delete()
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")
    
    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞**."
    )

@router.message(F.photo, UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
async def process_google_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_text = user_data.get('review_text', '–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    caption = (
        f"üö® –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Google üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: `{user_id}`)\n"
        f"–°—Å—ã–ª–∫–∞: `{link_url}`\n\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´_{review_text}_¬ª\n\n"
        "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    
    try:
        sent_message = await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(0)
        )
        
        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform='google',
            text=review_text,
            admin_message_id=sent_message.message_id
        )

        await bot.edit_message_reply_markup(
            chat_id=FINAL_CHECK_ADMIN,
            message_id=sent_message.message_id,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Yandex –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_yandex_maps')
async def initiate_yandex_review(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cooldown = await db_manager.check_platform_cooldown(user_id, "yandex")
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Yandex —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return
    if not await reference_manager.has_available_references('yandex_maps'):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è Yandex.–ö–∞—Ä—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    await state.set_state(UserState.YANDEX_REVIEW_INIT)
    await callback.message.edit_text(
        "‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Yandex.–ö–∞—Ä—Ç–∞—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 50 –∑–≤–µ–∑–¥.\n\n"
        "üí° –ß—Ç–æ–±—ã –º—ã —Ç–æ—á–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–∑—ã–≤, –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üí° –¢–∞–∫–∂–µ –≤—ã–∫–ª—é—á–∏—Ç–µ **\"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\"** –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "üí° –ê–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–µ –Ω–∏–∂–µ **\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"**.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=inline.get_yandex_init_keyboard()
    )

@router.callback_query(F.data.in_({'yandex_get_profile_link', 'yandex_how_to_be_expert'}), UserState.YANDEX_REVIEW_INIT)
async def show_yandex_instructions(callback: CallbackQuery):
    if callback.data == 'yandex_get_profile_link':
        text = ("ü§î –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Yandex.–ö–∞—Ä—Ç—ã:\n\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Yandex.–ö–∞—Ä—Ç—ã.\n"
                "2. –í –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫—É.\n"
                "3. –ù–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É **\"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è\"**.\n"
                "4. –ù–∞–∂–º–∏—Ç–µ \"–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\" (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É, —Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω).")
    else:
        text = ("üí° –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å \"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\", –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
                "–ì–¥–µ –∏—Ö –≤–∑—è—Ç—å? –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–∞–∂–∞–≤ –Ω–∞ **\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"**.")
    await callback.message.edit_text(text, reply_markup=inline.get_yandex_init_keyboard())

@router.message(F.text, UserState.YANDEX_REVIEW_INIT)
async def process_yandex_profile_link(message: Message, state: FSMContext, bot: Bot):
    if not message.text or not message.text.strip().startswith("https://yandex.ru/maps/user/"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.",
                               reply_markup=inline.get_yandex_init_keyboard())
        return
    await message.answer("–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.YANDEX_REVIEW_PROFILE_CHECK_PENDING)
    caption = (
        f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å Yandex –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username} (ID: `{message.from_user.id}`)\n"
        f"–°—Å—ã–ª–∫–∞: {message.text}"
    )
    try:
        await bot.send_message(
            chat_id=FINAL_CHECK_ADMIN,
            text=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "yandex_profile"),
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Yandex –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'yandex_use_screenshot', UserState.YANDEX_REVIEW_INIT)
async def ask_for_yandex_screenshot(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ **—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è** –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.\n\n"
        "‚ùóÔ∏è**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:**\n"
        "1. –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ø–æ–ª–Ω—ã–º**, –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏–π –∏ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è.\n"
        "2. –ù–∞ –Ω–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –≤–∞—à —É—Ä–æ–≤–µ–Ω—å **\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"**.\n"
        "3. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ **–¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞**.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=inline.get_yandex_ask_profile_screenshot_keyboard()
    )

@router.message(F.photo, UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_yandex_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.YANDEX_REVIEW_PROFILE_SCREENSHOT_PENDING)
    
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: `{message.from_user.id}`)"
    caption = (f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n"
               f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è Yandex. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—Ç–æ–∫–∞ –∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞.\n"
               f"{user_info_text}")
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "yandex_profile_screenshot")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Yandex –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'yandex_continue_task', UserState.YANDEX_REVIEW_READY_TO_TASK)
async def start_yandex_review_task(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler, dp: Dispatcher):
    await callback.message.delete()
    user_id = callback.from_user.id
    link = await reference_manager.assign_reference_to_user(user_id, 'yandex_maps')
    if not link:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è Yandex.–ö–∞—Ä—Ç –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    task_text = (
        "–û—Ç–ª–∏—á–Ω–æ! –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n\n"
        "‚è≥ –ù–∞ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–µ—Ç—Å—è **30 –º–∏–Ω—É—Ç**.\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ]({link.url}) **–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–µ–π —á–µ—Ä–µ–∑ Telegram –Ω–µ–ª—å–∑—è!**\n"
        "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.\n"
        "üëç –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ª–∞–π–∫–∏.\n\n"
        "–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ \"–í—ã–ø–æ–ª–Ω–µ–Ω–æ\"."
    )
    await callback.message.answer(task_text, parse_mode='Markdown', disable_web_page_preview=True)
    await state.set_state(UserState.YANDEX_REVIEW_TASK_ACTIVE)
    await state.update_data(username=callback.from_user.username)
    now = datetime.datetime.now(datetime.timezone.utc)
    scheduler.add_job(send_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=10), args=[bot, user_id, 'yandex'])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=30), args=[bot, dp, user_id, 'yandex', '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'])
    await state.update_data(timeout_job_id=timeout_job.id)

@router.callback_query(F.data == 'yandex_confirm_task', UserState.YANDEX_REVIEW_TASK_ACTIVE)
async def process_yandex_review_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    await callback.message.delete()
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try: scheduler.remove_job(timeout_job_id)
        except: pass
    await state.set_state(UserState.YANDEX_REVIEW_AWAITING_TEXT_PHOTO)
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å **–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞** (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ 5 –∑–≤–µ–∑–¥).\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –°–∏—Å—Ç–µ–º—ã –Ø–Ω–¥–µ–∫—Å–∞ –º–æ–≥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã. "
        "–ß—Ç–æ–±—ã –≤–∞—à –æ—Ç–∑—ã–≤ —Å –±–æ–ª—å—à–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–æ—à–µ–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–±–∏—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é."
    )
    
@router.message(F.text, UserState.YANDEX_REVIEW_AWAITING_TEXT_PHOTO)
async def process_yandex_review_text(message: Message, state: FSMContext):
    await state.update_data(review_text=message.text)
    await message.answer("–¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞**.")

@router.message(F.photo, UserState.YANDEX_REVIEW_AWAITING_TEXT_PHOTO)
async def process_yandex_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_text = user_data.get('review_text', '–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
        
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    caption = (
        f"üö® –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Yandex üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: `{user_id}`)\n"
        f"–°—Å—ã–ª–∫–∞: `{link_url}`\n\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´_{review_text}_¬ª\n\n"
        "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    
    try:
        sent_message = await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(0)
        )

        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform='yandex',
            text=review_text,
            admin_message_id=sent_message.message_id
        )

        await bot.edit_message_reply_markup(
            chat_id=FINAL_CHECK_ADMIN,
            message_id=sent_message.message_id,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await state.clear()
        return

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


# --- –ü—Ä–æ—á–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ---
@router.callback_query(F.data == 'review_yandex_services')
async def handle_yandex_services(callback: CallbackQuery):
    await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å Yandex.–£—Å–ª—É–≥–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)