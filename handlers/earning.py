# file: handlers/earning.py

import datetime
import logging
from aiogram import Router, F, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from states.user_states import UserState, AdminState
from keyboards import inline, reply
from database import db_manager
from references import reference_manager
from config import ADMIN_ID_1, FINAL_CHECK_ADMIN
from logic.user_notifications import (
    format_timedelta,
    send_liking_confirmation_button,
    send_yandex_liking_confirmation_button,
    handle_task_timeout
)

router = Router()
logger = logging.getLogger(__name__)

TEXT_ADMIN = ADMIN_ID_1

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ó–∞—Ä–∞–±–æ—Ç–∫–∞ ---

@router.message(F.text == '–ó–∞—Ä–∞–±–æ—Ç–æ–∫', UserState.MAIN_MENU)
async def earning_handler_message(message: Message, state: FSMContext):
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ä–æ–µ –±—ã–ª–æ —Å Reply –∫–Ω–æ–ø–∫–æ–π
    await message.answer("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())

async def earning_menu_logic(callback: CallbackQuery):
    if callback.message:
        await callback.message.edit_text("üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞:", reply_markup=inline.get_earning_keyboard())

@router.callback_query(F.data == 'earning_menu')
async def earning_handler_callback(callback: CallbackQuery, state: FSMContext):
    await earning_menu_logic(callback)


@router.callback_query(F.data == 'earning_write_review')
async def initiate_write_review(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞:",
            reply_markup=inline.get_write_review_platform_keyboard()
        )
    
@router.callback_query(F.data == 'earning_menu_back')
async def earning_menu_back(callback: CallbackQuery, state: FSMContext):
    await earning_menu_logic(callback)

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Google –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_google_maps')
async def initiate_google_review(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cooldown = await db_manager.check_platform_cooldown(user_id, "google")
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Google —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return

    if not await reference_manager.has_available_references('google_maps'):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è Google –ö–∞—Ä—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
        
    await state.set_state(UserState.GOOGLE_REVIEW_INIT)
    if callback.message:
        await callback.message.edit_text(
            "‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Google.–ö–∞—Ä—Ç–∞—Ö –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 15 –∑–≤–µ–∑–¥.\n\n"
            "üí° –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç–µ "
            "<i>\"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\"</i> –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.",
            reply_markup=inline.get_google_init_keyboard()
        )

@router.callback_query(F.data == 'google_review_done', F.state == UserState.GOOGLE_REVIEW_INIT)
async def process_google_review_done(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
    if callback.message:
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, "
            "–ø—Ä–∏—à–ª–∏—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i> –≤ Google.–ö–∞—Ä—Ç–∞—Ö. "
            "–û—Ç–∑—ã–≤—ã –Ω–∞ –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_google_ask_profile_screenshot_keyboard()
        )

@router.callback_query(F.data == 'google_get_profile_screenshot', F.state == UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def show_google_profile_screenshot_instructions(callback: CallbackQuery):
    if callback.message:
        await callback.message.edit_text(
            "ü§î –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Google.–ö–∞—Ä—Ç—ã:\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://www.google.com/maps/contrib/'>–ü—Ä–æ—Ñ–∏–ª—å Google Maps</a>\n"
            "2. –í–∞—Å –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Google –ö–∞—Ä—Ç—ã.\n"
            "3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–±–µ–∑ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–Ω–∏—è).",
            reply_markup=inline.get_google_ask_profile_screenshot_keyboard(),
            disable_web_page_preview=True
        )

@router.message(F.photo, F.state == UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_google_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    if not message.photo: return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    try:
        if message.reply_to_message: await bot.delete_message(message.chat.id, message.reply_to_message.message_id)
    except: pass
    
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_PROFILE_CHECK_PENDING)
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n{user_info_text}"
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "google_profile")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.photo, F.state == UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK)
async def process_google_last_reviews_screenshot(message: Message, state: FSMContext, bot: Bot):
    if not message.photo: return
    await message.answer("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK_PENDING)
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–Ω—Ç–µ—Ä–≤–∞–ª - 3 –¥–Ω—è.\n{user_info_text}"
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "google_last_reviews")
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'google_continue_writing_review', F.state == UserState.GOOGLE_REVIEW_READY_TO_CONTINUE)
async def start_liking_step(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback.from_user.id
    
    link = await reference_manager.assign_reference_to_user(user_id, 'google_maps')
    if not link:
        if callback.message:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    task_text = (
        "–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:\n\n"
        f"üîó <a href='{link.url}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n"
        "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.\n\n"
        "‚è≥ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <i>10 –º–∏–Ω—É—Ç</i>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
    )
    if callback.message:
        await callback.message.edit_text(task_text, disable_web_page_preview=True)
    await state.set_state(UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
    await state.update_data(username=callback.from_user.username, active_link_id=link.id)
    
    now = datetime.datetime.now(datetime.timezone.utc)
    scheduler.add_job(send_liking_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=5), args=[bot, user_id])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=10), args=[bot, state.storage, user_id, 'google', '—ç—Ç–∞–ø –ª–∞–π–∫–æ–≤'])
    await state.update_data(timeout_job_id=timeout_job.id)

@router.callback_query(F.data == 'google_confirm_liking_task', F.state == UserState.GOOGLE_REVIEW_LIKING_TASK_ACTIVE)
async def process_liking_completion(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")

    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_ADMIN_TEXT)
    if callback.message:
        await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
            
    user_info = await bot.get_chat(callback.from_user.id)
    link_id = user_data.get('active_link_id')
    link = await db_manager.db_get_link_by_id(link_id)
    profile_screenshot_id = user_data.get("profile_screenshot_id")

    if not link:
        if callback.message:
            await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    admin_notification_text = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: <code>{callback.from_user.id}</code>) –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø '–ª–∞–π–∫–æ–≤' –∏ –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ Google.\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: <code>{link.url}</code>"
    )
    
    try:
        keyboard = inline.get_admin_provide_text_keyboard('google', callback.from_user.id, link.id)
        if profile_screenshot_id:
            await bot.send_photo(
                chat_id=TEXT_ADMIN,
                photo=profile_screenshot_id,
                caption=admin_notification_text,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Failed to send task to TEXT_ADMIN {TEXT_ADMIN}: {e}")
        keyboard = inline.get_admin_provide_text_keyboard('google', callback.from_user.id, link.id)
        await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=keyboard)


@router.callback_query(F.data == 'google_confirm_task', F.state == UserState.GOOGLE_REVIEW_TASK_ACTIVE)
async def process_google_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try:
            scheduler.remove_job(timeout_job_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")
    
    await state.set_state(UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
    if callback.message:
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞</i>."
        )

@router.message(F.photo, F.state == UserState.GOOGLE_REVIEW_AWAITING_SCREENSHOT)
async def process_google_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    if not message.photo: return
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_text = user_data.get('review_text', '–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    caption = (
        f"üö® –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Google üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: <code>{user_id}</code>)\n"
        f"–°—Å—ã–ª–∫–∞: <code>{link_url}</code>\n\n"
        f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´<i>{review_text}</i>¬ª\n\n"
        "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    )
    
    try:
        sent_message = await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(0)
        )
        
        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform='google',
            text=review_text,
            admin_message_id=sent_message.message_id
        )

        await bot.edit_message_reply_markup(
            chat_id=FINAL_CHECK_ADMIN,
            message_id=sent_message.message_id,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è Yandex –ö–∞—Ä—Ç ---

@router.callback_query(F.data == 'review_yandex_maps')
async def choose_yandex_review_type(callback: CallbackQuery, state: FSMContext):
    if callback.message:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–∑—ã–≤–∞ –¥–ª—è Yandex.–ö–∞—Ä—Ç:",
            reply_markup=inline.get_yandex_review_type_keyboard()
        )

@router.callback_query(F.data.startswith('yandex_review_type:'))
async def initiate_yandex_review(callback: CallbackQuery, state: FSMContext):
    review_type = callback.data.split(':')[1]
    user_id = callback.from_user.id
    
    platform = f"yandex_{review_type}" # yandex_with_text –∏–ª–∏ yandex_without_text
    
    cooldown = await db_manager.check_platform_cooldown(user_id, "yandex")
    if cooldown:
        await callback.answer(f"–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –≤ Yandex —á–µ—Ä–µ–∑ {format_timedelta(cooldown)}.", show_alert=True)
        return
        
    if not await reference_manager.has_available_references(platform):
        await callback.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–¥–∞–Ω–∏—è –¥–ª—è 'Yandex ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'})' –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", show_alert=True)
        return
    
    await state.update_data(yandex_review_type=review_type)
    await state.set_state(UserState.YANDEX_REVIEW_INIT)

    reward = 50 if review_type == "with_text" else 15
    
    if callback.message:
        await callback.message.edit_text(
            f"‚≠ê –ó–∞ –æ—Ç–∑—ã–≤ –≤ Yandex.–ö–∞—Ä—Ç–∞—Ö ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}) –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è {reward} –∑–≤–µ–∑–¥.\n\n"
            "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "üí° –¢–∞–∫–∂–µ –≤—ã–∫–ª—é—á–∏—Ç–µ <i>\"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\"</i> –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "üí° –ê–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –Ω–µ –Ω–∏–∂–µ <i>\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"</i>.",
            reply_markup=inline.get_yandex_init_keyboard()
        )


@router.callback_query(F.data == 'yandex_how_to_be_expert', F.state == UserState.YANDEX_REVIEW_INIT)
async def show_yandex_instructions(callback: CallbackQuery):
    text = ("üí° –ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å \"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\", –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n"
            "–ì–¥–µ –∏—Ö –≤–∑—è—Ç—å? –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–∞–∂–∞–≤ –Ω–∞ <i>\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"</i>.")
    if callback.message:
        await callback.message.edit_text(text, reply_markup=inline.get_yandex_init_keyboard())

@router.callback_query(F.data == 'yandex_ready_to_screenshot', F.state == UserState.YANDEX_REVIEW_INIT)
async def ask_for_yandex_screenshot(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
    if callback.message:
        await callback.message.edit_text(
            "–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</i> –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.\n\n"
            "‚ùóÔ∏è<i>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É:</i>\n"
            "1. –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <i>–ø–æ–ª–Ω—ã–º</i>, –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏–π –∏ –∑–∞–º–∞–∑—ã–≤–∞–Ω–∏—è.\n"
            "2. –ù–∞ –Ω–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –≤–∞—à —É—Ä–æ–≤–µ–Ω—å <i>\"–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞\"</i>.\n"
            "3. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ <i>–¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞</i>.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=inline.get_yandex_ask_profile_screenshot_keyboard()
        )

@router.message(F.photo, F.state == UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT)
async def process_yandex_profile_screenshot(message: Message, state: FSMContext, bot: Bot):
    if not message.photo: return
    photo_file_id = message.photo[-1].file_id
    await state.update_data(profile_screenshot_id=photo_file_id)
    
    await message.answer("–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...")
    await state.set_state(UserState.YANDEX_REVIEW_PROFILE_SCREENSHOT_PENDING)
    
    user_info_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: <code>{message.from_user.id}</code>)"
    caption = (f"[–ê–¥–º–∏–Ω: @SHAD0W_F4]\n"
               f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è Yandex. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∏–¥–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—Ç–æ–∫–∞ –∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞.\n"
               f"{user_info_text}")
    try:
        await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=photo_file_id,
            caption=caption,
            reply_markup=inline.get_admin_verification_keyboard(message.from_user.id, "yandex_profile_screenshot")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ Yandex –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == 'yandex_continue_task', F.state == UserState.YANDEX_REVIEW_READY_TO_TASK)
async def start_yandex_liking_step(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    review_type = user_data.get("yandex_review_type", "with_text")
    platform = f"yandex_{review_type}"

    link = await reference_manager.assign_reference_to_user(user_id, platform)
    if not link:
        if callback.message:
            await callback.message.edit_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è Yandex.–ö–∞—Ä—Ç ({'—Å —Ç–µ–∫—Å—Ç–æ–º' if review_type == 'with_text' else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}) –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=inline.get_earning_keyboard())
        await state.clear()
        return

    await state.set_state(UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE)
    await state.update_data(username=callback.from_user.username, active_link_id=link.id)
    
    task_text = (
        "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–¥–æ–±—Ä–µ–Ω. –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:\n\n"
        f"üîó <a href='{link.url}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>\n"
        "üëÄ <i>–î–µ–π—Å—Ç–≤–∏—è</i>: –ü—Ä–æ–ª–æ–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –ø–æ–ª–∏—Å—Ç–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –º–µ—Å—Ç–∞. "
        "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–∑—ã–≤–∞.\n\n"
        "‚è≥ –ù–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É –≤–∞—Å –µ—Å—Ç—å <i>10 –º–∏–Ω—É—Ç</i>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
    )
    if callback.message:
        await callback.message.edit_text(task_text, disable_web_page_preview=True)
    
    now = datetime.datetime.now(datetime.timezone.utc)
    scheduler.add_job(send_yandex_liking_confirmation_button, 'date', run_date=now + datetime.timedelta(minutes=5), args=[bot, user_id])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=now + datetime.timedelta(minutes=10), args=[bot, state.storage, user_id, 'yandex', '—ç—Ç–∞–ø –ø—Ä–æ–≥—Ä–µ–≤–∞'])
    await state.update_data(timeout_job_id=timeout_job.id)


@router.callback_query(F.data == 'yandex_confirm_liking_task', F.state == UserState.YANDEX_REVIEW_LIKING_TASK_ACTIVE)
async def process_yandex_liking_completion(callback: CallbackQuery, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try: scheduler.remove_job(timeout_job_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —Ç–∞–π–º–∞—É—Ç–∞ {timeout_job_id}: {e}")

    review_type = user_data.get("yandex_review_type", "with_text")

    # --- –†–ê–ó–î–ï–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò ---
    if review_type == "with_text":
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –∂–¥–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
        await state.set_state(UserState.YANDEX_REVIEW_AWAITING_ADMIN_TEXT)
        if callback.message:
            await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç –¥–ª—è –≤–∞—Å —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...")
        
        user_id = callback.from_user.id
        user_info = await bot.get_chat(user_id)
        link_id = user_data.get('active_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        profile_screenshot_id = user_data.get("profile_screenshot_id")

        if not link:
            if callback.message:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
            await state.clear()
            return

        admin_notification_text = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_info.username} (ID: <code>{user_id}</code>) –ø—Ä–æ—à–µ–ª —ç—Ç–∞–ø '–ø—Ä–æ–≥—Ä–µ–≤–∞' –∏ –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ Yandex (–° –¢–ï–ö–°–¢–û–ú).\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞: <code>{link.url}</code>"
        )

        try:
            keyboard = inline.get_admin_provide_text_keyboard('yandex_with_text', user_id, link.id)
            if profile_screenshot_id:
                await bot.send_photo(chat_id=TEXT_ADMIN, photo=profile_screenshot_id, caption=admin_notification_text, reply_markup=keyboard)
            else:
                await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=keyboard, disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"Failed to send task to TEXT_ADMIN {TEXT_ADMIN} for Yandex: {e}")
            keyboard = inline.get_admin_provide_text_keyboard('yandex_with_text', user_id, link.id)
            await bot.send_message(TEXT_ADMIN, admin_notification_text, reply_markup=keyboard)
    
    else: # review_type == "without_text"
        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        await state.set_state(UserState.YANDEX_REVIEW_TASK_ACTIVE)
        link_id = user_data.get('active_link_id')
        link = await db_manager.db_get_link_by_id(link_id)
        
        if not link:
            if callback.message:
                await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=inline.get_earning_keyboard())
            await state.clear()
            return

        task_text = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href='{link.url}'>–°–°–´–õ–ö–ï</a>.\n"
            "2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ <b>5 –∑–≤–µ–∑–¥</b>.\n"
            "3. <b>–¢–µ–∫—Å—Ç –ø–∏—Å–∞—Ç—å –ù–ï –ù–£–ñ–ù–û.</b>\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞."
        )
        if callback.message:
            await callback.message.edit_text(task_text, disable_web_page_preview=True)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await state.set_state(UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)


@router.callback_query(F.data == 'yandex_with_text_confirm_task', F.state == UserState.YANDEX_REVIEW_TASK_ACTIVE)
async def process_yandex_review_task_completion(callback: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    if callback.message:
        await callback.message.delete() # –£–¥–∞–ª—è–µ–º, —Ç.–∫. –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è
    user_data = await state.get_data()
    timeout_job_id = user_data.get('timeout_job_id')
    if timeout_job_id:
        try: 
            scheduler.remove_job(timeout_job_id)
        except Exception: 
            pass
    await state.set_state(UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <i>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞</i>."
    )
    
@router.message(F.photo, F.state == UserState.YANDEX_REVIEW_AWAITING_SCREENSHOT)
async def process_yandex_review_screenshot(message: Message, state: FSMContext, bot: Bot):
    if not message.photo: return
    user_data = await state.get_data()
    user_id = message.from_user.id
    review_type = user_data.get("yandex_review_type", "with_text")
    platform = f"yandex_{review_type}"

    review_text = user_data.get('review_text', '') # –ë—É–¥–µ—Ç –ø—É—Å—Ç—ã–º –¥–ª—è 'without_text'
    
    active_link_id = await reference_manager.get_user_active_link_id(user_id)
    if not active_link_id:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
        
    link_object = await db_manager.db_get_link_by_id(active_link_id)
    link_url = link_object.url if link_object else "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    caption = (
        f"üö® –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤–∞ Yandex ({'–° –¢–ï–ö–°–¢–û–ú' if review_type == 'with_text' else '–ë–ï–ó –¢–ï–ö–°–¢–ê'}) üö®\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_data.get('username')} (ID: <code>{user_id}</code>)\n"
        f"–°—Å—ã–ª–∫–∞: <code>{link_url}</code>\n\n"
    )
    if review_text:
        caption += f"–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞: ¬´<i>{review_text}</i>¬ª\n\n"
    else:
        caption += "–¢–∏–ø: –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ 5 –∑–≤–µ–∑–¥).\n\n"
        
    caption += "–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–∑—ã–≤ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ."
    
    try:
        sent_message = await bot.send_photo(
            chat_id=FINAL_CHECK_ADMIN,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=inline.get_admin_final_verdict_keyboard(0)
        )

        review_id = await db_manager.create_review_draft(
            user_id=user_id,
            link_id=active_link_id,
            platform=platform,
            text=review_text,
            admin_message_id=sent_message.message_id
        )

        await bot.edit_message_reply_markup(
            chat_id=FINAL_CHECK_ADMIN,
            message_id=sent_message.message_id,
            reply_markup=inline.get_admin_final_verdict_keyboard(review_id)
        )

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É {FINAL_CHECK_ADMIN}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await state.clear()
        return

    await state.clear()
    await state.set_state(UserState.MAIN_MENU)


# --- –ü—Ä–æ—á–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ---
@router.callback_query(F.data.in_({'review_zoon', 'review_avito'}))
async def handle_unsupported_services(callback: CallbackQuery):
    platform_name = "Zoon" if callback.data == 'review_zoon' else "Avito"
    await callback.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å {platform_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)

# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò –û–¢–ú–ï–ù–´ –ò–ó GMAIL ---
@router.callback_query(F.data == 'cancel_to_earning')
async def cancel_to_earning_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await earning_menu_logic(callback)