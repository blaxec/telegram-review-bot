import logging
import random
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from database import db_manager
from keyboards import inline
from states.user_states import AdminState
from config import AI_SCENARIO_CATEGORIES
from utils.access_filters import IsSuperAdmin

router = Router()
logger = logging.getLogger(__name__)

async def delete_and_clear_prompt(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞."""
    data = await state.get_data()
    prompt_message_id = data.get("prompt_message_id")
    if prompt_message_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_message_id)
        except TelegramBadRequest:
            pass
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    await state.update_data(prompt_message_id=None)

@router.message(Command("scenarios"), IsSuperAdmin())
async def scenarios_main_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    await state.clear()
    await message.answer(
        "‚úçÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è AI**",
        reply_markup=inline.get_scenarios_main_menu_keyboard()
    )

@router.callback_query(F.data == "scenarios:back_to_main")
async def back_to_scenarios_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚úçÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è AI**",
        reply_markup=inline.get_scenarios_main_menu_keyboard()
    )

@router.callback_query(F.data == "scenarios:add")
async def add_scenario_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminState.SCENARIO_CHOOSING_CATEGORY)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ + —Ç–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    existing_categories = await db_manager.get_all_scenario_categories()
    all_categories = sorted(list(set(AI_SCENARIO_CATEGORIES + existing_categories)))
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        reply_markup=inline.get_scenario_category_keyboard(all_categories, "scenarios:set_category")
    )

@router.callback_query(F.data.startswith("scenarios:set_category:"), AdminState.SCENARIO_CHOOSING_CATEGORY)
async def set_scenario_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":", 2)[2]
    await state.update_data(scenario_category=category)
    await state.set_state(AdminState.waiting_for_scenario_text)
    prompt_msg = await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category}**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:",
        reply_markup=inline.get_cancel_inline_keyboard("scenarios:back_to_main")
    )
    await state.update_data(prompt_message_id=prompt_msg.message_id)

@router.message(AdminState.waiting_for_scenario_text)
async def process_new_scenario_text(message: Message, state: FSMContext):
    await delete_and_clear_prompt(message, state)
    data = await state.get_data()
    category = data.get("scenario_category")
    text = message.text

    await db_manager.create_ai_scenario(category, text)
    await message.answer(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    await scenarios_main_menu(message, state)

@router.callback_query(F.data == "scenarios:view")
async def view_scenarios_start(callback: CallbackQuery):
    categories = await db_manager.get_all_scenario_categories()
    if not categories:
        await callback.answer("–°—Ü–µ–Ω–∞—Ä–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:",
        reply_markup=inline.get_scenario_category_keyboard(sorted(categories), "scenarios:view_category")
    )

@router.callback_query(F.data.startswith("scenarios:view_category:"))
async def view_scenarios_by_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":", 2)[2]
    await state.update_data(current_view_category=category) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    scenarios = await db_manager.get_ai_scenarios_by_category(category)
    
    if not scenarios:
        await callback.message.edit_text(
            f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category}** –Ω–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.",
            reply_markup=inline.get_back_to_scenario_categories_keyboard()
        )
        return

    text = f"–°—Ü–µ–Ω–∞—Ä–∏–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **{category}**:\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    builder = inline.InlineKeyboardBuilder()
    for s in scenarios:
        text += f"‚Ä¢ `{s.id}`: {s.text[:50]}...\n"
        builder.button(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{s.id}", callback_data=f"scenarios:delete:{s.id}")
    
    builder.button(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="scenarios:view")
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "back_to_scenario_categories")
async def back_to_scenario_categories(callback: CallbackQuery):
    await view_scenarios_start(callback)

@router.callback_query(F.data.startswith("scenarios:delete:"))
async def delete_scenario(callback: CallbackQuery, state: FSMContext):
    scenario_id = int(callback.data.split(":")[2])
    deleted = await db_manager.delete_ai_scenario(scenario_id)
    if deleted:
        await callback.answer("–°—Ü–µ–Ω–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω.", show_alert=True)
        data = await state.get_data()
        category = data.get("current_view_category")
        if category:
            callback.data = f"scenarios:view_category:{category}"
            await view_scenarios_by_category(callback, state)
        else:
            await back_to_scenarios_main_menu(callback, state)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π.", show_alert=True)