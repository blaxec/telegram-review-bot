# file: logic/ocr_helper.py

import logging
import datetime
import re
from io import BytesIO
from itertools import cycle
from typing import Literal, Dict, Any, List

import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
from aiogram import Bot

from config import GOOGLE_API_KEYS, ADMIN_ID_1

logger = logging.getLogger(__name__)

AnalysisTask = Literal['yandex_level', 'review_date']

class GeminiKeyManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º API-–∫–ª—é—á–µ–π Google Gemini."""
    def __init__(self, api_keys: List[str]):
        self.keys = api_keys
        self.key_iterator = cycle(self.keys)
        self.exhausted_keys = set()

    def get_next_key(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–ª—é—á –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Å–µ –∏—Å—á–µ—Ä–ø–∞–Ω—ã."""
        if not self.keys:
            return None
        if len(self.exhausted_keys) == len(self.keys):
            logger.error("All Google API keys are exhausted.")
            return None
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Ä–∞–±–æ—á–∏–π –∫–ª—é—á
        for _ in range(len(self.keys)):
            key = next(self.key_iterator)
            if key not in self.exhausted_keys:
                return key
        return None

    def mark_key_as_exhausted(self, key: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∫–ª—é—á –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–≤—à–∏–π –ª–∏–º–∏—Ç."""
        logger.warning(f"Google API key ending with '...{key[-4:]}' has been marked as exhausted.")
        self.exhausted_keys.add(key)

# –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –≤—Å–µ–≥–æ –±–æ—Ç–∞
key_manager = GeminiKeyManager(GOOGLE_API_KEYS)


async def _get_image_from_telegram(bot: Bot, file_id: str) -> BytesIO | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ file_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ BytesIO."""
    try:
        file_info = await bot.get_file(file_id)
        if not file_info.file_path:
            return None
        
        image_bytes = await bot.download_file(file_info.file_path)
        return image_bytes
    except Exception as e:
        logger.error(f"Failed to download image with file_id {file_id}: {e}")
        return None

def _parse_yandex_level(text: str) -> int | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ AI."""
    # –ò—â–µ–º —á–∏—Å–ª–∞ (—Ü–µ–ª—ã–µ –∏–ª–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π)
    numbers = re.findall(r'\d+', text)
    if numbers:
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            return int(numbers[0])
        except (ValueError, IndexError):
            return None
    return None

def _parse_review_date(text: str) -> datetime.date | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ AI."""
    # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    match = re.search(r'(\d{2})\.(\d{2})\.(\d{4})', text)
    if match:
        try:
            day, month, year = map(int, match.groups())
            return datetime.date(year, month, day)
        except ValueError:
            return None
    return None


async def analyze_screenshot(bot: Bot, file_id: str, task: AnalysisTask) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é Google Gemini Vision, —É–ø—Ä–∞–≤–ª—è—è API-–∫–ª—é—á–∞–º–∏.
    """
    if not GOOGLE_API_KEYS:
        return {"status": "error", "message": "OCR service is not configured."}

    image_bytes = await _get_image_from_telegram(bot, file_id)
    if not image_bytes:
        return {"status": "error", "message": "Failed to download image from Telegram."}

    image_for_api = {'mime_type': 'image/png', 'data': image_bytes.getvalue()}
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
    if task == 'yandex_level':
        prompt = "–ù–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –Ω–∞–π–¥–∏ —É—Ä–æ–≤–µ–Ω—å '–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞'. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å. –ù–∞–ø—Ä–∏–º–µ—Ä: 5"
    elif task == 'review_date':
        prompt = "–ù–∞ —ç—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞–π–¥–∏ –¥–∞—Ç—É —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–≤–µ—Ä—Ö–Ω–µ–≥–æ) –æ—Ç–∑—ã–≤–∞. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —ç—Ç—É –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ù–∞–ø—Ä–∏–º–µ—Ä: 21.08.2025"
    else:
        return {"status": "error", "message": f"Unknown OCR task: {task}"}

    # –¶–∏–∫–ª –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –∫–ª—é—á–µ–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–≤–æ—Ç—ã
    for _ in range(len(GOOGLE_API_KEYS)):
        api_key = key_manager.get_next_key()
        if not api_key:
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
                await bot.send_message(ADMIN_ID_1, "üö® –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Google Gemini) –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.")
            except Exception as e:
                logger.error(f"Failed to notify admin about exhausted keys: {e}")
            return {"status": "error", "message": "All API keys are exhausted."}
        
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')

        try:
            logger.info(f"Attempting OCR with key ...{api_key[-4:]} for task '{task}'.")
            response = await model.generate_content_async([prompt, image_for_api])
            
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
            raw_text = response.text.strip()
            logger.info(f"Gemini response for task '{task}': '{raw_text}'")

            if task == 'yandex_level':
                level = _parse_yandex_level(raw_text)
                if level is not None:
                    return {"status": "success", "level": level}
            
            elif task == 'review_date':
                date = _parse_review_date(raw_text)
                if date:
                    return {"status": "success", "date": date}

            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º
            return {"status": "uncertain", "reason": "Could not parse AI response.", "raw_text": raw_text}

        except google_exceptions.ResourceExhausted as e:
            logger.warning(f"Quota exhausted for Google API key ...{api_key[-4:]}. Trying next key.")
            key_manager.mark_key_as_exhausted(api_key)
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞, —á—Ç–æ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                await bot.send_message(ADMIN_ID_1, f"üîî API –∫–ª—é—á Google Gemini (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ...{api_key[-4:]}) –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.")
            except Exception as admin_notify_error:
                logger.error(f"Failed to notify admin about exhausted key: {admin_notify_error}")
            continue # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É

        except Exception as e:
            logger.exception(f"An unexpected error occurred with Google Gemini API using key ...{api_key[-4:]}")
            return {"status": "error", "message": str(e)}

    # –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –∫–ª—é—á–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–±—Ä–∞–Ω—ã –∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    return {"status": "error", "message": "All available API keys failed or are exhausted."}