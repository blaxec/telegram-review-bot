# file: logic/ocr_helper.py

import logging
import datetime
import re
import json
from io import BytesIO
from itertools import cycle
from typing import Literal, Dict, Any, List, Optional

import pytz
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions
from aiogram import Bot

from config import GOOGLE_API_KEYS, ADMIN_ID_1

logger = logging.getLogger(__name__)

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
AnalysisTask = Literal['yandex_level', 'review_date_check']
almaty_tz = pytz.timezone('Asia/Almaty')

class GeminiKeyManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º API-–∫–ª—é—á–µ–π Google Gemini."""
    def __init__(self, api_keys: List[str]):
        self.keys = api_keys
        self.key_iterator = cycle(self.keys)
        self.exhausted_keys = set()
        if not self.keys:
            logger.warning("OCR Key Manager initialized with no keys.")

    def get_next_key(self) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–ª—é—á –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Å–µ –∏—Å—á–µ—Ä–ø–∞–Ω—ã."""
        if not self.keys:
            return None
        if len(self.exhausted_keys) == len(self.keys):
            logger.error("All Google API keys are exhausted.")
            return None
        
        for _ in range(len(self.keys)):
            key = next(self.key_iterator)
            if key not in self.exhausted_keys:
                return key
        return None

    def mark_key_as_exhausted(self, key: str):
        """–ü–æ–º–µ—á–∞–µ—Ç –∫–ª—é—á –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–≤—à–∏–π –ª–∏–º–∏—Ç."""
        logger.warning(f"Google API key ending with '...{key[-4:]}' has been marked as exhausted.")
        self.exhausted_keys.add(key)

key_manager = GeminiKeyManager(GOOGLE_API_KEYS)


async def _get_image_from_telegram(bot: Bot, file_id: str) -> BytesIO | None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ file_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ BytesIO."""
    try:
        file_info = await bot.get_file(file_id)
        if not file_info.file_path:
            return None
        
        image_bytes = await bot.download_file(file_info.file_path)
        return image_bytes
    except Exception as e:
        logger.error(f"Failed to download image with file_id {file_id}: {e}")
        return None


async def analyze_screenshot(bot: Bot, file_id: str, task: AnalysisTask) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–º–æ—â—å—é Google Gemini Vision, —É–ø—Ä–∞–≤–ª—è—è API-–∫–ª—é—á–∞–º–∏.
    """
    if not GOOGLE_API_KEYS:
        return {"status": "error", "message": "OCR service is not configured."}

    image_bytes = await _get_image_from_telegram(bot, file_id)
    if not image_bytes:
        return {"status": "error", "message": "Failed to download image from Telegram."}

    image_for_api = {'mime_type': 'image/jpeg', 'data': image_bytes.getvalue()}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º '—Å–µ–≥–æ–¥–Ω—è' –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ê–ª–º–∞—Ç—ã
    today_in_almaty = datetime.datetime.now(almaty_tz).date()
    today_str = today_in_almaty.strftime('%d.%m.%Y')
    
    prompt = ""
    if task == 'yandex_level':
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç. –ù–∞–π–¥–∏ —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å "–ó–Ω–∞—Ç–æ–∫–∞ –≥–æ—Ä–æ–¥–∞".
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        - –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –≤–∏–¥–∏—à—å —á–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –≤–µ—Ä–Ω–∏: {{"status": "success", "level": –ß–ò–°–õ–û}}
        - –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —É—Ä–æ–≤–µ–Ω—å, –≤–µ—Ä–Ω–∏: {{"status": "uncertain", "reason": "–£—Ä–æ–≤–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"}}
        –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {{"status": "success", "level": 5}}
        """
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π, —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç—ã ---
    elif task == 'review_date_check':
        prompt = f"""
        –¢—ã ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Google –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤.

        –ö–û–ù–¢–ï–ö–°–¢:
        - –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω): **{today_str}**.
        - –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω **3 (—Ç—Ä–∏) –∏–ª–∏ –±–æ–ª–µ–µ –¥–Ω–µ–π –Ω–∞–∑–∞–¥**.

        –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
        1. –ù–∞–π–¥–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π, —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –æ—Ç–∑—ã–≤.
        2. –û–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –î–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–π ("15.08.2025") –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π ("–≤—á–µ—Ä–∞", "2 –¥–Ω—è –Ω–∞–∑–∞–¥", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥").
        3. –í—ã—á–∏—Å–ª–∏, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ –º–µ–∂–¥—É –¥–∞—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –∏ –°–ï–ì–û–î–ù–Ø–®–ù–ï–ô –¥–∞—Ç–æ–π ({today_str}).
        4. –ü—Ä–∏–º–µ–Ω–∏ –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û.
        5. –í–µ—Ä–Ω–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

        –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê JSON:
        - –ï—Å–ª–∏ —Ç—ã —É–≤–µ—Ä–µ–Ω –≤ –¥–∞—Ç–µ –∏ –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ:
          {{"status": "success", "is_valid": true/false, "days_passed": –ß–ò–°–õ–û_–î–ù–ï–ô, "detected_date_text": "–¢–ï–ö–°–¢_–î–ê–¢–´_–°_–ö–ê–†–¢–ò–ù–ö–ò", "reason": "–ö—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ"}}
        - –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –∏–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω:
          {{"status": "uncertain", "reason": "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"}}

        –ü–†–ò–ú–ï–†–´:
        - –°–µ–≥–æ–¥–Ω—è {today_str}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥". –û—Ç–≤–µ—Ç: {{"status": "success", "is_valid": true, "days_passed": 7, "detected_date_text": "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "reason": "–ü—Ä–æ—à–ª–æ 7 –¥–Ω–µ–π, —á—Ç–æ –±–æ–ª—å—à–µ 3."}}
        - –°–µ–≥–æ–¥–Ω—è {today_str}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ "–≤—á–µ—Ä–∞". –û—Ç–≤–µ—Ç: {{"status": "success", "is_valid": false, "days_passed": 1, "detected_date_text": "–≤—á–µ—Ä–∞", "reason": "–ü—Ä–æ—à–µ–ª 1 –¥–µ–Ω—å, —á—Ç–æ –º–µ–Ω—å—à–µ 3."}}
        - –°–µ–≥–æ–¥–Ω—è {today_str}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ "2 –¥–Ω—è –Ω–∞–∑–∞–¥". –û—Ç–≤–µ—Ç: {{"status": "success", "is_valid": false, "days_passed": 2, "detected_date_text": "2 –¥–Ω—è –Ω–∞–∑–∞–¥", "reason": "–ü—Ä–æ—à–ª–æ 2 –¥–Ω—è, —á—Ç–æ –º–µ–Ω—å—à–µ 3."}}
        - –°–µ–≥–æ–¥–Ω—è {today_str}. –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥". –û—Ç–≤–µ—Ç: {{"status": "success", "is_valid": true, "days_passed": 30, "detected_date_text": "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥", "reason": "–ü—Ä–æ—à–ª–æ –æ–∫–æ–ª–æ 30 –¥–Ω–µ–π, —á—Ç–æ –±–æ–ª—å—à–µ 3."}}
        - –ù–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–µ—Ç –≤–∏–¥–∏–º–æ–π –¥–∞—Ç—ã. –û—Ç–≤–µ—Ç: {{"status": "uncertain", "reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."}}
        """
    else:
        return {"status": "error", "message": f"Unknown OCR task: {task}"}

    for _ in range(len(GOOGLE_API_KEYS)):
        api_key = key_manager.get_next_key()
        if not api_key:
            try:
                await bot.send_message(ADMIN_ID_1, "üö® –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Google Gemini) –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.")
            except Exception as e:
                logger.error(f"Failed to notify admin about exhausted keys: {e}")
            return {"status": "error", "message": "All API keys are exhausted."}
        
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')

        try:
            logger.info(f"Attempting OCR with key ...{api_key[-4:]} for task '{task}'.")
            response = await model.generate_content_async([prompt, image_for_api])
            
            clean_response_text = response.text.strip()
            if clean_response_text.startswith("```json"):
                clean_response_text = clean_response_text[7:]
            if clean_response_text.endswith("```"):
                clean_response_text = clean_response_text[:-3]
            
            logger.info(f"Gemini response for task '{task}': '{clean_response_text}'")
            
            try:
                data = json.loads(clean_response_text)
                return data

            except json.JSONDecodeError:
                return {"status": "uncertain", "reason": "AI returned non-JSON response.", "raw_text": clean_response_text}

        except google_exceptions.ResourceExhausted as e:
            logger.warning(f"Quota exhausted for Google API key ...{api_key[-4:]}. Trying next key.")
            key_manager.mark_key_as_exhausted(api_key)
            try:
                await bot.send_message(ADMIN_ID_1, f"üîî API –∫–ª—é—á Google Gemini (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ...{api_key[-4:]}) –∏—Å—á–µ—Ä–ø–∞–ª —Å–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π.")
            except Exception as admin_notify_error:
                logger.error(f"Failed to notify admin about exhausted key: {admin_notify_error}")
            continue

        except Exception as e:
            logger.exception(f"An unexpected error occurred with Google Gemini API using key ...{api_key[-4:]}")
            return {"status": "error", "message": str(e)}

    return {"status": "error", "message": "All available API keys failed or are exhausted."}