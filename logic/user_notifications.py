# file: logic/user_notifications.py

import datetime
import logging
from aiogram import Bot
from aiogram.fsm.context import FSMContext
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: 'Storage' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ 'BaseStorage' –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö aiogram
from aiogram.fsm.storage.base import BaseStorage, StorageKey
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest

from keyboards import inline, reply
from database import db_manager
from references import reference_manager
from config import FINAL_CHECK_ADMIN

logger = logging.getLogger(__name__)


def format_timedelta(td: datetime.timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ –ß–ß:–ú–ú:–°–°."""
    total_seconds = int(td.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours:02}:{minutes:02}:{seconds:02}"

async def send_liking_confirmation_button(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ '–ª–∞–π–∫–æ–≤'."""
    try:
        await bot.send_message(
            user_id,
            "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=inline.get_liking_confirmation_keyboard()
        )
    except (TelegramNetworkError, TelegramBadRequest) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–ª–∞–π–∫–æ–≤' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ '–ª–∞–π–∫–æ–≤' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_yandex_liking_confirmation_button(bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ '–ø—Ä–æ–≥—Ä–µ–≤–∞' Yandex."""
    try:
        await bot.send_message(
            user_id,
            "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=inline.get_yandex_liking_confirmation_keyboard()
        )
    except (TelegramNetworkError, TelegramBadRequest) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è '–ø—Ä–æ–≥—Ä–µ–≤–∞' Yandex –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ '–ø—Ä–æ–≥—Ä–µ–≤–∞' Yandex –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_confirmation_button(bot: Bot, user_id: int, platform: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    try:
        await bot.send_message(
            user_id,
            "–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=inline.get_task_confirmation_keyboard(platform)
        )
    except (TelegramNetworkError, TelegramBadRequest) as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform} (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): {e}")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_task_timeout(bot: Bot, storage: BaseStorage, user_id: int, platform: str, message_to_admins: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ª—é–±–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤ –∑–∞–¥–∞–Ω–∏—è."""
    state = FSMContext(storage=storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    
    current_state_str = await state.get_state()
    if not current_state_str:
        logger.info(f"Timeout handler for user {user_id} triggered, but state is None. Aborting.")
        return

    logger.info(f"Timeout for user {user_id} on platform {platform}. Current state: {current_state_str}. Releasing reference and setting cooldown.")
    
    user_data = await state.get_data()
    await reference_manager.release_reference_from_user(user_id, final_status='available')
    await db_manager.set_platform_cooldown(user_id, platform, 72)
    await state.clear()
    
    timeout_message = "–í—Ä–µ–º—è, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∏—Å—Ç–µ–∫–ª–æ. –°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ —Ç—Ä–∏ –¥–Ω—è (72:00:00)."
    admin_notification = f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_data.get('username', '???')} (ID: {user_id}) –Ω–µ —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ({message_to_admins}) –≤–æ–≤—Ä–µ–º—è. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö."
    
    try:
        await bot.send_message(user_id, timeout_message, reply_markup=reply.get_main_menu_keyboard())
        await bot.send_message(FINAL_CHECK_ADMIN, admin_notification)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è {user_id}: {e}")

async def notify_cooldown_expired(bot: Bot, user_id: int, platform: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É–ª–¥–∞—É–Ω–∞."""
    platform_names = {
        "google": "Google –ö–∞—Ä—Ç–∞–º",
        "yandex": "Yandex –ö–∞—Ä—Ç–∞–º"
    }
    platform_name = platform_names.get(platform, platform)
    try:
        await bot.send_message(
            user_id,
            f"üéâ –ö—É–ª–¥–∞—É–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤—ã –≤ **{platform_name}**."
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è {platform} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")