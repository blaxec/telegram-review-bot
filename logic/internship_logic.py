# file: logic/internship_logic.py

import re
import logging
from math import ceil
from typing import Tuple, Dict, Optional, List, Union

from database.models import InternshipApplication, InternshipTask, User

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---

def format_applications_page(apps: List[InternshipApplication], page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–Ω–∫–µ—Ç."""
    if not apps:
        return "üìù <b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:</b>\n\n–ù–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ—Ç."
        
    text = "üìù <b>–ê–Ω–∫–µ—Ç—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞):</b>\n\n"
    for app in apps:
        date_str = app.created_at.strftime('%d.%m.%Y')
        text += f"‚Ä¢ /view_app_{app.id} –æ—Ç @{app.username} ({date_str})\n"
        
    text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    return text

def format_single_application(app: InternshipApplication) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–π –∞–Ω–∫–µ—Ç—ã."""
    text = (
        f"<b>–ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ @{app.username}</b> (ID: <code>{app.user_id}</code>)\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {app.age}\n"
        f"<b>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å:</b> {app.hours_per_day} —á/–¥–µ–Ω—å\n"
        f"<b>–ñ–µ–ª–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {app.platforms}\n"
        f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.created_at.strftime('%d.%m.%Y %H:%M')} UTC"
    )
    return text

def format_candidates_page(candidates: List[InternshipApplication], page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."""
    if not candidates:
        return "üßë‚Äçüéì <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã (–æ–∂–∏–¥–∞—é—Ç –∑–∞–¥–∞–Ω–∏—è):</b>\n\n–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤."
    
    text = "üßë‚Äçüéì <b>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è):</b>\n\n"
    for cand in candidates:
        text += f"‚Ä¢ /assign_task_{cand.user_id} (@{cand.username})\n"
        
    text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    return text

def format_interns_page(interns: List[User], page: int, total_pages: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–∂–µ—Ä–æ–≤."""
    if not interns:
        return "üë®‚Äçüíª <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–∂—ë—Ä—ã:</b>\n\n–ù–µ—Ç —Å—Ç–∞–∂–µ—Ä–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏–∏."
        
    text = "üë®‚Äçüíª <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–∂—ë—Ä—ã (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞):</b>\n\n"
    for intern in interns:
        username = f"@{intern.username}" if intern.username else f"ID {intern.id}"
        task_info = " (–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏)"
        if intern.internship_tasks:
            active_task = next((t for t in intern.internship_tasks if t.status == 'active'), None)
            if active_task:
                task_info = f" - {active_task.platform} ({active_task.current_progress}/{active_task.goal_count})"

        text += f"‚Ä¢ /view_intern_{intern.id} ({username}){task_info}\n"
        
    text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    return text