# file: logic/admin_logic.py

import logging
import datetime
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncio
from aiogram.types import Message
# -----------------------------------------
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import db_manager
from states.user_states import UserState
from keyboards import inline, reply
from references import reference_manager
from logic.promo_logic import check_and_apply_promo_reward
from logic.user_notifications import notify_cooldown_expired, send_confirmation_button, handle_task_timeout

logger = logging.getLogger(__name__)


# --- –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ---
async def process_add_links_logic(links_text: str, platform: str) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    """
    if not links_text:
        return "–¢–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    links = links_text.strip().split('\n')
    added_count, skipped_count = 0, 0

    for link in links:
        stripped_link = link.strip()
        if stripped_link and (stripped_link.startswith("http://") or stripped_link.startswith("https://")):
            try:
                if await db_manager.db_add_reference(stripped_link, platform):
                    added_count += 1
                else:
                    skipped_count += 1
            except Exception as e:
                logger.error(f"!!! –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É '{stripped_link}': {e}")
                skipped_count += 1
        elif stripped_link:
            logger.warning(f"Skipping invalid link format: {stripped_link}")
            skipped_count += 1

    return f"–ì–æ—Ç–æ–≤–æ!\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): {skipped_count}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –ò –û–¢–ö–õ–û–ù–ï–ù–ò–ô ---

async def process_rejection_reason_logic(bot: Bot, user_id: int, reason: str, context: str, user_state: FSMContext):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if context == "gmail_data_request" or context == "gmail_device_model":
        user_message_text = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
    elif context == "gmail_account":
        user_message_text = f"‚ùå –í–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Gmail –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
    else:
        user_message_text = f"‚ùå –í–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
        
    try:
        await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        return f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"


async def process_warning_reason_logic(bot: Bot, user_id: int, platform: str, reason: str, user_state: FSMContext, context: str):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    warnings_count = await db_manager.add_user_warning(user_id, platform=platform)
    user_message_text = f"‚ö†Ô∏è **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.**\n\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"

    if warnings_count >= 3:
        user_message_text += f"\n‚ùóÔ∏è **–≠—Ç–æ –≤–∞—à–µ 3-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform.capitalize()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 24 —á–∞—Å–∞.**"
        await user_state.clear()
        await user_state.set_state(UserState.MAIN_MENU)
    else:
        state_to_return_map = {
            "google_profile": UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT,
            "google_last_reviews": UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK,
            "yandex_profile": UserState.YANDEX_REVIEW_INIT,
            "yandex_profile_screenshot": UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT,
            "gmail_device_model": UserState.MAIN_MENU,
            "gmail_data_request": UserState.MAIN_MENU,
        }
        state_to_return = state_to_return_map.get(context)
        if state_to_return:
             await user_state.set_state(state_to_return)
        else: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
             await user_state.set_state(UserState.MAIN_MENU)
        user_message_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

    try:
        await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        return f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –¢–ï–ö–°–¢–ê –û–¢–ó–´–í–ê ---

async def send_review_text_to_user_logic(bot: Bot, dp: Dispatcher, scheduler: AsyncIOScheduler, user_id: int, link_id: int, platform: str, review_text: str):
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á."""
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
    user_info = await bot.get_chat(user_id)
    link = await db_manager.db_get_link_by_id(link_id)

    if not link:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await user_state.clear()
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É —Å ID {link_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    task_state, task_message, run_date_confirm, run_date_timeout = None, None, None, None

    if platform == "google":
        task_state = UserState.GOOGLE_REVIEW_TASK_ACTIVE
        task_message = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            "1. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π *–í –¢–û–ß–ù–û–°–¢–ò* —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º.\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ 5 –∑–≤–µ–∑–¥, –ø–µ—Ä–µ–ø–∏—Å–∞–≤ —Ç–µ–∫—Å—Ç.\n\n"
            "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏. –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º. –ö–û–ü–ò–†–û–í–ê–¢–¨ –ò –í–°–¢–ê–í–õ–Ø–¢–¨ –¢–ï–ö–°–¢ –ù–ï–õ–¨–ó–Ø\n\n"
            "<b>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞:</b>\n"
            f"{review_text}\n\n"
            f"üîó <b>[–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–î–ê–ù–ò–Æ]({link.url})</b> \n\n"
            "‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>15 –º–∏–Ω—É—Ç</b>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>7 –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=7)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=15)

    elif platform == "yandex_with_text":
        task_state = UserState.YANDEX_REVIEW_TASK_ACTIVE
        task_message = (
            "<b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
            "1. –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ. –í—ã –¥–æ–ª–∂–Ω—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ <b>5 –∑–≤–µ–∑–¥</b>, –∫–æ—Ç–æ—Ä—ã–π *–í –¢–û–ß–ù–û–°–¢–ò* —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º.\n\n"
            "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏. –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º. –ö–û–ü–ò–†–û–í–ê–¢–¨ –ò –í–°–¢–ê–í–õ–Ø–¢–¨ –¢–ï–ö–°–¢ –ù–ï–õ–¨–ó–Ø\n\n"
            "<b>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞:</b>\n"
            f"{review_text}\n\n"
            f"üîó <b>[–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–î–ê–ù–ò–Æ]({link.url})</b> \n\n"
            "‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>25 –º–∏–Ω—É—Ç</b>. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>10 –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=10)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=25)
    
    if not task_state:
        return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}"

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        last_message = (await user_state.get_data()).get('last_bot_message')
        if last_message:
            await bot.edit_message_text(task_message, user_id, last_message, parse_mode='HTML', disable_web_page_preview=True)
        else:
            sent_msg = await bot.send_message(user_id, task_message, parse_mode='HTML', disable_web_page_preview=True)
            await user_state.update_data(last_bot_message=sent_msg.message_id)
    except Exception as e:
        await reference_manager.release_reference_from_user(user_id, 'available')
        await user_state.clear()
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"

    await user_state.set_state(task_state)
    await user_state.update_data(username=user_info.username, review_text=review_text, platform_for_task=platform)

    scheduler.add_job(send_confirmation_button, 'date', run_date=run_date_confirm, args=[bot, user_id, platform])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=run_date_timeout, args=[bot, dp.storage, user_id, platform, '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ'])
    await user_state.update_data(timeout_job_id=timeout_job.id)
    
    return True, f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_info.username} (ID: {user_id})."


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –®–¢–†–ê–§–û–í ---

async def apply_fine_to_user(user_id: int, admin_id: int, amount: float, reason: str, bot: Bot) -> str:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ."""
    user = await db_manager.get_user(user_id)
    if not user:
        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await db_manager.update_balance(user_id, -amount)
    
    user_notification_text = (
        f"‚ùóÔ∏è **–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω —à—Ç—Ä–∞—Ñ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.**\n\n"
        f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
        f"**–°–ø–∏—Å–∞–Ω–æ:** {amount} ‚≠ê"
    )

    try:
        await bot.send_message(user_id, user_notification_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        logger.info(f"Admin {admin_id} fined user {user_id} for {amount} stars. Reason: {reason}")
        username = f"@{user.username}" if user.username else f"ID {user_id}"
        return f"‚úÖ –®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{username}**."
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about the fine: {e}")
        await db_manager.update_balance(user_id, amount)
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —à—Ç—Ä–∞—Ñ–µ. –®—Ç—Ä–∞—Ñ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –û—à–∏–±–∫–∞: {e}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í ---

async def approve_review_to_hold_logic(review_id: int, bot: Bot, scheduler: AsyncIOScheduler) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –µ–≥–æ –≤ —Ö–æ–ª–¥."""
    review = await db_manager.get_review_by_id(review_id)
    if not review or review.status != 'pending':
        return False, "–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."

    amount_map = {'google': 15.0, 'yandex_with_text': 50.0, 'yandex_without_text': 15.0}
    hold_minutes_map = {'google': 5, 'yandex_with_text': 24 * 60, 'yandex_without_text': 72 * 60}
    
    amount = amount_map.get(review.platform, 0.0)
    hold_duration_minutes = hold_minutes_map.get(review.platform, 24 * 60)
    
    success = await db_manager.move_review_to_hold(review_id, amount, hold_minutes=hold_duration_minutes)
    if not success:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤ (–æ—à–∏–±–∫–∞ –ë–î)."

    cooldown_hours = 72
    platform_for_cooldown = review.platform
    await db_manager.set_platform_cooldown(review.user_id, platform_for_cooldown, cooldown_hours)
    
    cooldown_end_time = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=cooldown_hours)
    scheduler.add_job(notify_cooldown_expired, 'date', run_date=cooldown_end_time, args=[bot, review.user_id, platform_for_cooldown], id=f"cooldown_notify_{review.user_id}_{platform_for_cooldown}")
    
    await reference_manager.release_reference_from_user(review.user_id, 'used')
    
    try:
        msg = await bot.send_message(review.user_id, f"‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ ({review.platform}) –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥. +{amount} ‚≠ê –≤ —Ö–æ–ª–¥.")
        asyncio.create_task(schedule_message_deletion(msg, 25))
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤ —Ö–æ–ª–¥: {e}")
    
    hold_hours = hold_duration_minutes / 60
    return True, f"–û–¥–æ–±—Ä–µ–Ω–æ. –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥ –Ω–∞ {hold_hours:.0f} —á."

async def reject_initial_review_logic(review_id: int, bot: Bot, scheduler: AsyncIOScheduler) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        return False, "–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    rejected_review = await db_manager.admin_reject_review(review_id)
    if not rejected_review:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)."

    cooldown_hours = 72
    platform_for_cooldown = rejected_review.platform
    await db_manager.set_platform_cooldown(rejected_review.user_id, platform_for_cooldown, cooldown_hours)
    cooldown_end_time = datetime.datetime.utcnow() + datetime.timedelta(hours=cooldown_hours)
    scheduler.add_job(notify_cooldown_expired, 'date', run_date=cooldown_end_time, args=[bot, rejected_review.user_id, platform_for_cooldown], id=f"cooldown_notify_{rejected_review.user_id}_{platform_for_cooldown}")
    await reference_manager.release_reference_from_user(rejected_review.user_id, 'available')
    
    try:
        user_message = f"‚ùå –í–∞—à –æ—Ç–∑—ã–≤ ({rejected_review.platform}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ö—É–ª–¥–∞—É–Ω –Ω–∞ 3 –¥–Ω—è."
        await bot.send_message(rejected_review.user_id, user_message, reply_markup=inline.get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    
    return True, "–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –∫—É–ª–¥–∞—É–Ω."


async def approve_hold_review_logic(review_id: int, bot: Bot) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏–∑ —Ö–æ–ª–¥–∞."""
    approved_review = await db_manager.admin_approve_review(review_id)
    if not approved_review:
        return False, "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
    
    user_id = approved_review.user_id
    
    if approved_review.platform == 'google':
        user = await db_manager.get_user(user_id)
        if user and user.referrer_id:
            amount = 0.45
            await db_manager.add_referral_earning(user_id=user_id, amount=amount)
            try:
                await bot.send_message(user.referrer_id, f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{user.username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} ‚≠ê.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {user.referrer_id}: {e}")
    
    if approved_review.platform == 'google':
        await check_and_apply_promo_reward(user_id, "google_review", bot)
    elif 'yandex' in approved_review.platform:
        await check_and_apply_promo_reward(user_id, "yandex_review", bot)
    
    try:
        msg = await bot.send_message(user_id, f"‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ (ID: {review_id}) –æ–¥–æ–±—Ä–µ–Ω! +{approved_review.amount} ‚≠ê –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
        asyncio.create_task(schedule_message_deletion(msg, 25))
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        
    return True, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!"


async def reject_hold_review_logic(review_id: int, bot: Bot) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –∏–∑ —Ö–æ–ª–¥–∞."""
    review_before = await db_manager.get_review_by_id(review_id)
    if not review_before or review_before.status != 'on_hold':
        return False, "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."

    rejected_review = await db_manager.admin_reject_review(review_id)
    if not rejected_review:
        return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤."
    
    try:
        user_message = f"‚ùå –í–∞—à –æ—Ç–∑—ã–≤ (ID: {review_id}) –æ—Ç–∫–ª–æ–Ω–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ó–≤–µ–∑–¥—ã —Å–ø–∏—Å–∞–Ω—ã –∏–∑ —Ö–æ–ª–¥–∞."
        await bot.send_message(rejected_review.user_id, user_message, reply_markup=inline.get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

    return True, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ---

async def approve_withdrawal_logic(request_id: int, bot: Bot) -> tuple[bool, str, object]:
    """–õ–æ–≥–∏–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."""
    request = await db_manager.approve_withdrawal_request(request_id)
    if request is None:
        return False, "‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None
    
    try:
        await bot.send_message(request.user_id, f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount} ‚≠ê **–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω**.")
    except Exception as e:
        logger.error(f"Failed to notify user {request.user_id} about withdrawal approval: {e}")

    return True, "‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", request


async def reject_withdrawal_logic(request_id: int, bot: Bot) -> tuple[bool, str, object]:
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."""
    request = await db_manager.reject_withdrawal_request(request_id)
    if request is None:
        return False, "‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

    try:
        await bot.send_message(request.user_id, f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount} ‚≠ê **–æ—Ç–∫–ª–æ–Ω–µ–Ω**. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        logger.error(f"Failed to notify user {request.user_id} about withdrawal rejection: {e}")

    return True, "‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", request


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –•–û–õ–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---

async def get_user_hold_info_logic(identifier: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–æ–ª–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = await db_manager.find_user_by_identifier(identifier)
    if not user_id:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{identifier}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    user = await db_manager.get_user(user_id)
    reviews_in_hold = await db_manager.get_user_hold_reviews(user_id)

    if not reviews_in_hold:
        return f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: `{user_id}`) –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ."

    total_hold_amount = sum(review.amount for review in reviews_in_hold)

    response_text = f"‚è≥ –û—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ –¥–ª—è @{user.username} (ID: `{user_id}`)\n"
    response_text += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: **{total_hold_amount}** ‚≠ê\n\n"

    for review in reviews_in_hold:
        hold_until_str = review.hold_until.strftime('%d.%m.%Y %H:%M') if review.hold_until else 'N/A'
        response_text += (
            f"üîπ **{review.amount} ‚≠ê** ({review.platform})\n"
            f"   - –î–æ: {hold_until_str} UTC\n"
            f"   - ID –æ—Ç–∑—ã–≤–∞: `{review.id}`\n\n"
        )
    return response_text

async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    async def delete_after_delay():
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
    asyncio.create_task(delete_after_delay())