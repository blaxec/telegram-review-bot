# file: telegram-review-bot-main/logic/admin_logic.py

import logging
import datetime
import asyncio
from math import ceil

from aiogram.types import Message
from aiogram import Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import db_manager
from states.user_states import UserState
from keyboards import inline, reply
from references import reference_manager
from logic.promo_logic import check_and_apply_promo_reward
from logic.user_notifications import send_confirmation_button, handle_task_timeout, send_cooldown_expired_notification
from config import Rewards, Durations, Limits, TESTER_IDS

logger = logging.getLogger(__name__)


# --- –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ ---
async def process_add_links_logic(links_text: str, platform: str, is_fast_track: bool = False, requires_photo: bool = False) -> str:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    """
    if not links_text:
        return "–¢–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."

    links = links_text.strip().split('\n')
    added_count, skipped_count = 0, 0

    for link in links:
        stripped_link = link.strip()
        if stripped_link and (stripped_link.startswith("http://") or stripped_link.startswith("https://")):
            try:
                if await db_manager.db_add_reference(stripped_link, platform, is_fast_track=is_fast_track, requires_photo=requires_photo):
                    added_count += 1
                else:
                    skipped_count += 1
            except Exception as e:
                logger.error(f"!!! –û–®–ò–ë–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É '{stripped_link}': {e}")
                skipped_count += 1
        elif stripped_link:
            logger.warning(f"Skipping invalid link format: {stripped_link}")
            skipped_count += 1

    return f"–ì–æ—Ç–æ–≤–æ!\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): {skipped_count}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô –ò –û–¢–ö–õ–û–ù–ï–ù–ò–ô ---

async def process_rejection_reason_logic(bot: Bot, user_id: int, reason: str, context: str, user_state: FSMContext):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if context == "gmail_data_request" or context == "gmail_device_model":
        user_message_text = f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
    elif context == "gmail_account":
        user_message_text = f"‚ùå –í–∞—à —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Gmail –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
    else:
        user_message_text = f"‚ùå –í–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        await user_state.set_state(UserState.MAIN_MENU)
        
    try:
        await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        return f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"


async def process_warning_reason_logic(bot: Bot, user_id: int, platform: str, reason: str, user_state: FSMContext, context: str):
    """–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    warnings_count = await db_manager.add_user_warning(user_id, platform=platform)
    user_message_text = f"‚ö†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"

    if warnings_count >= Limits.WARNINGS_THRESHOLD_FOR_BAN:
        user_message_text += f"\n‚ùóÔ∏è <b>–≠—Ç–æ –≤–∞—à–µ {Limits.WARNINGS_THRESHOLD_FOR_BAN}-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform.capitalize()} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {Durations.COOLDOWN_WARNING_BLOCK_HOURS} —á–∞—Å–∞.</b>"
        await user_state.clear()
        await user_state.set_state(UserState.MAIN_MENU)
    else:
        state_to_return_map = {
            "google_profile": UserState.GOOGLE_REVIEW_ASK_PROFILE_SCREENSHOT,
            "google_last_reviews": UserState.GOOGLE_REVIEW_LAST_REVIEWS_CHECK,
            "yandex_profile": UserState.YANDEX_REVIEW_INIT,
            "yandex_profile_screenshot": UserState.YANDEX_REVIEW_ASK_PROFILE_SCREENSHOT,
            "gmail_device_model": UserState.MAIN_MENU,
            "gmail_data_request": UserState.MAIN_MENU,
        }
        state_to_return = state_to_return_map.get(context)
        if state_to_return:
             await user_state.set_state(state_to_return)
        else: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
             await user_state.set_state(UserState.MAIN_MENU)
        user_message_text += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

    try:
        await bot.send_message(user_id, user_message_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        return f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –¢–ï–ö–°–¢–ê –û–¢–ó–´–í–ê ---

async def send_review_text_to_user_logic(bot: Bot, dp: Dispatcher, scheduler: AsyncIOScheduler, user_id: int, link_id: int, platform: str, review_text: str):
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á."""
    user_state = FSMContext(storage=dp.storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
            
    user_info = await bot.get_chat(user_id)
    link = await db_manager.db_get_link_by_id(link_id)

    if not link:
        await bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await user_state.clear()
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É —Å ID {link_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    task_state, task_message, run_date_confirm, run_date_timeout = None, None, None, None

    photo_instruction = "\n3. <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫ –æ—Ç–∑—ã–≤—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> (–ª—é–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ –∏–ª–∏ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ç–µ–º–∞—Ç–∏–∫–æ–π –º–µ—Å—Ç–∞)." if link.requires_photo else ""

    base_task_text = (
        "üìù <b>–í–ê–®–ï –ó–ê–î–ê–ù–ò–ï –ì–û–¢–û–í–û!</b>\n\n"
        "1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ. –í–∞—à –æ—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <b>–∞–±—Å–æ–ª—é—Ç–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–µ–Ω</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ <b>5 –∑–≤–µ–∑–¥</b>, —Ç–æ—á–Ω–æ —Å–ª–µ–¥—É—è —Ç–µ–∫—Å—Ç—É."
        f"{photo_instruction}\n\n"
        "‚ùó‚ùó‚ùó <b>–í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:</b> –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –∏ –Ω–µ —É–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã, —ç–º–æ–¥–∑–∏ –∏–ª–∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è. –û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–ø–∏–µ–π. <b>–ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò –í–°–¢–ê–í–ö–ê –¢–ï–ö–°–¢–ê –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û</b>, –ø–∏—à–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.\n\n"
        "<b>–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞:</b>\n"
        f"<i>{review_text}</i>\n\n"
        f"üîó <b><a href='{link.url}'>–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–î–ê–ù–ò–Æ</a></b> \n\n"
    )

    if platform == "google":
        task_state = UserState.GOOGLE_REVIEW_TASK_ACTIVE
        task_message = base_task_text + (
            f"‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>{Durations.TASK_GOOGLE_REVIEW_TIMEOUT} –º–∏–Ω—É—Ç</b>. "
            f"–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>{Durations.TASK_GOOGLE_REVIEW_CONFIRM_APPEARS} –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=Durations.TASK_GOOGLE_REVIEW_CONFIRM_APPEARS)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=Durations.TASK_GOOGLE_REVIEW_TIMEOUT)

    elif platform == "yandex_with_text":
        task_state = UserState.YANDEX_REVIEW_TASK_ACTIVE
        task_message = base_task_text + (
            f"‚è≥ –ù–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É –≤–∞—Å –µ—Å—Ç—å <b>{Durations.TASK_YANDEX_REVIEW_TIMEOUT} –º–∏–Ω—É—Ç</b>. "
            f"–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ <b>{Durations.TASK_YANDEX_REVIEW_CONFIRM_APPEARS} –º–∏–Ω—É—Ç</b>."
        )
        run_date_confirm = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=Durations.TASK_YANDEX_REVIEW_CONFIRM_APPEARS)
        run_date_timeout = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=Durations.TASK_YANDEX_REVIEW_TIMEOUT)
    
    if not task_state:
        return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}"

    try:
        sent_message = await bot.send_message(user_id, task_message, parse_mode='HTML', disable_web_page_preview=True)
        user_data_prev = await user_state.get_data()
        prev_confirm_job_id = user_data_prev.get('confirm_job_id')
        prev_timeout_job_id = user_data_prev.get('timeout_job_id')
        
        if prev_confirm_job_id:
            try: scheduler.remove_job(prev_confirm_job_id)
            except Exception: pass
        if prev_timeout_job_id:
            try: scheduler.remove_job(prev_timeout_job_id)
            except Exception: pass
        
    except Exception as e:
        await reference_manager.release_reference_from_user(user_id, 'available')
        await user_state.clear()
        return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}"

    await user_state.set_state(task_state)
    await user_state.update_data(
        username=user_info.username, 
        review_text=review_text, 
        platform_for_task=platform,
        current_task_message_id=sent_message.message_id
    )

    confirm_job = scheduler.add_job(send_confirmation_button, 'date', run_date=run_date_confirm, args=[bot, user_id, platform])
    timeout_job = scheduler.add_job(handle_task_timeout, 'date', run_date=run_date_timeout, args=[bot, dp.storage, user_id, platform, '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ', scheduler])
    await user_state.update_data(confirm_job_id=confirm_job.id, timeout_job_id=timeout_job.id)
    
    return True, f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_info.username} (ID: {user_id})."


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –®–¢–†–ê–§–û–í ---

async def apply_fine_to_user(user_id: int, admin_id: int, amount: float, reason: str, bot: Bot) -> str:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ."""
    user = await db_manager.get_user(user_id)
    if not user:
        return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await db_manager.update_balance(user_id, -amount, op_type="FINE", description=f"–ê–¥–º–∏–Ω {admin_id}: {reason}")
    
    user_notification_text = (
        f"‚ùóÔ∏è <b>–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω —à—Ç—Ä–∞—Ñ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"<b>–°–ø–∏—Å–∞–Ω–æ:</b> {amount:.2f} ‚≠ê"
    )

    try:
        await bot.send_message(user_id, user_notification_text, reply_markup=inline.get_back_to_main_menu_keyboard())
        logger.info(f"Admin {admin_id} fined user {user_id} for {amount} stars. Reason: {reason}")
        username = f"@{user.username}" if user.username else f"ID {user_id}"
        return f"‚úÖ –®—Ç—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{username}</b>."
    except Exception as e:
        logger.error(f"Failed to notify user {user_id} about the fine: {e}")
        await db_manager.update_balance(user_id, amount) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —à—Ç—Ä–∞—Ñ–µ. –®—Ç—Ä–∞—Ñ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –û—à–∏–±–∫–∞: {e}"


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–û–î–ï–†–ê–¶–ò–ò –û–¢–ó–´–í–û–í ---

async def approve_review_to_hold_logic(review_id: int, bot: Bot, scheduler: AsyncIOScheduler) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –µ–≥–æ –≤ —Ö–æ–ª–¥."""
    review = await db_manager.get_review_by_id(review_id)
    if not review or review.status != 'pending':
        logger.error(f"Attempted to approve review {review_id}, but it was not found or status was not 'pending'.")
        return False, "–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."

    user = await db_manager.get_user(review.user_id)
    is_tester = user and user.id in TESTER_IDS

    amount_map = {
        'google': Rewards.GOOGLE_REVIEW,
        'yandex_with_text': Rewards.YANDEX_WITH_TEXT,
        'yandex_without_text': Rewards.YANDEX_WITHOUT_TEXT
    }
    hold_minutes_map = {
        'google': Durations.HOLD_GOOGLE_MINUTES,
        'yandex_with_text': Durations.HOLD_YANDEX_WITH_TEXT_MINUTES,
        'yandex_without_text': Durations.HOLD_YANDEX_WITHOUT_TEXT_MINUTES
    }
    
    amount = amount_map.get(review.platform, 0.0)
    
    if is_tester:
        hold_duration_minutes = Durations.HOLD_TESTER_MINUTES
        logger.info(f"User {user.id} is a tester. Setting hold duration to {hold_duration_minutes} minutes for review {review_id}.")
    else:
        hold_duration_minutes = hold_minutes_map.get(review.platform, 24 * 60)
    
    success = await db_manager.move_review_to_hold(review_id, amount, hold_minutes=hold_duration_minutes)
    if not success:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –æ—Ç–∑—ã–≤ (–æ—à–∏–±–∫–∞ –ë–î)."

    cooldown_hours_map = {
        'google': Durations.COOLDOWN_GOOGLE_REVIEW_HOURS,
        'yandex_with_text': Durations.COOLDOWN_YANDEX_WITH_TEXT_HOURS,
        'yandex_without_text': Durations.COOLDOWN_YANDEX_WITHOUT_TEXT_HOURS
    }
    cooldown_hours = cooldown_hours_map.get(review.platform)
    platform_for_cooldown = review.platform
    
    cooldown_end_time = await db_manager.set_platform_cooldown(review.user_id, platform_for_cooldown, cooldown_hours)
    if cooldown_end_time:
        scheduler.add_job(
            send_cooldown_expired_notification, 
            'date', 
            run_date=cooldown_end_time, 
            args=[bot, review.user_id, platform_for_cooldown]
        )
    
    await reference_manager.release_reference_from_user(review.user_id, 'used')
    
    try:
        msg = await bot.send_message(review.user_id, f"‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ ({review.platform}) –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥. +{amount:.2f} ‚≠ê –≤ —Ö–æ–ª–¥.")
        await schedule_message_deletion(msg, Durations.DELETE_INFO_MESSAGE_DELAY)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {review.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –≤ —Ö–æ–ª–¥: {e}")
    
    hold_hours = hold_duration_minutes / 60
    return True, f"–û–¥–æ–±—Ä–µ–Ω–æ. –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–¥ –Ω–∞ {hold_hours:.2f} —á."

async def reject_initial_review_logic(review_id: int, bot: Bot, scheduler: AsyncIOScheduler, reason: str = None) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
    review = await db_manager.get_review_by_id(review_id)
    if not review:
        return False, "–û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω."

    rejected_review = await db_manager.admin_reject_review(review_id)
    if not rejected_review:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)."

    cooldown_hours_map = {
        'google': Durations.COOLDOWN_GOOGLE_REVIEW_HOURS,
        'yandex_with_text': Durations.COOLDOWN_YANDEX_WITH_TEXT_HOURS,
        'yandex_without_text': Durations.COOLDOWN_YANDEX_WITHOUT_TEXT_HOURS
    }
    cooldown_hours = cooldown_hours_map.get(rejected_review.platform, 24)
    platform_for_cooldown = rejected_review.platform

    cooldown_end_time = await db_manager.set_platform_cooldown(rejected_review.user_id, platform_for_cooldown, cooldown_hours)
    if cooldown_end_time:
        scheduler.add_job(
            send_cooldown_expired_notification, 
            'date', 
            run_date=cooldown_end_time, 
            args=[bot, rejected_review.user_id, platform_for_cooldown]
        )
    
    await reference_manager.release_reference_from_user(rejected_review.user_id, 'available')
    
    try:
        user_message = f"‚ùå –í–∞—à –æ—Ç–∑—ã–≤ ({rejected_review.platform}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        if reason:
            user_message += f"\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        user_message += "\n\n–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞."
        
        await bot.send_message(rejected_review.user_id, user_message, reply_markup=inline.get_back_to_main_menu_keyboard())
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
    
    return True, "–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –∫—É–ª–¥–∞—É–Ω."


async def approve_final_review_logic(review_id: int, bot: Bot) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –ü–û–°–õ–ï –•–û–õ–î–ê –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥."""
    approved_review = await db_manager.admin_approve_review(review_id)
    if not approved_review:
        return False, "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
    
    user_id = approved_review.user_id
    user = await db_manager.get_user(user_id)
    
    if user and user.referrer_id:
        referrer = await db_manager.get_user(user.referrer_id)
        if referrer and referrer.referral_path:
            referral_reward = 0
            
            if referrer.referral_path == 'google' and approved_review.platform == 'google':
                referral_reward = Rewards.REFERRAL_GOOGLE_REVIEW
            
            elif referrer.referral_path == 'yandex':
                if referrer.referral_subpath == 'with_text' and approved_review.platform == 'yandex_with_text':
                    referral_reward = Rewards.REFERRAL_YANDEX_WITH_TEXT
                elif referrer.referral_subpath == 'without_text' and approved_review.platform == 'yandex_without_text':
                    referral_reward = Rewards.REFERRAL_YANDEX_WITHOUT_TEXT
            
            if referral_reward > 0:
                await db_manager.add_referral_earning(user_id, referral_reward)
                try:
                    await bot.send_message(
                        referrer.id,
                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–∑—ã–≤! "
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {referral_reward:.2f} ‚≠ê –≤ –∫–æ–ø–∏–ª–∫—É."
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer.id}: {e}")

    if approved_review.platform == 'google':
        await check_and_apply_promo_reward(user_id, "google_review", bot)
    elif 'yandex' in approved_review.platform:
        await check_and_apply_promo_reward(user_id, "yandex_review", bot)
    
    try:
        await bot.send_message(user_id, f"‚úÖ –í–∞—à –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–¥–æ–±—Ä–µ–Ω! –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–∑—ã–≤ #{review_id} ({approved_review.amount:.2f} ‚≠ê) –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        
    return True, "‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω –∏ –≤—ã–ø–ª–∞—á–µ–Ω!"

async def reject_final_review_logic(review_id: int, bot: Bot) -> tuple[bool, str]:
    """–õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    rejected_review = await db_manager.admin_reject_final_confirmation(review_id)
    if not rejected_review:
        return False, "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."

    try:
        await bot.send_message(
            rejected_review.user_id,
            f"‚ùå –í–∞—à –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{review_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ù–∞–≥—Ä–∞–¥–∞ —Å–ø–∏—Å–∞–Ω–∞ –∏–∑ —Ö–æ–ª–¥–∞."
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {rejected_review.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ: {e}")

    return True, "‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω, —Ö–æ–ª–¥ —Å–ø–∏—Å–∞–Ω."


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –í–´–í–û–î–ê –°–†–ï–î–°–¢–í ---

async def approve_withdrawal_logic(request_id: int, bot: Bot) -> tuple[bool, str, object]:
    """–õ–æ–≥–∏–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."""
    request = await db_manager.approve_withdrawal_request(request_id)
    if request is None:
        return False, "‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None
    
    try:
        await bot.send_message(request.user_id, f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount:.2f} ‚≠ê <b>–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</b>.")
    except Exception as e:
        logger.error(f"Failed to notify user {request.user_id} about withdrawal approval: {e}")

    return True, "‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", request


async def reject_withdrawal_logic(request_id: int, bot: Bot) -> tuple[bool, str, object]:
    """–õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤."""
    request = await db_manager.reject_withdrawal_request(request_id)
    if request is None:
        return False, "‚ùå –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

    try:
        await bot.send_message(request.user_id, f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {request.amount:.2f} ‚≠ê <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω</b>. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.")
    except Exception as e:
        logger.error(f"Failed to notify user {request.user_id} about withdrawal rejection: {e}")

    return True, "‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.", request


# --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –•–û–õ–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---

async def get_user_hold_info_logic(identifier: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ö–æ–ª–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = await db_manager.find_user_by_identifier(identifier)
    if not user_id:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{identifier}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    user = await db_manager.get_user(user_id)
    reviews_in_hold = await db_manager.get_user_hold_reviews(user_id)

    if not reviews_in_hold:
        return f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (ID: <code>{user_id}</code>) –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ —Ö–æ–ª–¥–µ."

    total_hold_amount = sum(review.amount for review in reviews_in_hold)

    response_text = f"‚è≥ –û—Ç–∑—ã–≤—ã –≤ —Ö–æ–ª–¥–µ –¥–ª—è @{user.username} (ID: <code>{user_id}</code>)\n"
    response_text += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Ö–æ–ª–¥–µ: <b>{total_hold_amount:.2f}</b> ‚≠ê\n\n"

    for review in reviews_in_hold:
        hold_until_str = review.hold_until.strftime('%d.%m.%Y %H:%M') if review.hold_until else 'N/A'
        response_text += (
            f"üîπ <b>{review.amount:.2f} ‚≠ê</b> ({review.platform})\n"
            f"   - –î–æ: {hold_until_str} UTC\n"
            f"   - ID –æ—Ç–∑—ã–≤–∞: <code>{review.id}</code>\n\n"
        )
    return response_text

async def schedule_message_deletion(message: Message, delay: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
    async def delete_after_delay():
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except TelegramBadRequest:
            pass
    asyncio.create_task(delete_after_delay())

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –°–ü–ò–°–ö–ê –ó–ê–ë–ê–ù–ï–ù–ù–´–• ---
async def format_banned_user_page(users: list, current_page: int, total_pages: int) -> str:
    if not users:
        return "üìú <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–Ω–µ.\n\n" \
               f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
    
    text = "üìú <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        username = f"@{user.username}" if user.username else f"ID: {user.id}"
        ban_date = user.banned_at.strftime('%d.%m.%Y %H:%M') if user.banned_at else 'N/A'
        text += (
            f"üö´ {username} (ID: <code>{user.id}</code>)\n"
            f"   - <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {user.ban_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"   - <b>–î–∞—Ç–∞ –±–∞–Ω–∞:</b> {ban_date} UTC\n\n"
        )
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
    return text

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –°–ü–ò–°–ö–ê –ü–†–û–ú–û–ö–û–î–û–í ---
async def format_promo_code_page(promos: list, current_page: int, total_pages: int) -> str:
    if not promos:
        return "üìù <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n" \
               f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
    
    text = "üìù <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n"
    for promo in promos:
        condition_map = {
            'no_condition': '–ë–µ–∑ —É—Å–ª–æ–≤–∏—è',
            'google_review': '–û—Ç–∑—ã–≤ Google',
            'yandex_review': '–û—Ç–∑—ã–≤ Yandex',
            'gmail_account': '–°–æ–∑–¥–∞–Ω–∏–µ Gmail'
        }
        condition_text = condition_map.get(promo.condition, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        created_at = promo.created_at.strftime('%d.%m.%Y %H:%M') if promo.created_at else 'N/A'
        
        text += (
            f"üéÅ <b>–ö–æ–¥:</b> <code>{promo.code}</code>\n"
            f"   - <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {promo.reward:.2f} ‚≠ê\n"
            f"   - <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:</b> {promo.current_uses}/{promo.total_uses}\n"
            f"   - <b>–£—Å–ª–æ–≤–∏–µ:</b> {condition_text}\n"
            f"   - <b>–°–æ–∑–¥–∞–Ω:</b> {created_at} UTC\n\n"
        )
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}"
    return text