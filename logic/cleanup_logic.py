# file: logic/cleanup_logic.py

import logging
import datetime
from aiogram import Bot
from aiogram.fsm.storage.base import BaseStorage, StorageKey
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler


from database import db_manager
from keyboards import reply, inline
from states.user_states import UserState
from config import Durations, FINAL_CHECK_ADMIN

logger = logging.getLogger(__name__)

async def check_and_expire_links(bot: Bot, storage: BaseStorage):
    """
    –ù–∞—Ö–æ–¥–∏—Ç "–∑–∞–≤–∏—Å—à–∏–µ" –≤ —Ä–∞–±–æ—Ç–µ —Å—Å—ã–ª–∫–∏, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –∏—Ö –≤ —Å—Ç–∞—Ç—É—Å 'expired'
    –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞–Ω–∏—è.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    logger.info("Starting scheduled job: check_and_expire_links")
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ "–ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö"
        expired_links = await db_manager.db_find_and_expire_old_assigned_links(hours_threshold=24)
        
        if not expired_links:
            logger.info("No expired links found to process.")
            return

        logger.warning(f"Found {len(expired_links)} links to mark as expired.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
        for link in expired_links:
            user_id = link.assigned_to_user_id
            if not user_id:
                continue

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM)
            state = FSMContext(storage=storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
            await state.clear()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await bot.send_message(
                    user_id,
                    "‚ùóÔ∏è –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –°—Å—ã–ª–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –ø—É–ª.",
                    reply_markup=reply.get_main_menu_keyboard()
                )
                logger.info(f"Notified user {user_id} about expired task for link {link.id}.")
            except TelegramBadRequest:
                logger.warning(f"Could not notify user {user_id} about expired task. Bot might be blocked.")
            except Exception as e:
                logger.error(f"Failed to process expired link notification for user {user_id}: {e}")

    except Exception as e:
        logger.exception("An error occurred during the check_and_expire_links job.")

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ü–û–°–õ–ï –•–û–õ–î–ê ---

async def handle_confirmation_timeout(bot: Bot, user_id: int, review_id: int, state: FSMContext):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–æ–≤—Ä–µ–º—è."""
    current_state = await state.get_state()
    if current_state != UserState.AWAITING_CONFIRMATION_SCREENSHOT:
        logger.info(f"Confirmation timeout for review {review_id} (user {user_id}) triggered, but user is in state {current_state}. Aborting.")
        return
        
    review = await db_manager.cancel_hold(review_id)
    await state.clear()
    await state.set_state(UserState.MAIN_MENU)
    
    if review:
        logger.warning(f"User {user_id} failed to confirm review {review_id} in time. Hold cancelled.")
        try:
            await bot.send_message(
                user_id,
                f"‚è≥ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏—Å—Ç–µ–∫–ª–æ. –•–æ–ª–¥ –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{review_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
            )
            await bot.send_message(
                FINAL_CHECK_ADMIN,
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{review.user.username} (ID: `{user_id}`) –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞ #{review_id} –≤–æ–≤—Ä–µ–º—è. –•–æ–ª–¥ –æ—Ç–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        except Exception as e:
            logger.error(f"Failed to notify about confirmation timeout for review {review_id}: {e}")

async def process_expired_holds(bot: Bot, storage: BaseStorage, scheduler: AsyncIOScheduler):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ö–æ–ª–¥—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    logger.info("Scheduler: Running job 'process_expired_holds'.")
    reviews_to_process = await db_manager.get_reviews_past_hold()
    if not reviews_to_process:
        return
        
    logger.info(f"Scheduler: Found {len(reviews_to_process)} reviews past hold to process.")
    
    for review in reviews_to_process:
        user_id = review.user_id
        review_id = review.id
        
        await db_manager.update_review_status(review_id, 'awaiting_confirmation')
        
        user_state = FSMContext(storage=storage, key=StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id))
        await user_state.set_state(UserState.AWAITING_CONFIRMATION_SCREENSHOT)
        await user_state.update_data(review_id_for_confirmation=review_id)
        
        run_date = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=Durations.CONFIRMATION_TIMEOUT_MINUTES)
        scheduler.add_job(handle_confirmation_timeout, 'date', run_date=run_date, args=[bot, user_id, review_id, user_state])
        
        try:
            await bot.send_message(
                user_id,
                f"üîî –í—Ä–µ–º—è —Ö–æ–ª–¥–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞ #{review_id} –∏—Å—Ç–µ–∫–ª–æ!\n\n"
                f"–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ **–Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç**, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π, —á—Ç–æ –≤–∞—à –æ—Ç–∑—ã–≤ –≤—Å—ë –µ—â—ë –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.\n\n"
                f"‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å **{Durations.CONFIRMATION_TIMEOUT_MINUTES} –º–∏–Ω—É—Ç** –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                reply_markup=inline.get_cancel_inline_keyboard()
            )
            logger.info(f"Requested confirmation screenshot for review {review_id} from user {user_id}.")
        except Exception as e:
            logger.error(f"Failed to request confirmation from user {user_id} for review {review_id}: {e}")
            await db_manager.cancel_hold(review_id)
            await user_state.clear()