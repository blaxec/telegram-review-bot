# file: telegram-review-bot-main/handlers/admin_roles.py

import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from config import SUPER_ADMIN_ID, ADMIN_IDS
from keyboards import inline
from database import db_manager
from logic import admin_roles
from utils.access_filters import IsSuperAdmin # –ù–û–í–´–ô –§–ò–õ–¨–¢–†

router = Router()
logger = logging.getLogger(__name__)


# --- –ö–æ–º–∞–Ω–¥–∞ /roles ---
@router.message(Command("roles"), IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def cmd_roles(message: Message):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏."""
    await message.answer(
        "üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö.",
        reply_markup=await inline.get_roles_main_menu()
    )

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---

@router.callback_query(F.data == "roles_back:main", IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–ª–µ–π."""
    await callback.message.edit_text(
        "üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö.",
        reply_markup=await inline.get_roles_main_menu()
    )

@router.callback_query(F.data.startswith("roles_cat:"), IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_select_category(callback: CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ø–Ω–¥–µ–∫—Å, Google –∏ —Ç.–¥.)."""
    category = callback.data.split(":")[1]
    
    if category == "yandex":
        await callback.message.edit_text(
            "<b>üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=await inline.get_roles_yandex_menu()
        )
    elif category == "google":
        await callback.message.edit_text(
            "<b>üåç Google Maps</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "google")
        )
    elif category == "gmail":
        await callback.message.edit_text(
            "<b>üìß Gmail</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "gmail")
        )
    elif category == "other":
        await callback.message.edit_text(
            "<b>üì¶ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
            reply_markup=await inline.get_task_switching_keyboard(bot, "other")
        )

@router.callback_query(F.data.startswith("roles_subcat:"), IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_select_subcategory(callback: CallbackQuery, bot: Bot):
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ø–Ω–¥–µ–∫—Å —Å —Ç–µ–∫—Å—Ç–æ–º/–±–µ–∑)."""
    subcategory = callback.data.split(":")[1] # yandex_text –∏–ª–∏ yandex_no_text
    category, sub_type = subcategory.split("_", 1) # yandex, text

    title_map = {
        "text": "üìù –Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)",
        "no_text": "üö´ –Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)",
    }
    
    await callback.message.edit_text(
        f"<b>{title_map.get(sub_type)}</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.",
        reply_markup=await inline.get_task_switching_keyboard(bot, category, sub_type)
    )

@router.callback_query(F.data == "roles_back:yandex", IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_back_to_yandex_cat(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –Ø–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á."""
    await callback.message.edit_text(
        "<b>üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        reply_markup=await inline.get_roles_yandex_menu()
    )
    
# --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

@router.callback_query(F.data.startswith("roles_switch:"), IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_switch_admin(callback: CallbackQuery, bot: Bot):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏."""
    role_key = callback.data.split(":", 1)[1]
    
    current_admin_id_str = await db_manager.get_system_setting(role_key)
    current_admin_id = int(current_admin_id_str) if current_admin_id_str else SUPER_ADMIN_ID
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–µ–∂–¥—É SUPER_ADMIN_ID –∏ ADMIN_ID_2 (–µ—Å–ª–∏ ADMIN_ID_2 —Å—É—â–µ—Å—Ç–≤—É–µ—Ç), –∏–Ω–∞—á–µ –º–µ–∂–¥—É SUPER_ADMIN_ID –∏ —Å–æ–±–æ–π
    if len(ADMIN_IDS) > 1 and current_admin_id == SUPER_ADMIN_ID:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ
        other_admin_id = next((aid for aid in ADMIN_IDS if aid != SUPER_ADMIN_ID), SUPER_ADMIN_ID)
        new_admin_id = other_admin_id
    elif len(ADMIN_IDS) > 1 and current_admin_id != SUPER_ADMIN_ID:
        new_admin_id = SUPER_ADMIN_ID
    else: # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–¥–º–∏–Ω
        new_admin_id = SUPER_ADMIN_ID
    
    await db_manager.set_system_setting(role_key, str(new_admin_id))
    
    await callback.answer("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–∑–º–µ–Ω–µ–Ω!")

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
    category = "unknown"
    subcategory = None
    
    if "yandex_text" in role_key:
        category = "yandex"
        subcategory = "text"
    elif "yandex_no_text" in role_key:
        category = "yandex"
        subcategory = "no_text"
    elif "google" in role_key:
        category = "google"
    elif "gmail" in role_key:
        category = "gmail"
    elif "other" in role_key:
        category = "other"
    
    await callback.message.edit_reply_markup(
        reply_markup=await inline.get_task_switching_keyboard(bot, category, subcategory)
    )
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    task_description = admin_roles.ROLE_DESCRIPTIONS.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞")
    new_admin_name = await admin_roles.get_admin_username(bot, new_admin_id)
    old_admin_name = await admin_roles.get_admin_username(bot, current_admin_id)

    notification_text = (
        f"üîÑ <b>–°–º–µ–Ω–∞ —Ä–æ–ª–µ–π!</b>\n\n"
        f"–ó–∞–¥–∞—á–∞ ¬´<b>{task_description}</b>¬ª –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ—Ç {old_admin_name} –∫ {new_admin_name}."
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, notification_text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id} –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏: {e}")

@router.callback_query(F.data == "roles_show_current", IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_show_current_settings(callback: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    await callback.answer()
    settings_text = await admin_roles.get_all_roles_readable(bot)
    await callback.message.answer(
        settings_text,
        reply_markup=inline.get_current_settings_keyboard()
    )

@router.callback_query(F.data == "roles_delete_msg", IsSuperAdmin()) # –ò–∑–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä
async def roles_delete_settings_msg(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    try:
        await callback.message.delete()
        await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    except TelegramBadRequest:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)