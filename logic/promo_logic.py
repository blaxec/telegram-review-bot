# file: logic/promo_logic.py

from database import db_manager, models
import logging

logger = logging.getLogger(__name__)

async def activate_promo_code_logic(user_id: int, code: str) -> tuple[str, models.PromoCode | None]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—Å—Ç–∞—Ç—É—Å_—Å–æ–æ–±—â–µ–Ω–∏—è, –æ–±—ä–µ–∫—Ç_–ø—Ä–æ–º–æ–∫–æ–¥–∞_–∏–ª–∏_None).
    """
    # 0. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º
    any_pending_activation = await db_manager.find_pending_promo_activation(user_id)
    if any_pending_activation:
        message = (
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥, —Ç—Ä–µ–±—É—é—â–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è. "
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π, –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–ª–∏ –Ω–µ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ."
        )
        return message, None

    # 1. –ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    promo = await db_manager.get_promo_by_code(code, for_update=True)
    if not promo:
        return "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.", None

    # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if promo.current_uses >= promo.total_uses:
        return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.", None

    # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —Ä–∞–Ω–µ–µ
    existing_activation = await db_manager.get_user_promo_activation(user_id, promo.id)
    if existing_activation:
        return "‚ùóÔ∏è –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.", None
        
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π
    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if promo.condition == "no_condition":
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await db_manager.create_promo_activation(user_id, promo, status='completed')
        await db_manager.update_balance(user_id, promo.reward)
        logger.info(f"User {user_id} activated promo '{promo.code}' with no condition. Rewarded {promo.reward} stars.")
        return f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo.reward} ‚≠ê.", promo
    
    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    else:
        await db_manager.create_promo_activation(user_id, promo, status='pending_condition')
        logger.info(f"User {user_id} activated promo '{promo.code}'. Pending condition: {promo.condition}.")
        
        condition_map = {
            "google_review": "–Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤ –≤ Google –ö–∞—Ä—Ç–∞—Ö",
            "yandex_review": "–Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤ –≤ Yandex –ö–∞—Ä—Ç–∞—Ö",
            "gmail_account": "—Å–æ–∑–¥–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Gmail"
        }
        condition_text = condition_map.get(promo.condition, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
        
        message = (
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ `{promo.code}` –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è **{promo.reward} ‚≠ê** –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ **{condition_text}**.\n\n"
            f"–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è?"
        )
        return message, promo

async def check_and_apply_promo_reward(user_id: int, condition_completed: str, bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å —ç—Ç–∏–º —É—Å–ª–æ–≤–∏–µ–º,
    –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É.
    """
    activation = await db_manager.find_pending_promo_activation(user_id, condition_completed)
    
    if activation:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç False, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω.
        success = await db_manager.complete_promo_activation(activation.id)
        
        if success:
            promo = activation.promo_code
            await db_manager.update_balance(user_id, promo.reward)
            
            try:
                await bot.send_message(
                    user_id,
                    f"üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ **'{promo.code}'**! "
                    f"–í–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{promo.reward} ‚≠ê**."
                )
                logger.info(f"User {user_id} completed promo '{promo.code}' condition. Rewarded {promo.reward} stars.")
            except Exception as e:
                logger.error(f"Failed to notify user {user_id} about completed promo: {e}")
        else:
             logger.warning(f"User {user_id} completed condition for promo '{activation.promo_code.code}', but it has no uses left.")