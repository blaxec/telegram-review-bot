
# file: logic/promo_logic.py

from database import db_manager
import logging

logger = logging.getLogger(__name__)

async def activate_promo_code_logic(user_id: int, code: str) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # 1. –ù–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
    promo = await db_manager.get_promo_by_code(code)
    if not promo:
        return "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."

    # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if promo.current_uses >= promo.total_uses:
        return "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω."

    # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —Ä–∞–Ω–µ–µ
    existing_activation = await db_manager.get_user_promo_activation(user_id, promo.id)
    if existing_activation:
        return "‚ùóÔ∏è –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."
        
    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π
    condition_map = {
        "no_condition": "–ë–µ–∑ —É—Å–ª–æ–≤–∏—è",
        "google_review": "–ù–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤ –≤ Google –ö–∞—Ä—Ç–∞—Ö",
        "yandex_review": "–ù–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤ –≤ Yandex –ö–∞—Ä—Ç–∞—Ö",
        "gmail_account": "–°–æ–∑–¥–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Gmail"
    }
    
    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if promo.condition == "no_condition":
        await db_manager.update_balance(user_id, promo.reward)
        await db_manager.create_promo_activation(user_id, promo, status='completed')
        logger.info(f"User {user_id} activated promo '{promo.code}' with no condition. Rewarded {promo.reward} stars.")
        return f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo.reward} ‚≠ê."
    
    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    else:
        await db_manager.create_promo_activation(user_id, promo, status='pending_condition')
        condition_text = condition_map.get(promo.condition, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ")
        logger.info(f"User {user_id} activated promo '{promo.code}'. Pending condition: {promo.condition}.")
        return (
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: **{promo.reward} ‚≠ê**\n"
            f"üìù –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è: **{condition_text}**.\n\n"
            f"–ù–∞–≥—Ä–∞–¥–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–æ."
        )

async def check_and_apply_promo_reward(user_id: int, condition_completed: str, bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–∂–∏–¥–∞—é—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å —ç—Ç–∏–º —É—Å–ª–æ–≤–∏–µ–º,
    –∏ –µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—É.
    """
    activation = await db_manager.find_pending_promo_activation(user_id, condition_completed)
    
    if activation:
        promo = await db_manager.get_promo_by_code(activation.promo_code.code)
        if promo and promo.current_uses < promo.total_uses:
            await db_manager.update_balance(user_id, promo.reward)
            await db_manager.complete_promo_activation(activation.id)
            
            try:
                await bot.send_message(
                    user_id,
                    f"üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ **'{promo.code}'**! "
                    f"–í–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{promo.reward} ‚≠ê**."
                )
                logger.info(f"User {user_id} completed promo '{promo.code}' condition. Rewarded {promo.reward} stars.")
            except Exception as e:
                logger.error(f"Failed to notify user {user_id} about completed promo: {e}")
        elif promo:
             logger.warning(f"User {user_id} completed condition for promo '{promo.code}', but it has no uses left.")