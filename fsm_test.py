# file: fsm_test.py

import asyncio
import logging
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID_1", 0))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä—è–º–æ –≤ —Ñ–∞–π–ª–µ
class TestStates(StatesGroup):
    waiting_for_message = State()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å MemoryStorage
dp = Dispatcher(storage=MemoryStorage())

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(Command("start"), F.from_user.id == ADMIN_ID)
async def start_test(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞."""
    kb = [[InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", callback_data="set_state")]]
    markup = InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–¢–µ—Å—Ç FSM. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

@dp.callback_query(F.data == "set_state", F.from_user.id == ADMIN_ID)
async def set_state_handler(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º."""
    await state.set_state(TestStates.waiting_for_message)
    current_state = await state.get_state()
    await callback.message.answer(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: `{current_state}`. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await callback.answer()
    logging.info(f"--- FSM state set to: {current_state} for user {callback.from_user.id} ---")

@dp.message(F.state == TestStates.waiting_for_message, F.from_user.id == ADMIN_ID)
async def message_in_state_handler(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ü–†–ê–í–ò–õ–¨–ù–û."""
    current_state = await state.get_state()
    await message.answer(
        f"üéâ –ü–û–ë–ï–î–ê! –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–π–º–∞–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: `{current_state}`.\n"
        f"–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ FSM —Ä–∞–±–æ—Ç–∞–µ—Ç."
    )
    await state.clear()

@dp.message(F.from_user.id == ADMIN_ID)
async def catch_all_admin_messages(message: Message, state: FSMContext):
    """–õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ –ù–ï –ø–æ–ø–∞–ª–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—à–µ."""
    current_state = await state.get_state()
    await message.answer(
        f"‚ùå –ü–†–û–í–ê–õ. –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –±—ã–ª–æ –ø–æ–π–º–∞–Ω–æ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
        f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥–∏—Ç –±–æ—Ç: `{current_state}`."
    )
    logging.warning(f"--- FAILED. Message from {message.from_user.id} was not caught. Current state is: {current_state} ---")

async def main():
    if not BOT_TOKEN or ADMIN_ID == 0:
        logging.critical("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –∏–ª–∏ ADMIN_ID_1 –≤ .env —Ñ–∞–π–ª–µ!")
        return
        
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å—Ç–µ—Ä–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å ID: {ADMIN_ID}")
    bot = Bot(token=BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())