# telegram-review-bot-main/alembic/versions/l3m4n5o6p7q8_create_task_subscriptions_table.py

"""create task_subscriptions table
Revision ID: l3m4n5o6p7q8
Revises: g7h8i9j0k1l2
Create Date: 2025-10-10 13:00:00.000000
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'l3m4n5o6p7q8'
down_revision: Union[str, None] = 'g7h8i9j0k1l2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # --- ИЗМЕНЕНИЕ: Добавляем тот же безопасный блок создания типа и сюда ---
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender_enum') THEN
                CREATE TYPE gender_enum AS ENUM ('any', 'male', 'female');
            END IF;
        END$$;
    """)

    # Определяем тип для SQLAlchemy, но запрещаем ему управлять созданием.
    gender_enum_type = sa.Enum('any', 'male', 'female', name='gender_enum', create_type=False)

    op.create_table('task_subscriptions',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('platform', sa.String(), nullable=False),
        sa.Column('gender', gender_enum_type, nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'platform', 'gender')
    )
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_subscriptions')
    # Эта миграция НЕ должна удалять тип.
    # ### end Alembic commands ###