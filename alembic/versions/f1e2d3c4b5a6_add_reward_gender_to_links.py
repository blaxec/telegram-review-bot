# telegram-review-bot-main/alembic/versions/f1e2d3c4b5a6_add_reward_gender_to_links.py

"""add reward gender to links

Revision ID: f1e2d3c4b5a6
Revises: e1d2c3b4a5f6
Create Date: 2025-10-10 10:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'f1e2d3c4b5a6'
down_revision: Union[str, None] = 'e1d2c3b4a5f6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # --- ИЗМЕНЕНИЕ: Используем чистый SQL для безопасного создания типа ---
    # Эта команда создаст тип, только если он не существует.
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender_enum') THEN
                CREATE TYPE gender_enum AS ENUM ('any', 'male', 'female');
            END IF;
        END$$;
    """)
    
    # Определяем тип для SQLAlchemy, но запрещаем ему управлять созданием.
    gender_enum_type = sa.Enum('any', 'male', 'female', name='gender_enum', create_type=False)

    op.add_column('links', sa.Column('reward_amount', sa.Float(), server_default=sa.text("'0.0'"), nullable=False))
    op.add_column('links', sa.Column('gender_requirement', gender_enum_type, server_default=sa.text("'any'"), nullable=False))
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('links', 'gender_requirement')
    op.drop_column('links', 'reward_amount')
    
    # Эта миграция отвечает за удаление типа при откате.
    op.execute("DROP TYPE IF EXISTS gender_enum")
    # ### end Alembic commands ###