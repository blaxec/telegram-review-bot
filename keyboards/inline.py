# file: keyboards/inline.py

import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import Rewards, GOOGLE_API_KEYS
from aiogram import Bot
# from logic import admin_roles # Circular import risk, remove if not strictly needed here
from database.models import UnbanRequest, InternshipApplication, User, PostTemplate, Administrator, Link, AIScenario
from typing import Set, List, Optional, Tuple, Dict

# --- /start –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

def get_agreement_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è', callback_data='agree_agreement')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_main_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cancel_inline_keyboard(callback_data: str = 'cancel_action') -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data=callback_data)]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –†–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" ---

def get_profile_keyboard(first_task_completed: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üéÅ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥', callback_data='profile_withdraw')
    builder.button(text='üí∏ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–≤–µ–∑–¥', callback_data='profile_transfer')
    builder.button(text='üè¶ –î–µ–ø–æ–∑–∏—Ç—ã', callback_data='show_deposits_menu')
    
    if first_task_completed:
        builder.button(text='üíñ –ü–æ–º–æ—á—å –Ω–æ–≤–∏—á–∫–∞–º', callback_data='profile_donate')
    else:
        builder.button(text='üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å', callback_data='get_daily_help')
        
    builder.button(text='üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π', callback_data='profile_history')
    builder.button(text='üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='profile_referral')
    builder.button(text='‚è≥ –•–æ–ª–¥', callback_data='profile_hold')
    builder.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='go_main_menu')
    builder.adjust(2, 2, 2, 2)
    return builder.as_markup()

def get_operation_history_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='go_profile')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_cancel_to_profile_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='go_profile')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_transfer_options_keyboard(data: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    comment_text = "‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" if data.get('transfer_comment') else "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    media_text = f"üñºÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ ({len(data.get('transfer_media', []))}/3)"
    anon_text = "‚úÖ –ê–Ω–æ–Ω–∏–º–Ω–æ" if data.get('is_anonymous') else "üôà –ê–Ω–æ–Ω–∏–º–Ω–æ"
    
    builder.button(text=comment_text, callback_data="transfer_option:comment")
    builder.button(text=media_text, callback_data="transfer_option:media")
    builder.button(text=anon_text, callback_data="transfer_option:anonymous")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="transfer_option:confirm")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="go_profile")
    builder.adjust(2,1,1,1)
    return builder.as_markup()

def get_transfer_confirmation_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='transfer_confirm')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='go_profile')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_transfer_recipient_keyboard(transfer_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üö® –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"transfer_complain:{transfer_id}")
    builder.button(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_post")
    builder.adjust(1)
    return builder.as_markup()

# --- –†–∞–∑–¥–µ–ª "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ---

def get_stats_keyboard(is_anonymous: bool) -> InlineKeyboardMarkup:
    anonymity_text = "üôà –°—Ç–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º" if not is_anonymous else "üêµ –ü–æ–∫–∞–∑–∞—Ç—å –≤ —Ç–æ–ø–µ"
    buttons = [
        [InlineKeyboardButton(text=anonymity_text, callback_data='profile_toggle_anonymity')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ü–µ—Ä–µ–¥–∞—á–∞ –∏ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥ ---
def get_withdraw_amount_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text='15 ‚≠ê', callback_data='withdraw_amount_15'),
            InlineKeyboardButton(text='25 ‚≠ê', callback_data='withdraw_amount_25'),
        ],
        [
            InlineKeyboardButton(text='50 ‚≠ê', callback_data='withdraw_amount_50'),
            InlineKeyboardButton(text='100 ‚≠ê', callback_data='withdraw_amount_100'),
        ],
        [InlineKeyboardButton(text='üî¢ –î—Ä—É–≥–∞—è —Å—É–º–º–∞', callback_data='withdraw_amount_other')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='go_profile')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_withdraw_recipient_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='üë§ –°–µ–±–µ', callback_data='withdraw_recipient_self')],
        [InlineKeyboardButton(text='üë• –£–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='withdraw_recipient_other')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='go_profile')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_ask_comment_keyboard(prefix: str) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚úçÔ∏è –î–∞', callback_data=f'{prefix}_ask_comment_yes')],
        [InlineKeyboardButton(text='üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç', callback_data=f'{prefix}_ask_comment_no')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ---
def get_referral_info_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã', callback_data='profile_referrals_list')],
        [InlineKeyboardButton(text='üí∞ –ó–∞–±—Ä–∞—Ç—å –∏–∑ –∫–æ–ø–∏–ª–∫–∏', callback_data='profile_claim_referral_stars')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='go_profile')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_profile_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='go_profile')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_referral_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='profile_referral')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –†–∞–∑–¥–µ–ª "–ó–∞—Ä–∞–±–æ—Ç–æ–∫" ---

def get_earning_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞', callback_data='earning_write_review')
    builder.button(text='üìß –°–¥–µ–ª–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Gmail', callback_data='earning_create_gmail')
    builder.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='go_main_menu')
    builder.adjust(1)
    return builder.as_markup()

def get_write_review_platform_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üåç Google –∫–∞—Ä—Ç—ã', callback_data='review_google_maps')
    builder.button(text='üó∫Ô∏è Yandex –∫–∞—Ä—Ç—ã', callback_data='review_yandex_maps')
    builder.button(text='üöÄ Zoon', callback_data='review_zoon')
    builder.button(text='üíº Avito', callback_data='review_avito')
    builder.button(text='üõ†Ô∏è Yandex —É—Å–ª—É–≥–∏', callback_data='review_yandex_services')
    builder.button(text='üí° –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å?', callback_data='info_how_to_improve_pass_rate')
    builder.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='earning_menu')
    builder.adjust(2, 2, 1, 1, 1)
    return builder.as_markup()

def get_back_to_platform_choice_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='earning_write_review')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_subscribe_for_tasks_keyboard(platform: str, gender: str) -> InlineKeyboardMarkup:
    gender_map = {'male': '–º—É–∂—Å–∫–∏—Ö', 'female': '–∂–µ–Ω—Å–∫–∏—Ö', 'any': ''}
    platform_map = {'google_maps': 'Google', 'yandex_with_text': 'Yandex', 'yandex_without_text': 'Yandex'}
    
    g_text = gender_map.get(gender, '')
    p_text = platform_map.get(platform, platform)
    
    btn_text = f"üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–¥–∞–Ω–∏—è—Ö {p_text}"
    if g_text: btn_text += f" ({g_text})"
    
    buttons = [
        [InlineKeyboardButton(text=btn_text, callback_data=f'subscribe_for_tasks:{platform}:{gender}')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- Google –∏ Yandex –û—Ç–∑—ã–≤—ã ---

def get_google_init_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data='google_review_done')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_google_ask_profile_screenshot_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚ùì –ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?', callback_data='google_get_profile_screenshot')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_google_back_from_instructions_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='google_back_to_profile_screenshot')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_google_last_reviews_check_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚ùì –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã', callback_data='google_last_reviews_where')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_google_back_from_last_reviews_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='google_back_to_last_reviews')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_liking_confirmation_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='üëç –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data='google_confirm_liking_task')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_task_confirmation_keyboard(platform: str) -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='üëç –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data=f'{platform}_confirm_task')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_how_to_check_publication_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚ùì –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?', callback_data='info_how_to_check_publication')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_awaiting_text_keyboard() -> InlineKeyboardMarkup:
    # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–±—ç–∫–∞, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='close_post')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_yandex_review_type_keyboard() -> InlineKeyboardMarkup:
    # –ù–∞–≥—Ä–∞–¥—ã —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ, —É–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
    buttons = [
        [InlineKeyboardButton(text='–° —Ç–µ–∫—Å—Ç–æ–º', callback_data='yandex_review_type:with_text')],
        [InlineKeyboardButton(text='–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞', callback_data='yandex_review_type:without_text')],
        [InlineKeyboardButton(text='‚úè –≠—Ç–∞–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å', callback_data='info_yandex_moderation_stages')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='earning_write_review')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_back_to_yandex_type_choice_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='review_yandex_maps')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_yandex_init_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='üì∏ –Ø –≥–æ—Ç–æ–≤(–∞) –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç', callback_data='yandex_ready_to_screenshot')],
        [InlineKeyboardButton(text='üí° –ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—Ç–æ–∫–∞', callback_data='yandex_how_to_be_expert')],
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
    
def get_yandex_ask_profile_screenshot_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='earning_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_yandex_liking_confirmation_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='üëç –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data='yandex_confirm_liking_task')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- Gmail ---
def get_gmail_cooldown_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='üì± –£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='gmail_another_phone')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='go_main_menu')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_gmail_verification_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚ùì –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?', callback_data='gmail_how_to_create')],
        [InlineKeyboardButton(text='üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', callback_data='gmail_send_for_verification')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_gmail_back_to_verification_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—é', callback_data='gmail_back_to_verification')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)
    
def get_cancel_to_earning_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_to_earning')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è) ---

def get_admin_verification_keyboard(user_id: int, context: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    ocr_contexts = ['yandex_profile_screenshot', 'google_last_reviews', 'google_profile']
    if context in ocr_contexts and GOOGLE_API_KEYS:
        builder.button(text="ü§ñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –ò–ò", callback_data=f"admin_ocr:{context}:{user_id}")

    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_verify:confirm:{context}:{user_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_verify:reject:{context}:{user_id}")
    builder.button(text="‚ö†Ô∏è –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data=f"admin_verify:warn:{context}:{user_id}")
    builder.adjust(1, 2, 1)
    return builder.as_markup()

def get_intern_verification_keyboard(user_id: int, context: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"intern_verify:confirm:{context}:{user_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"intern_verify:reject:{context}:{user_id}")
    builder.button(text="‚ö†Ô∏è –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data=f"intern_verify:warn:{context}:{user_id}")
    builder.adjust(2, 1)
    return builder.as_markup()

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—ã–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞) ---

def get_admin_provide_text_keyboard(platform: str, user_id: int, link_id: int, requires_photo: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    photo_required_str = 'true' if requires_photo else 'false'
    builder.button(text='‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é (—Å—Ü–µ–Ω–∞—Ä–∏–π)', callback_data=f'admin_text_manual_start:{platform}:{user_id}:{link_id}:{photo_required_str}')
    builder.button(text='ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ò–ò', callback_data=f'admin_ai_generate_start:{platform}:{user_id}:{link_id}:{photo_required_str}')
    builder.adjust(1)
    return builder.as_markup()

def get_manual_text_scenario_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úç –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="input_scenario_manually")
    builder.button(text="üìÇ –í—ã–±—Ä–∞—Ç—å –∏–∑ –±–∞–Ω–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", callback_data="use_scenario_template")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1)
    return builder.as_markup()

def get_ai_template_use_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ai_template:confirm_use")
    builder.button(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="ai_template:edit_text")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1, 1, 1)
    return builder.as_markup()

def get_ai_moderation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', callback_data='ai_moderation:send')
    builder.button(text='üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='ai_moderation:regenerate')
    builder.button(text='‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data='ai_moderation:manual')
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_action')
    builder.adjust(1)
    return builder.as_markup()

def get_ai_error_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='ai_moderation:regenerate')
    builder.button(text='‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data='ai_moderation:manual')
    builder.adjust(1)
    return builder.as_markup()


# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏) ---

def get_admin_refs_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="Google –ö–∞—Ä—Ç—ã", callback_data="admin_refs:select_platform:google_maps")
    builder.button(text="–Ø–Ω–¥–µ–∫—Å (—Å —Ç–µ–∫—Å—Ç–æ–º)", callback_data="admin_refs:select_platform:yandex_with_text")
    builder.button(text="–Ø–Ω–¥–µ–∫—Å (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)", callback_data="admin_refs:select_platform:yandex_without_text")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_admin_platform_refs_keyboard(platform: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_refs:stats:{platform}")
    builder.button(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"admin_refs:list:{platform}:all")
    
    # –¢–∏–ø—ã —Å—Å—ã–ª–æ–∫
    types = [("regular", "no_photo", "–û–±—ã—á–Ω—ã–µ"), ("regular", "photo", "–° —Ñ–æ—Ç–æ üì∏"),
             ("fast", "no_photo", "–ë—ã—Å—Ç—Ä—ã–µ üöÄ"), ("fast", "photo", "–ë—ã—Å—Ç—Ä—ã–µ —Å —Ñ–æ—Ç–æ üöÄüì∏")]
    
    for t_type, p_req, label in types:
        builder.button(text=f"‚ûï {label}", callback_data=f"admin_refs:add:{t_type}:{p_req}:{platform}")
        
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_refs:back_to_selection")
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

def get_gender_requirement_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–ª—è –≤—Å–µ—Ö üë§", callback_data="gender_any")
    builder.button(text="–¢–æ–ª—å–∫–æ –º—É–∂—á–∏–Ω—ã üë®", callback_data="gender_male")
    builder.button(text="–¢–æ–ª—å–∫–æ –∂–µ–Ω—â–∏–Ω—ã üë©", callback_data="gender_female")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1, 2, 1)
    return builder.as_markup()

def get_campaign_tag_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_campaign_tag")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
    builder.adjust(1)
    return builder.as_markup()

def get_link_list_control_keyboard(platform: str, current_page: int, total_pages: int, filter_type: str, reward_filter: float = None, gender_filter: str = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–∞
    type_filters = [("–í—Å–µ", "all"), ("üöÄ", "fast"), ("üì∏", "photo"), ("üìÑ", "regular")]
    type_btns = []
    for text, f_type in type_filters:
        btn_text = f"‚úÖ {text}" if filter_type == f_type else text
        type_btns.append(InlineKeyboardButton(text=btn_text, callback_data=f"admin_refs:list:{platform}:{f_type}"))
    builder.row(*type_btns)
    
    # –§–∏–ª—å—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ–ª–∞
    reward_text = f"–ù–∞–≥—Ä–∞–¥–∞: {reward_filter}‚≠ê" if reward_filter is not None else "–ù–∞–≥—Ä–∞–¥–∞"
    gender_icons = {'male': 'üë®', 'female': 'üë©', 'any': 'üë§'}
    gender_text = f"–ü–æ–ª: {gender_icons.get(gender_filter, '–í—Å–µ')}" if gender_filter and gender_filter != 'all' else "–ü–æ–ª"
    
    builder.row(
        InlineKeyboardButton(text=reward_text, callback_data=f"admin_refs:filter_reward:{platform}"),
        InlineKeyboardButton(text=gender_text, callback_data=f"admin_refs:filter_gender:{platform}")
    )
    
    # –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if reward_filter is not None or (gender_filter and gender_filter != 'all'):
        builder.row(InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f"admin_refs:reset_filters:{platform}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_row = []
    if current_page > 1:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"links_page:{platform}:{current_page-1}"))
    if total_pages > 1:
        pagination_row.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="noop"))
    if current_page < total_pages:
        pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"links_page:{platform}:{current_page+1}"))
    if pagination_row:
        builder.row(*pagination_row)
        
    # –î–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID', callback_data=f'admin_refs:delete_start:{platform}'),
        InlineKeyboardButton(text='‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å ID', callback_data=f'admin_refs:return_start:{platform}')
    )
    builder.row(InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'admin_refs:select_platform:{platform}'))
    return builder.as_markup()

def get_gender_filter_keyboard(platform: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—Å–µ", callback_data=f"admin_refs:set_gender:all:{platform}")
    builder.button(text="üë® –ú—É–∂.", callback_data=f"admin_refs:set_gender:male:{platform}")
    builder.button(text="üë© –ñ–µ–Ω.", callback_data=f"admin_refs:set_gender:female:{platform}")
    builder.button(text="üë§ –õ—é–±–æ–π", callback_data=f"admin_refs:set_gender:any:{platform}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_refs:list:{platform}:all") # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É
    builder.adjust(4, 1)
    return builder.as_markup()

def get_reward_filter_keyboard(platform: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã", callback_data=f"admin_refs:reset_reward:{platform}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_refs:list:{platform}:all")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–∞–º–ø–∞–Ω–∏–∏ ---
def get_campaign_list_keyboard(tags: List[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for tag in tags:
        builder.button(text=tag, callback_data=f"campaign_stats:{tag}")
    builder.button(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_post")
    builder.adjust(1)
    return builder.as_markup()

def get_back_to_campaigns_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–∞–º–ø–∞–Ω–∏–π", callback_data="back_to_campaigns")
    builder.button(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_post")
    builder.adjust(1)
    return builder.as_markup()

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è) ---

def get_admin_gmail_final_check_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'admin_gmail_confirm_account:{user_id}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin_gmail_reject_account:{user_id}')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_final_verdict_keyboard(review_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text='‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–≤ —Ö–æ–ª–¥)', callback_data=f'admin_final_approve:{review_id}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin_final_reject:{review_id}')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_final_verification_keyboard(review_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text='‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'final_verify_approve:{review_id}'),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (—Å–ø–∏—Å–∞—Ç—å)', callback_data=f'final_verify_reject:{review_id}')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_withdrawal_keyboard(request_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_withdraw_approve:{request_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_withdraw_reject:{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–æ–±—â–∞—è) ---

def get_pagination_keyboard(prefix: str, current_page: int, total_pages: int, show_close: bool = True, back_callback: Optional[str] = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    pagination_row = []
    if current_page > 1:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}:{current_page-1}"))
    if total_pages > 1:
        pagination_row.append(InlineKeyboardButton(text=f"{current_page}/{total_pages}", callback_data="noop"))
    if current_page < total_pages:
        pagination_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}:{current_page+1}"))
    
    if pagination_row:
        builder.row(*pagination_row)
    
    if back_callback:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback))
    elif show_close:
        builder.row(InlineKeyboardButton(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_post"))
        
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞–º–Ω–∏—Å—Ç–∏–∏, –∂–∞–ª–æ–± ---
def get_support_admin_keyboard(ticket_id: int, user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'support_answer:{ticket_id}')
    builder.button(text='‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', callback_data=f'support_warn:{ticket_id}:{user_id}')
    builder.adjust(1)
    return builder.as_markup()

def get_amnesty_keyboard(requests: list[UnbanRequest], current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for req in requests:
        user = req.user
        username = f"@{user.username}" if user.username else f"ID {user.id}"
        # ban_count_text = f"({user.unban_count + 1}-–π —Ä–∞–∑)" # –ü–ª–∞—Ç–Ω—ã–π —Ä–∞–∑–±–∞–Ω –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω
        builder.row(
            InlineKeyboardButton(text=f"‚úÖ {username}", callback_data=f"amnesty:action:approve:{req.id}"),
            InlineKeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"amnesty:action:reject:{req.id}")
        )
    
    pagination_markup = get_pagination_keyboard("amnesty:page", current_page, total_pages, back_callback="panel:manage_bans")
    for row in pagination_markup.inline_keyboard:
        builder.row(*row)
    return builder.as_markup()

def get_complaints_keyboard(complaints: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∂–∞–ª–æ–±–∞–º–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É)
    pagination_markup = get_pagination_keyboard("complaints:page", page, total_pages, back_callback="panel:back_to_panel")
    for row in pagination_markup.inline_keyboard:
        builder.row(*row)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ---
def get_promo_condition_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ë–µ–∑ —É—Å–ª–æ–≤–∏—è", callback_data="promo_cond:no_condition")
    builder.button(text="üåç –û—Ç–∑—ã–≤ Google", callback_data="promo_cond:google_review")
    builder.button(text="üó∫Ô∏è –û—Ç–∑—ã–≤ Yandex", callback_data="promo_cond:yandex_review")
    builder.button(text="üìß –°–æ–∑–¥–∞–Ω–∏–µ Gmail", callback_data="promo_cond:gmail_account")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="panel:manage_promos")
    builder.adjust(1, 2, 1, 1)
    return builder.as_markup()

def get_promo_conditional_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="promo_start_task")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="promo_decline_task")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏, –ø–∞–Ω–µ–ª–∏, —Å—Ç–∞–∂–∏—Ä–æ–≤–æ–∫, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤ ---
# (–û—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è –ø—Ä–æ–º–ø—Ç–æ–º,
# –Ω–æ –Ω—É–∂–Ω—ã –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞).
# ... [–ö–æ–¥ get_roles_main_menu –∏ –¥–∞–ª–µ–µ –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ keyboards/inline.py] ...
# –í—Å—Ç–∞–≤–ª—è—é –∏—Ö —Å—é–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏ –ø–æ–ª–Ω—ã–µ –∫–æ–¥—ã.

async def get_roles_main_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", callback_data="roles_cat:yandex")
    builder.button(text="üåç Google Maps", callback_data="roles_cat:google")
    builder.button(text="üìß Gmail", callback_data="roles_cat:gmail")
    builder.button(text="üì¶ –î—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏", callback_data="roles_cat:other")
    builder.button(text="‚öô –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="roles_show_current")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()

async def get_roles_yandex_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –° —Ç–µ–∫—Å—Ç–æ–º", callback_data="roles_subcat:yandex_text")
    builder.button(text="üö´ –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="roles_subcat:yandex_no_text")
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="roles_back:main")
    builder.adjust(2, 1)
    return builder.as_markup()

async def get_task_switching_keyboard(bot: Bot, category: str, subcategory: str = None) -> InlineKeyboardMarkup:
    # from logic import admin_roles # Import inside function to avoid circular import
    # Assuming admin_roles logic is handled elsewhere in handlers setup
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=f"roles_back:main") # Placeholder
    return builder.as_markup()

async def get_admin_selection_keyboard(admins: List[Administrator], role_key: str, current_admin_id: int, bot: Bot) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for admin in admins:
        prefix = "‚úÖ " if admin.user_id == current_admin_id else ""
        username = f"ID {admin.user_id}" # Placeholder
        builder.button(text=f"{prefix}{username}", callback_data=f"roles_set_admin:{role_key}:{admin.user_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="roles_back:main") # Placeholder
    builder.adjust(1)
    return builder.as_markup()

def get_current_settings_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="roles_delete_msg")
    return builder.as_markup()

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="panel:manage_bans")
    builder.button(text="‚ú® –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="panel:manage_promos")
    builder.button(text="üí∏ –®—Ç—Ä–∞—Ñ", callback_data="panel:issue_fine")
    builder.button(text="‚ùÑÔ∏è –°–±—Ä–æ—Å –∫—É–ª–¥–∞—É–Ω–æ–≤", callback_data="panel:reset_cooldown")
    builder.button(text="‚è≥ –•–æ–ª–¥ —é–∑–µ—Ä–∞", callback_data="panel:view_hold")
    builder.button(text="üö® –ñ–∞–ª–æ–±—ã", callback_data="panel:view_complaints")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")
    builder.adjust(2, 2, 2, 1)
    return builder.as_markup()

def get_ban_management_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="panel:ban_user")
    builder.button(text="üìú –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö", callback_data="panel:ban_list")
    builder.button(text="üôè –ê–º–Ω–∏—Å—Ç–∏—è", callback_data="panel:manage_amnesty")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="panel:back_to_panel")
    builder.adjust(1)
    return builder.as_markup()

def get_promo_management_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ú® –°–æ–∑–¥–∞—Ç—å", callback_data="panel:create_promo")
    builder.button(text="üìù –°–ø–∏—Å–æ–∫", callback_data="panel:promo_list")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="panel:back_to_panel")
    builder.adjust(1)
    return builder.as_markup()

def get_promo_list_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    pagination_markup = get_pagination_keyboard("promolist:page", current_page, total_pages, show_close=False, back_callback="panel:manage_promos")
    for row in pagination_markup.inline_keyboard:
        builder.row(*row)
    builder.row(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ ID/–∫–æ–¥—É", callback_data="promolist:delete_start"))
    return builder.as_markup()

def get_roles_manage_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="roles_manage:add")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫", callback_data="roles_manage:list:1")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_single_admin_manage_keyboard(admin: Administrator) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    tester_text = "‚úÖ –£–±—Ä–∞—Ç—å –∏–∑ —Ç–µ—Å—Ç–µ—Ä–æ–≤" if admin.is_tester else "üîÑ –°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–µ—Ä–æ–º"
    builder.button(text=tester_text, callback_data=f"roles_manage:toggle_tester:{admin.user_id}")
    if admin.is_removable:
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"roles_manage:delete_confirm:{admin.user_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="roles_manage:list:1")
    builder.adjust(1)
    return builder.as_markup()

def get_role_selection_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üõ°Ô∏è –ê–¥–º–∏–Ω", callback_data="roles_manage:set_role:admin")
    builder.button(text="üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω", callback_data="roles_manage:set_role:super_admin")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="roles_manage:back_to_menu")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_delete_admin_confirm_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"roles_manage:delete_execute:{user_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ—Ç", callback_data=f"roles_manage:view:{user_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_internship_application_start_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text='üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='internship_app:start')]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_admin_internships_main_menu(stats: Dict[str, int]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=f"üìù –ê–Ω–∫–µ—Ç—ã ({stats['applications']})", callback_data="admin_internships:view:applications:1")
    builder.button(text=f"üßë‚Äçüéì –ö–∞–Ω–¥–∏–¥–∞—Ç—ã ({stats['candidates']})", callback_data="admin_internships:view:candidates:1")
    builder.button(text=f"üë®‚Äçüíª –°—Ç–∞–∂–µ—Ä—ã ({stats['interns']})", callback_data="admin_internships:view:interns:1")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_internship_confirmation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –í–æ–∑—Ä–∞—Å—Ç", callback_data="internship_app:start:age")
    builder.button(text="‚úèÔ∏è –ß–∞—Å—ã", callback_data="internship_app:start:hours")
    builder.button(text="‚úèÔ∏è –û—Ç–≤–µ—Ç", callback_data="internship_app:start:response_time")
    builder.button(text="‚úèÔ∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã", callback_data="internship_app:start:platforms")
    builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="internship_app:confirm")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_admin_application_review_keyboard(app: InternshipApplication) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_internships:action:approve:{app.id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_internships:action:reject:{app.id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_internships:view:applications:1")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_admin_intern_view_keyboard(intern: User) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üî• –£–≤–æ–ª–∏—Ç—å", callback_data=f"admin_internships:fire_start:{intern.id}")
    builder.button(text="üìú –û—à–∏–±–∫–∏", callback_data=f"intern_cabinet:mistakes:{intern.id}:1")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_internships:view:interns:1")
    builder.adjust(2, 1)
    return builder.as_markup()

def get_admin_intern_task_setup_keyboard(candidate_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="Google (–æ—Ç–∑—ã–≤)", callback_data=f"admin_intern_task:type:google_review:{candidate_id}")
    builder.button(text="Yandex (—Ç–µ–∫—Å—Ç)", callback_data=f"admin_intern_task:type:yandex_with_text:{candidate_id}")
    builder.button(text="Yandex (–±–µ–∑)", callback_data=f"admin_intern_task:type:yandex_without_text:{candidate_id}")
    builder.button(text="Gmail", callback_data=f"admin_intern_task:type:gmail_account:{candidate_id}")
    builder.button(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_internships:view:candidates:1")
    builder.adjust(1)
    return builder.as_markup()

def get_post_constructor_keyboard(data: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    text_exists = bool(data.get("post_text"))
    media_exists = bool(data.get("post_media"))

    if not text_exists:
        builder.button(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="post_constructor:edit_text")
    else:
        builder.button(text="‚úçÔ∏è –ò–∑–º. —Ç–µ–∫—Å—Ç", callback_data="post_constructor:edit_text")
        builder.button(text="üóëÔ∏è –£–¥–∞–ª. —Ç–µ–∫—Å—Ç", callback_data="post_constructor:delete_text")

    if not media_exists:
        builder.button(text="üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="post_constructor:edit_media")
    else:
        builder.button(text="üñºÔ∏è –£–ø—Ä. –º–µ–¥–∏–∞", callback_data="post_constructor:view_media")

    builder.button(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data="post_constructor:edit_buttons")
    builder.button(text="üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è", callback_data="post_constructor:edit_audience")
    builder.button(text="üíæ –°–æ—Ö—Ä. —à–∞–±–ª–æ–Ω", callback_data="post_constructor:save_template")
    builder.button(text="üìÇ –ó–∞–≥—Ä. —à–∞–±–ª–æ–Ω", callback_data="post_constructor:load_template")
    builder.button(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="post_constructor:send")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="post_constructor:show_format_help")
    builder.button(text="üè† –ú–µ–Ω—é", callback_data="go_main_menu")
    
    row1 = 1 if not text_exists else 2
    builder.adjust(row1, 1, 2, 2, 1, 1)
    return builder.as_markup()

def get_post_media_keyboard(has_media: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="post:media_done")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post:cancel_input")
    builder.adjust(1)
    return builder.as_markup()

def get_post_media_preview_keyboard(media_list: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i, media in enumerate(media_list):
        builder.button(text=f"üóëÔ∏è {i+1}. {media['type']}", callback_data=f"post_media:delete:{i}")
    if len(media_list) < 10 and not any(m['type'] == 'gif' for m in media_list):
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="post_constructor:edit_media")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post:back_to_constructor")
    builder.adjust(1)
    return builder.as_markup()

def get_post_buttons_manage_keyboard(buttons_list: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i, btn in enumerate(buttons_list):
        builder.button(text=f"üóëÔ∏è {btn['text']}", callback_data=f"post_btn:delete:{i}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="post_btn:add_start")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post:back_to_constructor")
    builder.adjust(1)
    return builder.as_markup()

def get_post_audience_keyboard(selected: List[str]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    audiences = {'all_users': '–í—Å–µ', 'admins': '–ê–¥–º–∏–Ω—ã', 'super_admins': '–ì–ª–∞–≤–Ω—ã–µ', 'testers': '–¢–µ—Å—Ç–µ—Ä—ã'}
    for key, text in audiences.items():
        prefix = "‚úÖ " if key in selected else ""
        builder.button(text=prefix + text, callback_data=f"post_audience:toggle:{key}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post:back_to_constructor")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_post_template_list_keyboard(templates: list[PostTemplate]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not templates:
        builder.button(text="–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="noop")
    else:
        for t in templates:
            builder.button(text=t.template_name, callback_data=f"post_template:load:{t.id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="post:back_to_constructor")
    builder.adjust(1)
    return builder.as_markup()

def get_post_confirm_send_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="post_constructor:confirm_send")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ—Ç", callback_data="post_back_to_constructor")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_close_post_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="üóëÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_post")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_notification_close_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text="–ü–æ–Ω—è—Ç–Ω–æ", callback_data="close_post")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–≥—Ä, –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –¥–æ–Ω–∞—Ç–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---

def get_games_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="ü™ô –û—Ä—ë–ª –∏ –†–µ—à–∫–∞", callback_data="start_coinflip")
    builder.button(text="‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="go_profile")
    builder.adjust(1)
    return builder.as_markup()

def get_coinflip_bet_keyboard(play_again: bool = False, win_streak: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    bets = [1, 5, 10, 25]
    for bet in bets:
        builder.button(text=f"{bet} ‚≠ê", callback_data=f"bet_{bet}")
    builder.button(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="custom_bet")
    
    back_text = "‚¨ÖÔ∏è –ú–µ–Ω—é –∏–≥—Ä" if not play_again else "‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å"
    back_cb = "back_to_games_menu" if not play_again else "go_profile"

    builder.button(text=back_text, callback_data=back_cb)
    builder.adjust(4, 1, 1)
    return builder.as_markup()

def get_coinflip_choice_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="ü¶Ö –û—Ä—ë–ª", callback_data="choice_eagle"),
         InlineKeyboardButton(text="ü™ô –†–µ—à–∫–∞", callback_data="choice_tails")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deposits_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç", callback_data="open_new_deposit")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="go_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_deposit_plan_selection_keyboard(plans: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for plan_id, plan in plans.items():
        builder.button(text=plan['name'], callback_data=f"select_deposit_plan:{plan_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_deposits_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_donation_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üí∞ –°–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="make_donation")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="go_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_scenarios_main_menu_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", callback_data="scenarios:add")],
        [InlineKeyboardButton(text="üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏", callback_data="scenarios:view")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_scenario_category_keyboard(categories: list, action_prefix: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"{action_prefix}:{cat}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="scenarios:back_to_main")
    builder.adjust(2)
    return builder.as_markup()

def get_scenario_list_keyboard(scenarios: list[AIScenario]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for s in scenarios:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        text_preview = (s.text[:20] + '..') if len(s.text) > 20 else s.text
        builder.button(text=f"üóëÔ∏è {text_preview}", callback_data=f"scenarios:delete:{s.id}:{s.category}")
    builder.button(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="scenarios:view")
    builder.adjust(1)
    return builder.as_markup()

def get_scenario_category_selection_keyboard(categories: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"use_scenario_cat:{cat}")
    builder.button(text="‚úç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="input_scenario_manually")
    builder.adjust(2)
    return builder.as_markup()